{
  "version": 3,
  "sources": ["src/app/services/users.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { User, CreateUserRequest, UpdateUserRequest } from '../models/user.model';\r\nimport { environment } from '../../environments/environment';\r\nimport { AuthService } from './auth.service';\r\n\r\nexport interface UserSearchParams {\r\n  page?: number;\r\n  pageSize?: number;\r\n  search?: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsersService {\r\n  private apiUrl = `${environment.apiBaseUrl}/Users`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n  }\r\n\r\n  getUsers(params: UserSearchParams = {}): Observable<any> {\r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params.page) httpParams = httpParams.set('page', params.page.toString());\r\n    if (params.pageSize) httpParams = httpParams.set('pageSize', params.pageSize.toString());\r\n    if (params.search) httpParams = httpParams.set('search', params.search);\r\n    \r\n    return this.http.get<any>(this.apiUrl, { \r\n      headers: this.getAuthHeaders(),\r\n      params: httpParams\r\n    });\r\n  }\r\n\r\n  getUserNames(): Observable<Array<{ id: string; name: string; departmentName: string }>> {\r\n    return this.http.get<any>(`${this.apiUrl}/names`, { headers: this.getAuthHeaders() }).pipe(\r\n      map(response => {\r\n        if (response.success && Array.isArray(response.data)) {\r\n          return response.data as Array<{ id: string; name: string; departmentName: string }>;\r\n        }\r\n        return [];\r\n      })\r\n    );\r\n  }\r\n\r\n  getUserById(userId: string): Observable<User> {\r\n    return this.http.get<User>(`${this.apiUrl}/${userId}`);\r\n  }\r\n\r\n  getUserProfile(): Observable<User> {\r\n    return this.http.get<any>(`${this.apiUrl}/profile`, { headers: this.getAuthHeaders() }).pipe(\r\n      map(response => {\r\n        if (response.success && response.data) {\r\n          return response.data;\r\n        }\r\n        throw new Error('Failed to get user profile');\r\n      })\r\n    );\r\n  }\r\n\r\n  createUser(userData: CreateUserRequest): Observable<User> {\r\n    return this.http.post<any>(this.apiUrl, userData, { headers: this.getAuthHeaders() }).pipe(\r\n      map(response => {\r\n        if (response.success && response.data) {\r\n          return response.data;\r\n        }\r\n        throw new Error('Failed to create user');\r\n      })\r\n    );\r\n  }\r\n\r\n  updateUser(userId: string, userData: UpdateUserRequest): Observable<User> {\r\n    return this.http.put<User>(`${this.apiUrl}/${userId}`, userData, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  updateUserProfile(userData: UpdateUserRequest): Observable<User> {\r\n    return this.http.put<User>(`${this.apiUrl}/profile`, userData, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  deleteUser(userId: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${userId}`, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  updateUserRole(userId: string, role: string): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/${userId}/role`, { role }, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  updateUserStatus(userId: string, isActive: boolean): Observable<void> {\r\n    return this.http.patch<void>(`${this.apiUrl}/${userId}/status`, { isActive }, { headers: this.getAuthHeaders() });\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAiBM,IAAO,eAAP,MAAO,cAAY;EAIb;EACA;EAJF,SAAS,GAAG,YAAY,UAAU;EAE1C,YACU,MACA,aAAwB;AADxB,SAAA,OAAA;AACA,SAAA,cAAA;EACP;EAEK,iBAAc;AACpB,UAAM,QAAQ,KAAK,YAAY,SAAQ;AACvC,WAAO,IAAI,YAAW,EAAG,IAAI,iBAAiB,UAAU,KAAK,EAAE;EACjE;EAEA,SAAS,SAA2B,CAAA,GAAE;AACpC,QAAI,aAAa,IAAI,WAAU;AAE/B,QAAI,OAAO;AAAM,mBAAa,WAAW,IAAI,QAAQ,OAAO,KAAK,SAAQ,CAAE;AAC3E,QAAI,OAAO;AAAU,mBAAa,WAAW,IAAI,YAAY,OAAO,SAAS,SAAQ,CAAE;AACvF,QAAI,OAAO;AAAQ,mBAAa,WAAW,IAAI,UAAU,OAAO,MAAM;AAEtE,WAAO,KAAK,KAAK,IAAS,KAAK,QAAQ;MACrC,SAAS,KAAK,eAAc;MAC5B,QAAQ;KACT;EACH;EAEA,eAAY;AACV,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,MAAM,UAAU,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE,EAAE,KACpF,IAAI,cAAW;AACb,UAAI,SAAS,WAAW,MAAM,QAAQ,SAAS,IAAI,GAAG;AACpD,eAAO,SAAS;MAClB;AACA,aAAO,CAAA;IACT,CAAC,CAAC;EAEN;EAEA,YAAY,QAAc;AACxB,WAAO,KAAK,KAAK,IAAU,GAAG,KAAK,MAAM,IAAI,MAAM,EAAE;EACvD;EAEA,iBAAc;AACZ,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,MAAM,YAAY,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE,EAAE,KACtF,IAAI,cAAW;AACb,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,eAAO,SAAS;MAClB;AACA,YAAM,IAAI,MAAM,4BAA4B;IAC9C,CAAC,CAAC;EAEN;EAEA,WAAW,UAA2B;AACpC,WAAO,KAAK,KAAK,KAAU,KAAK,QAAQ,UAAU,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE,EAAE,KACpF,IAAI,cAAW;AACb,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,eAAO,SAAS;MAClB;AACA,YAAM,IAAI,MAAM,uBAAuB;IACzC,CAAC,CAAC;EAEN;EAEA,WAAW,QAAgB,UAA2B;AACpD,WAAO,KAAK,KAAK,IAAU,GAAG,KAAK,MAAM,IAAI,MAAM,IAAI,UAAU,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE;EACrG;EAEA,kBAAkB,UAA2B;AAC3C,WAAO,KAAK,KAAK,IAAU,GAAG,KAAK,MAAM,YAAY,UAAU,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE;EACnG;EAEA,WAAW,QAAc;AACvB,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,MAAM,IAAI,MAAM,IAAI,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE;EAC9F;EAEA,eAAe,QAAgB,MAAY;AACzC,WAAO,KAAK,KAAK,IAAU,GAAG,KAAK,MAAM,IAAI,MAAM,SAAS,EAAE,KAAI,GAAI,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE;EAC1G;EAEA,iBAAiB,QAAgB,UAAiB;AAChD,WAAO,KAAK,KAAK,MAAY,GAAG,KAAK,MAAM,IAAI,MAAM,WAAW,EAAE,SAAQ,GAAI,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE;EAClH;;qCAjFW,eAAY,mBAAA,UAAA,GAAA,mBAAA,WAAA,CAAA;EAAA;4EAAZ,eAAY,SAAZ,cAAY,WAAA,YAFX,OAAM,CAAA;;;sEAEP,cAAY,CAAA;UAHxB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
