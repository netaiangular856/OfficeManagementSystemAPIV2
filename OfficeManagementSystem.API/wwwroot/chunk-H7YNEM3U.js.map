{
  "version": 3,
  "sources": ["src/app/services/calendar-stats.service.ts", "src/app/services/reminder.service.ts", "src/app/components/calendar/add-reminder-modal/add-reminder-modal.component.ts", "src/app/components/calendar/add-reminder-modal/add-reminder-modal.component.html", "src/app/components/calendar/edit-reminder-modal/edit-reminder-modal.component.ts", "src/app/components/calendar/edit-reminder-modal/edit-reminder-modal.component.html", "src/app/components/calendar/all-reminders-modal/all-reminders-modal.component.ts", "src/app/components/calendar/all-reminders-modal/all-reminders-modal.component.html", "src/app/components/calendar/calendar.component.ts", "src/app/components/calendar/calendar.component.html", "src/app/components/calendar/calendar-routing.module.ts", "src/app/components/calendar/calendar.module.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\n\r\nexport interface CalendarStats {\r\n  period: number;\r\n  periodName: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  meetingsCount: number;\r\n  tasksCount: number;\r\n  visitsCount: number;\r\n  travelsCount: number;\r\n  totalEventsCount: number;\r\n}\r\n\r\nexport interface CalendarStatsResponse {\r\n  success: boolean;\r\n  message: string;\r\n  data: CalendarStats;\r\n  errors: any[];\r\n}\r\n\r\nexport enum CalendarPeriod {\r\n  Day = 1,\r\n  Week = 2,\r\n  Month = 3,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CalendarStatsService {\r\n  private apiUrl = `${environment.apiBaseUrl}/Calendar`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUserCalendarStats(\r\n    period: CalendarPeriod\r\n  ): Observable<CalendarStatsResponse> {\r\n    return this.http.get<CalendarStatsResponse>(\r\n      `${this.apiUrl}/user/stats?period=${period}`\r\n    );\r\n  }\r\n}\r\n", "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { \r\n  Reminder, \r\n  ReminderResponse, \r\n  CreateReminderRequest, \r\n  UpdateReminderRequest \r\n} from '../models/reminder.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ReminderService {\r\n  private baseUrl = environment.apiBaseUrl;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createReminder(reminder: CreateReminderRequest): Observable<ReminderResponse> {\r\n    return this.http.post<ReminderResponse>(`${this.baseUrl}/Reminder`, reminder);\r\n  }\r\n\r\n  updateReminder(reminder: UpdateReminderRequest): Observable<ReminderResponse> {\r\n    return this.http.put<ReminderResponse>(`${this.baseUrl}/Reminder`, reminder);\r\n  }\r\n\r\n  deleteReminder(id: number): Observable<ReminderResponse> {\r\n    return this.http.delete<ReminderResponse>(`${this.baseUrl}/Reminder/${id}`);\r\n  }\r\n\r\n  getMyReminders(): Observable<ReminderResponse> {\r\n    return this.http.get<ReminderResponse>(`${this.baseUrl}/Reminder/my-reminders`);\r\n  }\r\n}\r\n", "import { Component, EventEmitter, Input, Output, signal } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ReminderService } from '../../../services/reminder.service';\r\nimport { TranslationService } from '../../../services/translation.service';\r\nimport { CreateReminderRequest } from '../../../models/reminder.model';\r\n\r\n@Component({\r\n  selector: 'app-add-reminder-modal',\r\n  standalone: false,\r\n  templateUrl: './add-reminder-modal.component.html',\r\n  styleUrls: ['./add-reminder-modal.component.css']\r\n})\r\nexport class AddReminderModalComponent {\r\n  @Input() isOpen = signal(false);\r\n  @Output() reminderCreated = new EventEmitter<void>();\r\n  @Output() closeModal = new EventEmitter<void>();\r\n\r\n  reminderForm: FormGroup;\r\n  loading = signal(false);\r\n  error = signal<string | null>(null);\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private reminderService: ReminderService,\r\n    private translationService: TranslationService\r\n  ) {\r\n    this.reminderForm = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(3)]],\r\n      description: [''],\r\n      eventTime: ['', Validators.required],\r\n      reminderTime: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.reminderForm.valid) {\r\n      this.loading.set(true);\r\n      this.error.set(null);\r\n\r\n      const formValue = this.reminderForm.value;\r\n      const reminderData: CreateReminderRequest = {\r\n        title: formValue.title,\r\n        description: formValue.description,\r\n        eventTime: new Date(formValue.eventTime).toISOString(),\r\n        reminderTime: new Date(formValue.reminderTime).toISOString()\r\n      };\r\n\r\n      this.reminderService.createReminder(reminderData).subscribe({\r\n        next: (response) => {\r\n          this.loading.set(false);\r\n          if (response.success) {\r\n            this.reminderCreated.emit();\r\n            this.closeModal.emit();\r\n            this.resetForm();\r\n          } else {\r\n            this.error.set(response.message || this.translate('reminders.create_error'));\r\n          }\r\n        },\r\n        error: (error) => {\r\n          this.loading.set(false);\r\n          console.error('Error creating reminder:', error);\r\n          this.error.set(this.translate('reminders.create_error'));\r\n        }\r\n      });\r\n    } else {\r\n      this.markFormGroupTouched();\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.closeModal.emit();\r\n    this.resetForm();\r\n  }\r\n\r\n  private resetForm(): void {\r\n    this.reminderForm.reset();\r\n    this.error.set(null);\r\n  }\r\n\r\n  private markFormGroupTouched(): void {\r\n    Object.keys(this.reminderForm.controls).forEach(key => {\r\n      const control = this.reminderForm.get(key);\r\n      control?.markAsTouched();\r\n    });\r\n  }\r\n\r\n  translate(key: string): string {\r\n    return this.translationService.translate(key);\r\n  }\r\n\r\n  getFieldError(fieldName: string): string {\r\n    const field = this.reminderForm.get(fieldName);\r\n    if (field?.errors && field.touched) {\r\n      if (field.errors['required']) {\r\n        return this.translate('login.field_required');\r\n      }\r\n      if (field.errors['minlength']) {\r\n        return `${this.translate('login.min_length')} ${field.errors['minlength'].requiredLength}`;\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n}\r\n", "<div class=\"add-reminder-modal\" *ngIf=\"isOpen()\" (click)=\"onCancel()\">\r\n  <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n    <div class=\"modal-header\">\r\n      <h3 class=\"modal-title\">{{ translate('reminders.add_reminder') }}</h3>\r\n      <button class=\"close-btn\" (click)=\"onCancel()\">\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n    \r\n    <div class=\"modal-body\">\r\n      <form [formGroup]=\"reminderForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group\">\r\n          <label for=\"title\">{{ translate('reminders.reminder_title') }} *</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"title\"\r\n            formControlName=\"title\"\r\n            [placeholder]=\"translate('reminders.title_placeholder')\"\r\n            class=\"form-control\"\r\n            [class.error]=\"reminderForm.get('title')?.invalid && reminderForm.get('title')?.touched\"\r\n          />\r\n          <div class=\"error-message\" *ngIf=\"getFieldError('title')\">\r\n            {{ getFieldError('title') }}\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"description\">{{ translate('reminders.reminder_description') }}</label>\r\n          <textarea\r\n            id=\"description\"\r\n            formControlName=\"description\"\r\n            [placeholder]=\"translate('reminders.description_placeholder')\"\r\n            class=\"form-control\"\r\n            rows=\"3\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"eventTime\">{{ translate('reminders.event_time') }} *</label>\r\n          <input\r\n            type=\"datetime-local\"\r\n            id=\"eventTime\"\r\n            formControlName=\"eventTime\"\r\n            class=\"form-control\"\r\n            [class.error]=\"reminderForm.get('eventTime')?.invalid && reminderForm.get('eventTime')?.touched\"\r\n          />\r\n          <div class=\"error-message\" *ngIf=\"getFieldError('eventTime')\">\r\n            {{ getFieldError('eventTime') }}\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"reminderTime\">{{ translate('reminders.reminder_time') }} *</label>\r\n          <input\r\n            type=\"datetime-local\"\r\n            id=\"reminderTime\"\r\n            formControlName=\"reminderTime\"\r\n            class=\"form-control\"\r\n            [class.error]=\"reminderForm.get('reminderTime')?.invalid && reminderForm.get('reminderTime')?.touched\"\r\n          />\r\n          <div class=\"error-message\" *ngIf=\"getFieldError('reminderTime')\">\r\n            {{ getFieldError('reminderTime') }}\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"error-message\" *ngIf=\"error()\">\r\n          {{ error() }}\r\n        </div>\r\n\r\n        <div class=\"form-actions\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCancel()\" [disabled]=\"loading()\">\r\n            {{ translate('reminders.cancel') }}\r\n          </button>\r\n          <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loading() || reminderForm.invalid\">\r\n            <span *ngIf=\"loading()\" class=\"spinner\"></span>\r\n            {{ translate('reminders.submit') }}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, signal, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ReminderService } from '../../../services/reminder.service';\r\nimport { TranslationService } from '../../../services/translation.service';\r\nimport { Reminder, UpdateReminderRequest } from '../../../models/reminder.model';\r\n\r\n@Component({\r\n  selector: 'app-edit-reminder-modal',\r\n  standalone: false,\r\n  templateUrl: './edit-reminder-modal.component.html',\r\n  styleUrls: ['./edit-reminder-modal.component.css']\r\n})\r\nexport class EditReminderModalComponent implements OnInit, OnChanges {\r\n  @Input() isOpen = signal(false);\r\n  @Input() reminder: Reminder | null = null;\r\n  @Output() reminderUpdated = new EventEmitter<void>();\r\n  @Output() closeModal = new EventEmitter<void>();\r\n\r\n  reminderForm: FormGroup;\r\n  loading = signal(false);\r\n  error = signal<string | null>(null);\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private reminderService: ReminderService,\r\n    private translationService: TranslationService\r\n  ) {\r\n    this.reminderForm = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(3)]],\r\n      description: [''],\r\n      eventTime: ['', Validators.required],\r\n      reminderTime: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeForm();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['reminder'] && this.reminder) {\r\n      this.initializeForm();\r\n    }\r\n  }\r\n\r\n  private initializeForm(): void {\r\n    if (this.reminder) {\r\n      const eventTime = new Date(this.reminder.eventTime);\r\n      const reminderTime = new Date(this.reminder.reminderTime);\r\n      \r\n      // Format for datetime-local input\r\n      const eventTimeFormatted = this.formatDateTimeForInput(eventTime);\r\n      const reminderTimeFormatted = this.formatDateTimeForInput(reminderTime);\r\n\r\n      this.reminderForm.patchValue({\r\n        title: this.reminder.title,\r\n        description: this.reminder.description,\r\n        eventTime: eventTimeFormatted,\r\n        reminderTime: reminderTimeFormatted\r\n      });\r\n    }\r\n  }\r\n\r\n  private formatDateTimeForInput(date: Date): string {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n    \r\n    return `${year}-${month}-${day}T${hours}:${minutes}`;\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.reminderForm.valid && this.reminder) {\r\n      this.loading.set(true);\r\n      this.error.set(null);\r\n\r\n      const formValue = this.reminderForm.value;\r\n      const reminderData: UpdateReminderRequest = {\r\n        id: this.reminder.id,\r\n        title: formValue.title,\r\n        description: formValue.description,\r\n        eventTime: new Date(formValue.eventTime).toISOString(),\r\n        reminderTime: new Date(formValue.reminderTime).toISOString()\r\n      };\r\n\r\n      this.reminderService.updateReminder(reminderData).subscribe({\r\n        next: (response) => {\r\n          this.loading.set(false);\r\n          if (response.success) {\r\n            this.reminderUpdated.emit();\r\n            this.closeModal.emit();\r\n          } else {\r\n            this.error.set(response.message || this.translate('reminders.update_error'));\r\n          }\r\n        },\r\n        error: (error) => {\r\n          this.loading.set(false);\r\n          console.error('Error updating reminder:', error);\r\n          this.error.set(this.translate('reminders.update_error'));\r\n        }\r\n      });\r\n    } else {\r\n      this.markFormGroupTouched();\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.closeModal.emit();\r\n  }\r\n\r\n  private markFormGroupTouched(): void {\r\n    Object.keys(this.reminderForm.controls).forEach(key => {\r\n      const control = this.reminderForm.get(key);\r\n      control?.markAsTouched();\r\n    });\r\n  }\r\n\r\n  translate(key: string): string {\r\n    return this.translationService.translate(key);\r\n  }\r\n\r\n  getFieldError(fieldName: string): string {\r\n    const field = this.reminderForm.get(fieldName);\r\n    if (field?.errors && field.touched) {\r\n      if (field.errors['required']) {\r\n        return this.translate('field_required');\r\n      }\r\n      if (field.errors['minlength']) {\r\n        return `${this.translate('min_length')} ${field.errors['minlength'].requiredLength}`;\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n}\r\n", "<div class=\"edit-reminder-modal\" *ngIf=\"isOpen()\" (click)=\"onCancel()\">\r\n  <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n    <div class=\"modal-header\">\r\n      <h3 class=\"modal-title\">{{ translate('reminders.edit_reminder') }}</h3>\r\n      <button class=\"close-btn\" (click)=\"onCancel()\">\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n    \r\n    <div class=\"modal-body\">\r\n      <form [formGroup]=\"reminderForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group\">\r\n          <label for=\"title\">{{ translate('reminders.reminder_title') }} *</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"title\"\r\n            formControlName=\"title\"\r\n            [placeholder]=\"translate('reminders.title_placeholder')\"\r\n            class=\"form-control\"\r\n            [class.error]=\"reminderForm.get('title')?.invalid && reminderForm.get('title')?.touched\"\r\n          />\r\n          <div class=\"error-message\" *ngIf=\"getFieldError('title')\">\r\n            {{ getFieldError('title') }}\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"description\">{{ translate('reminders.reminder_description') }}</label>\r\n          <textarea\r\n            id=\"description\"\r\n            formControlName=\"description\"\r\n            [placeholder]=\"translate('reminders.description_placeholder')\"\r\n            class=\"form-control\"\r\n            rows=\"3\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"eventTime\">{{ translate('reminders.event_time') }} *</label>\r\n          <input\r\n            type=\"datetime-local\"\r\n            id=\"eventTime\"\r\n            formControlName=\"eventTime\"\r\n            class=\"form-control\"\r\n            [class.error]=\"reminderForm.get('eventTime')?.invalid && reminderForm.get('eventTime')?.touched\"\r\n          />\r\n          <div class=\"error-message\" *ngIf=\"getFieldError('eventTime')\">\r\n            {{ getFieldError('eventTime') }}\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"reminderTime\">{{ translate('reminders.reminder_time') }} *</label>\r\n          <input\r\n            type=\"datetime-local\"\r\n            id=\"reminderTime\"\r\n            formControlName=\"reminderTime\"\r\n            class=\"form-control\"\r\n            [class.error]=\"reminderForm.get('reminderTime')?.invalid && reminderForm.get('reminderTime')?.touched\"\r\n          />\r\n          <div class=\"error-message\" *ngIf=\"getFieldError('reminderTime')\">\r\n            {{ getFieldError('reminderTime') }}\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"error-message\" *ngIf=\"error()\">\r\n          {{ error() }}\r\n        </div>\r\n\r\n        <div class=\"form-actions\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onCancel()\" [disabled]=\"loading()\">\r\n            {{ translate('reminders.cancel') }}\r\n          </button>\r\n          <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"loading() || reminderForm.invalid\">\r\n            <span *ngIf=\"loading()\" class=\"spinner\"></span>\r\n            {{ translate('reminders.update') }}\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { Component, EventEmitter, Input, Output, signal, OnInit, OnChanges, SimpleChanges, AfterViewInit } from '@angular/core';\r\nimport { ReminderService } from '../../../services/reminder.service';\r\nimport { TranslationService } from '../../../services/translation.service';\r\nimport { LangService } from '../../../services/lang.service';\r\nimport { Reminder } from '../../../models/reminder.model';\r\n\r\n@Component({\r\n  selector: 'app-all-reminders-modal',\r\n  standalone: false,\r\n  templateUrl: './all-reminders-modal.component.html',\r\n  styleUrls: ['./all-reminders-modal.component.css']\r\n})\r\nexport class AllRemindersModalComponent implements OnInit, OnChanges, AfterViewInit {\r\n  @Input() isOpen = signal(false);\r\n  @Output() closeModal = new EventEmitter<void>();\r\n  @Output() reminderUpdated = new EventEmitter<void>();\r\n\r\n  reminders = signal<Reminder[]>([]);\r\n  loading = signal(false);\r\n  error = signal<string | null>(null);\r\n  selectedReminder = signal<Reminder | null>(null);\r\n  showEditModal = signal(false);\r\n  showDeleteConfirm = signal(false);\r\n  reminderToDelete = signal<Reminder | null>(null);\r\n\r\n  constructor(\r\n    private reminderService: ReminderService,\r\n    private translationService: TranslationService,\r\n    private langService: LangService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Load reminders when component initializes\r\n    this.loadReminders();\r\n  }\r\n\r\n  get isRTL(): boolean {\r\n    return this.langService.isRTL();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['isOpen'] && this.isOpen()) {\r\n      this.loadReminders();\r\n    }\r\n  }\r\n\r\n  // Also load reminders when the modal becomes visible\r\n  ngAfterViewInit(): void {\r\n    if (this.isOpen()) {\r\n      this.loadReminders();\r\n    }\r\n  }\r\n\r\n  // Add a method to be called when modal opens\r\n  onModalOpen(): void {\r\n    this.loadReminders();\r\n  }\r\n\r\n  loadReminders(): void {\r\n    this.loading.set(true);\r\n    this.error.set(null);\r\n\r\n    this.reminderService.getMyReminders().subscribe({\r\n      next: (response) => {\r\n        this.loading.set(false);\r\n        if (response.success && response.data) {\r\n          const remindersArray = Array.isArray(response.data) ? response.data : [response.data];\r\n          this.reminders.set(remindersArray);\r\n        } else {\r\n          this.reminders.set([]);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        this.loading.set(false);\r\n        console.error('Error loading reminders:', error);\r\n        this.error.set(this.translate('reminders.load_error'));\r\n      }\r\n    });\r\n  }\r\n\r\n  onEditReminder(reminder: Reminder): void {\r\n    this.selectedReminder.set(reminder);\r\n    this.showEditModal.set(true);\r\n  }\r\n\r\n  onDeleteReminder(reminder: Reminder): void {\r\n    this.reminderToDelete.set(reminder);\r\n    this.showDeleteConfirm.set(true);\r\n  }\r\n\r\n  confirmDelete(): void {\r\n    const reminder = this.reminderToDelete();\r\n    if (reminder) {\r\n      this.loading.set(true);\r\n      this.reminderService.deleteReminder(reminder.id).subscribe({\r\n        next: (response) => {\r\n          this.loading.set(false);\r\n          if (response.success) {\r\n            this.reminders.update(reminders => \r\n              reminders.filter(r => r.id !== reminder.id)\r\n            );\r\n            this.reminderUpdated.emit();\r\n            this.showDeleteConfirm.set(false);\r\n            this.reminderToDelete.set(null);\r\n          } else {\r\n            this.error.set(response.message || this.translate('reminders.delete_error'));\r\n          }\r\n        },\r\n        error: (error) => {\r\n          this.loading.set(false);\r\n          console.error('Error deleting reminder:', error);\r\n          this.error.set(this.translate('reminders.delete_error'));\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  cancelDelete(): void {\r\n    this.showDeleteConfirm.set(false);\r\n    this.reminderToDelete.set(null);\r\n  }\r\n\r\n  onReminderUpdated(): void {\r\n    this.loadReminders();\r\n    this.reminderUpdated.emit();\r\n    this.showEditModal.set(false);\r\n    this.selectedReminder.set(null);\r\n  }\r\n\r\n  // Public method to refresh reminders\r\n  refreshReminders(): void {\r\n    this.loadReminders();\r\n  }\r\n\r\n  onEditModalClose(): void {\r\n    this.showEditModal.set(false);\r\n    this.selectedReminder.set(null);\r\n  }\r\n\r\n  onClose(): void {\r\n    this.closeModal.emit();\r\n  }\r\n\r\n  formatDateTime(dateString: string): string {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString();\r\n  }\r\n\r\n  translate(key: string): string {\r\n    return this.translationService.translate(key);\r\n  }\r\n}\r\n", "<div class=\"all-reminders-modal\" *ngIf=\"isOpen()\" (click)=\"onClose()\">\r\n  <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n    <div class=\"modal-header\">\r\n      <h3 class=\"modal-title\">{{ translate('reminders.all_reminders') }}</h3>\r\n      <button class=\"close-btn\" (click)=\"onClose()\">\r\n        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n    \r\n    <div class=\"modal-body\">\r\n      <!-- Loading State -->\r\n      <div class=\"loading-state\" *ngIf=\"loading()\">\r\n        <div class=\"spinner\"></div>\r\n        <p>{{ translate('loading') }}</p>\r\n      </div>\r\n\r\n      <!-- Error State -->\r\n      <div class=\"error-state\" *ngIf=\"error() && !loading()\">\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n          <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\r\n          <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\r\n        </svg>\r\n        <p>{{ error() }}</p>\r\n        <button class=\"retry-btn\" (click)=\"loadReminders()\">\r\n          {{ translate('retry') }}\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Reminders List -->\r\n      <div class=\"reminders-list\" *ngIf=\"!loading() && !error()\">\r\n        <div class=\"reminder-item\" *ngFor=\"let reminder of reminders()\">\r\n          <div class=\"reminder-content\">\r\n            <h4 class=\"reminder-title\">{{ reminder.title }}</h4>\r\n            <p class=\"reminder-description\" *ngIf=\"reminder.description\">{{ reminder.description }}</p>\r\n            <div class=\"reminder-dates\">\r\n              <div class=\"date-item\">\r\n                <span class=\"date-label\">{{ translate('reminders.event_time') }}:</span>\r\n                <span class=\"date-value\">{{ formatDateTime(reminder.eventTime) }}</span>\r\n              </div>\r\n              <div class=\"date-item\">\r\n                <span class=\"date-label\">{{ translate('reminders.reminder_time') }}:</span>\r\n                <span class=\"date-value\">{{ formatDateTime(reminder.reminderTime) }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"reminder-actions\">\r\n            <button class=\"action-btn edit-btn\" (click)=\"onEditReminder(reminder)\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\r\n                <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\r\n              </svg>\r\n              {{ translate('reminders.edit') }}\r\n            </button>\r\n            <button class=\"action-btn delete-btn\" (click)=\"onDeleteReminder(reminder)\">\r\n              <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <polyline points=\"3,6 5,6 21,6\"></polyline>\r\n                <path d=\"M19,6v14a2,2 0 0,1 -2,2H7a2,2 0 0,1 -2,-2V6m3,0V4a2,2 0 0,1 2,-2h4a2,2 0 0,1 2,2v2\"></path>\r\n                <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\r\n                <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\r\n              </svg>\r\n              {{ translate('reminders.delete') }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Empty State -->\r\n        <div class=\"empty-state\" *ngIf=\"reminders().length === 0\">\r\n          <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\">\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n            <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\r\n            <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n          </svg>\r\n          <h4>{{ translate('reminders.no_reminders') }}</h4>\r\n          <p>{{ translate('reminders.no_reminders_description') }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Edit Reminder Modal -->\r\n  <app-edit-reminder-modal\r\n    [isOpen]=\"showEditModal\"\r\n    [reminder]=\"selectedReminder()\"\r\n    (reminderUpdated)=\"onReminderUpdated()\"\r\n    (closeModal)=\"onEditModalClose()\"\r\n  ></app-edit-reminder-modal>\r\n\r\n  <!-- Delete Confirmation Modal -->\r\n  <div class=\"delete-confirm-modal\" *ngIf=\"showDeleteConfirm()\" (click)=\"cancelDelete()\">\r\n    <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n      <div class=\"modal-header\">\r\n        <h3>{{ translate('reminders.confirm_delete') }}</h3>\r\n        <button class=\"close-btn\" (click)=\"cancelDelete()\">\r\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <p>{{ translate('reminders.confirm_delete') }}</p>\r\n        <div class=\"modal-actions\">\r\n          <button class=\"btn btn-secondary\" (click)=\"cancelDelete()\" [disabled]=\"loading()\">\r\n            {{ translate('reminders.cancel') }}\r\n          </button>\r\n          <button class=\"btn btn-danger\" (click)=\"confirmDelete()\" [disabled]=\"loading()\">\r\n            <span *ngIf=\"loading()\" class=\"spinner\"></span>\r\n            {{ translate('reminders.delete') }}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { Component, OnInit, OnDestroy, signal, ViewChild } from '@angular/core';\r\nimport { CalendarService } from '../../services/calendar.service';\r\nimport {\r\n  CalendarStatsService,\r\n  CalendarStats,\r\n  CalendarPeriod,\r\n} from '../../services/calendar-stats.service';\r\nimport { TranslationService } from '../../services/translation.service';\r\nimport { LangService } from '../../services/lang.service';\r\nimport { ReminderService } from '../../services/reminder.service';\r\nimport {\r\n  CalendarEvent,\r\n  EventType,\r\n  EventStatus,\r\n  CalendarFilters,\r\n} from '../../models/calendar.model';\r\nimport { Reminder } from '../../models/reminder.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { AllRemindersModalComponent } from './all-reminders-modal/all-reminders-modal.component';\r\n\r\n@Component({\r\n  selector: 'app-calendar',\r\n  standalone: false,\r\n  templateUrl: './calendar.component.html',\r\n  styleUrls: ['./calendar.component.css'],\r\n})\r\nexport class CalendarComponent implements OnInit, OnDestroy {\r\n  // Signals for reactive state management\r\n  userEvents = signal<CalendarEvent[]>([]);\r\n  systemEvents = signal<CalendarEvent[]>([]);\r\n  filteredEvents = signal<CalendarEvent[]>([]);\r\n  currentDate = signal<Date>(new Date());\r\n  selectedDate = signal<Date | null>(null);\r\n  loading = signal<boolean>(false);\r\n  error = signal<string | null>(null);\r\n  isRTL = signal<boolean>(false);\r\n\r\n  // Filter state\r\n  filters = signal<CalendarFilters>({});\r\n\r\n  // Calendar view state\r\n  viewMode = signal<'month' | 'week' | 'day'>('month');\r\n  showAllUserEventsModal = signal<boolean>(false);\r\n\r\n  // Calendar data\r\n  calendarDays: Date[] = [];\r\n  weekDays: string[] = [];\r\n  monthNames: string[] = [];\r\n\r\n  // Reminder management\r\n  reminders = signal<Reminder[]>([]);\r\n  showAddReminderModal = signal<boolean>(false);\r\n  showAllRemindersModal = signal<boolean>(false);\r\n  showDayRemindersModal = signal<boolean>(false);\r\n  selectedDayReminders = signal<Reminder[]>([]);\r\n  selectedDayDate = signal<Date | null>(null);\r\n\r\n  // Calendar stats\r\n  calendarStats = signal<CalendarStats | null>(null);\r\n  statsLoading = signal<boolean>(false);\r\n\r\n  @ViewChild('allRemindersModal')\r\n  allRemindersModal!: AllRemindersModalComponent;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private calendarService: CalendarService,\r\n    private calendarStatsService: CalendarStatsService,\r\n    private translationService: TranslationService,\r\n    private langService: LangService,\r\n    private reminderService: ReminderService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initializeCalendar();\r\n    this.loadEvents();\r\n    this.loadReminders();\r\n    this.loadCalendarStats();\r\n    this.setupLanguageSubscription();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\r\n  }\r\n\r\n  private initializeCalendar(): void {\r\n    this.generateCalendarDays();\r\n    this.setupWeekDays();\r\n    this.setupMonthNames();\r\n  }\r\n\r\n  private setupLanguageSubscription(): void {\r\n    const langSub = this.langService.currentLang$.subscribe(\r\n      (lang: 'ar' | 'en') => {\r\n        this.isRTL.set(lang === 'ar');\r\n        this.setupWeekDays();\r\n        this.setupMonthNames();\r\n      }\r\n    );\r\n    this.subscriptions.push(langSub);\r\n  }\r\n\r\n  private setupWeekDays(): void {\r\n    if (this.isRTL()) {\r\n      this.weekDays = [\r\n        'الأحد',\r\n        'الاثنين',\r\n        'الثلاثاء',\r\n        'الأربعاء',\r\n        'الخميس',\r\n        'الجمعة',\r\n        'السبت',\r\n      ];\r\n    } else {\r\n      this.weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    }\r\n  }\r\n\r\n  private setupMonthNames(): void {\r\n    if (this.isRTL()) {\r\n      this.monthNames = [\r\n        'يناير',\r\n        'فبراير',\r\n        'مارس',\r\n        'أبريل',\r\n        'مايو',\r\n        'يونيو',\r\n        'يوليو',\r\n        'أغسطس',\r\n        'سبتمبر',\r\n        'أكتوبر',\r\n        'نوفمبر',\r\n        'ديسمبر',\r\n      ];\r\n    } else {\r\n      this.monthNames = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n      ];\r\n    }\r\n  }\r\n\r\n  private generateCalendarDays(): void {\r\n    const current = this.currentDate();\r\n    const year = current.getFullYear();\r\n    const month = current.getMonth();\r\n    const day = current.getDate();\r\n\r\n    this.calendarDays = [];\r\n\r\n    if (this.viewMode() === 'month') {\r\n      // Get first day of month and calculate starting point\r\n      const firstDay = new Date(year, month, 1);\r\n      const lastDay = new Date(year, month + 1, 0);\r\n      const startDate = new Date(firstDay);\r\n\r\n      // Adjust start date to beginning of week\r\n      const dayOfWeek = firstDay.getDay();\r\n      startDate.setDate(startDate.getDate() - dayOfWeek);\r\n\r\n      const endDate = new Date(lastDay);\r\n      endDate.setDate(endDate.getDate() + (6 - lastDay.getDay()));\r\n\r\n      for (\r\n        let d = new Date(startDate);\r\n        d <= endDate;\r\n        d.setDate(d.getDate() + 1)\r\n      ) {\r\n        this.calendarDays.push(new Date(d));\r\n      }\r\n    } else if (this.viewMode() === 'week') {\r\n      // Get start of week (Sunday)\r\n      const startOfWeek = new Date(current);\r\n      const dayOfWeek = current.getDay();\r\n      startOfWeek.setDate(current.getDate() - dayOfWeek);\r\n\r\n      // Generate 7 days for the week\r\n      for (let i = 0; i < 7; i++) {\r\n        const day = new Date(startOfWeek);\r\n        day.setDate(startOfWeek.getDate() + i);\r\n        this.calendarDays.push(day);\r\n      }\r\n    } else if (this.viewMode() === 'day') {\r\n      // Show only the selected day\r\n      this.calendarDays.push(new Date(current));\r\n    }\r\n  }\r\n\r\n  loadEvents(): void {\r\n    this.loading.set(true);\r\n    this.error.set(null);\r\n\r\n    // Load only user events for My Calendar\r\n    const userEventsSub = this.calendarService.getUserEvents().subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          // Assign colors based on event type\r\n          const eventsWithColors = response.data.map((event) => ({\r\n            ...event,\r\n            color: this.getEventTypeColor(event.type),\r\n          }));\r\n          this.userEvents.set(eventsWithColors);\r\n          this.systemEvents.set([]);\r\n          this.updateFilteredEvents();\r\n        }\r\n        this.loading.set(false);\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading user events:', error);\r\n        this.error.set('Failed to load user events');\r\n        this.loading.set(false);\r\n      },\r\n    });\r\n    this.subscriptions.push(userEventsSub);\r\n  }\r\n\r\n  private updateFilteredEvents(): void {\r\n    let filtered = this.userEvents();\r\n\r\n    // Apply type filter\r\n    if (this.filters().type !== undefined) {\r\n      filtered = filtered.filter((event) => event.type === this.filters().type);\r\n    }\r\n\r\n    // Apply status filter\r\n    if (this.filters().status !== undefined) {\r\n      filtered = filtered.filter(\r\n        (event) => event.status === this.filters().status\r\n      );\r\n    }\r\n\r\n    this.filteredEvents.set(filtered);\r\n  }\r\n\r\n  // Navigation methods\r\n  previousMonth(): void {\r\n    const current = this.currentDate();\r\n    current.setMonth(current.getMonth() - 1);\r\n    this.currentDate.set(new Date(current));\r\n    this.generateCalendarDays();\r\n  }\r\n\r\n  nextMonth(): void {\r\n    const current = this.currentDate();\r\n    current.setMonth(current.getMonth() + 1);\r\n    this.currentDate.set(new Date(current));\r\n    this.generateCalendarDays();\r\n  }\r\n\r\n  goToToday(): void {\r\n    this.currentDate.set(new Date());\r\n    this.generateCalendarDays();\r\n  }\r\n\r\n  // Event handling\r\n  onDateClick(date: Date): void {\r\n    this.selectedDate.set(date);\r\n\r\n    // Check if this day has reminders\r\n    const dayReminders = this.getRemindersForDate(date);\r\n    if (dayReminders.length > 0) {\r\n      this.selectedDayReminders.set(dayReminders);\r\n      this.selectedDayDate.set(date);\r\n      this.showDayRemindersModal.set(true);\r\n    }\r\n  }\r\n\r\n  onFilterChange(filters: CalendarFilters): void {\r\n    this.filters.set(filters);\r\n    this.loadEvents();\r\n  }\r\n\r\n  onTypeFilterChange(value: string): void {\r\n    const newFilters = { ...this.filters() };\r\n    newFilters.type = value ? +value : undefined;\r\n    this.onFilterChange(newFilters);\r\n  }\r\n\r\n  onStatusFilterChange(value: string): void {\r\n    const newFilters = { ...this.filters() };\r\n    newFilters.status = value ? +value : undefined;\r\n    this.onFilterChange(newFilters);\r\n  }\r\n\r\n  retryLoadEvents(): void {\r\n    this.loadEvents();\r\n  }\r\n\r\n  onViewModeChange(mode: 'month' | 'week' | 'day'): void {\r\n    this.viewMode.set(mode);\r\n    // Regenerate calendar days based on view mode\r\n    this.generateCalendarDays();\r\n    // Load stats for the new period\r\n    this.loadCalendarStats();\r\n  }\r\n\r\n  viewAllUserEvents(event: Event): void {\r\n    console.log('View All button clicked');\r\n\r\n    // Prevent default behavior and stop propagation\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    // Open the modal to show all user events\r\n    this.showAllUserEventsModal.set(true);\r\n\r\n    console.log('All user events modal opened');\r\n  }\r\n\r\n  closeAllUserEventsModal(): void {\r\n    this.showAllUserEventsModal.set(false);\r\n  }\r\n\r\n  // Helper methods\r\n  private formatDateForComparison(date: Date): string {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    return `${year}-${month}-${day}`;\r\n  }\r\n\r\n  getEventsForDate(date: Date): CalendarEvent[] {\r\n    const dateStr = this.formatDateForComparison(date);\r\n    return this.filteredEvents().filter((event) => {\r\n      const eventDate = this.formatDateForComparison(new Date(event.startDate));\r\n      return eventDate === dateStr;\r\n    });\r\n  }\r\n\r\n  getUserEventsForDate(date: Date): CalendarEvent[] {\r\n    const dateStr = this.formatDateForComparison(date);\r\n    return this.userEvents().filter((event) => {\r\n      const eventDate = this.formatDateForComparison(new Date(event.startDate));\r\n      return eventDate === dateStr;\r\n    });\r\n  }\r\n\r\n  isToday(date: Date): boolean {\r\n    const today = new Date();\r\n    return date.toDateString() === today.toDateString();\r\n  }\r\n\r\n  isSelectedDate(date: Date): boolean {\r\n    const selected = this.selectedDate();\r\n    return selected ? date.toDateString() === selected.toDateString() : false;\r\n  }\r\n\r\n  isCurrentMonth(date: Date): boolean {\r\n    const current = this.currentDate();\r\n    return (\r\n      date.getMonth() === current.getMonth() &&\r\n      date.getFullYear() === current.getFullYear()\r\n    );\r\n  }\r\n\r\n  getDayName(date: Date): string {\r\n    if (this.isRTL()) {\r\n      const dayNames = [\r\n        'الأحد',\r\n        'الاثنين',\r\n        'الثلاثاء',\r\n        'الأربعاء',\r\n        'الخميس',\r\n        'الجمعة',\r\n        'السبت',\r\n      ];\r\n      return dayNames[date.getDay()];\r\n    } else {\r\n      const dayNames = [\r\n        'Sunday',\r\n        'Monday',\r\n        'Tuesday',\r\n        'Wednesday',\r\n        'Thursday',\r\n        'Friday',\r\n        'Saturday',\r\n      ];\r\n      return dayNames[date.getDay()];\r\n    }\r\n  }\r\n\r\n  getEventTypeLabel(type: EventType): string {\r\n    const key = this.calendarService.getEventTypeLabel(type);\r\n    return this.translate(key);\r\n  }\r\n\r\n  getEventStatusLabel(status: EventStatus): string {\r\n    const key = this.calendarService.getEventStatusLabel(status);\r\n    return this.translate(key);\r\n  }\r\n\r\n  getEventStatusColor(status: EventStatus): string {\r\n    return this.calendarService.getEventStatusColor(status);\r\n  }\r\n\r\n  getPriorityColor(priority: number): string {\r\n    return this.calendarService.getPriorityColor(priority);\r\n  }\r\n\r\n  getEventTypeColor(type: EventType): string {\r\n    return this.calendarService.getEventTypeColor(type);\r\n  }\r\n\r\n  translate(key: string): string {\r\n    return this.translationService.translate(key);\r\n  }\r\n\r\n  // Enum getters for template\r\n  get EventType() {\r\n    return EventType;\r\n  }\r\n\r\n  get EventStatus() {\r\n    return EventStatus;\r\n  }\r\n\r\n  // Reminder management methods\r\n  loadReminders(): void {\r\n    this.reminderService.getMyReminders().subscribe({\r\n      next: (response) => {\r\n        if (response.success && response.data) {\r\n          const remindersArray = Array.isArray(response.data)\r\n            ? response.data\r\n            : [response.data];\r\n          this.reminders.set(remindersArray);\r\n        } else {\r\n          this.reminders.set([]);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading reminders:', error);\r\n        this.reminders.set([]);\r\n      },\r\n    });\r\n  }\r\n\r\n  openAddReminderModal(): void {\r\n    this.showAddReminderModal.set(true);\r\n  }\r\n\r\n  closeAddReminderModal(): void {\r\n    this.showAddReminderModal.set(false);\r\n  }\r\n\r\n  onReminderCreated(): void {\r\n    this.loadReminders();\r\n  }\r\n\r\n  openAllRemindersModal(): void {\r\n    this.showAllRemindersModal.set(true);\r\n    // Force reload reminders when opening the modal\r\n    this.loadReminders();\r\n\r\n    // Also refresh the modal's reminders after a short delay to ensure the modal is rendered\r\n    setTimeout(() => {\r\n      if (this.allRemindersModal) {\r\n        this.allRemindersModal.refreshReminders();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  closeAllRemindersModal(): void {\r\n    this.showAllRemindersModal.set(false);\r\n  }\r\n\r\n  onReminderUpdated(): void {\r\n    this.loadReminders();\r\n  }\r\n\r\n  getRemindersForDate(date: Date): Reminder[] {\r\n    const dateStr = this.formatDateForComparison(date);\r\n    return this.reminders().filter((reminder) => {\r\n      const reminderDate = this.formatDateForComparison(\r\n        new Date(reminder.reminderTime)\r\n      );\r\n      return reminderDate === dateStr;\r\n    });\r\n  }\r\n\r\n  hasRemindersForDate(date: Date): boolean {\r\n    return this.getRemindersForDate(date).length > 0;\r\n  }\r\n\r\n  getReminderColor(reminder: Reminder, index: number): string {\r\n    // Use a single color for all reminders\r\n    return '#FF3B3B'; // Red color\r\n  }\r\n\r\n  // Day reminders modal methods\r\n  closeDayRemindersModal(): void {\r\n    this.showDayRemindersModal.set(false);\r\n    this.selectedDayReminders.set([]);\r\n    this.selectedDayDate.set(null);\r\n  }\r\n\r\n  formatDateTime(dateString: string): string {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleString();\r\n  }\r\n\r\n  onDayReminderUpdated(): void {\r\n    this.loadReminders();\r\n    // Refresh the day reminders if modal is still open\r\n    if (this.selectedDayDate()) {\r\n      const dayReminders = this.getRemindersForDate(this.selectedDayDate()!);\r\n      this.selectedDayReminders.set(dayReminders);\r\n    }\r\n  }\r\n\r\n  // Calendar stats methods\r\n  loadCalendarStats(): void {\r\n    this.statsLoading.set(true);\r\n\r\n    let period: CalendarPeriod;\r\n    switch (this.viewMode()) {\r\n      case 'day':\r\n        period = CalendarPeriod.Day;\r\n        break;\r\n      case 'week':\r\n        period = CalendarPeriod.Week;\r\n        break;\r\n      case 'month':\r\n        period = CalendarPeriod.Month;\r\n        break;\r\n      default:\r\n        period = CalendarPeriod.Month;\r\n    }\r\n\r\n    const statsSub = this.calendarStatsService\r\n      .getUserCalendarStats(period)\r\n      .subscribe({\r\n        next: (response) => {\r\n          console.log('Calendar stats response:', response);\r\n          if (response.success) {\r\n            this.calendarStats.set(response.data);\r\n            console.log('Calendar stats set:', response.data);\r\n          }\r\n          this.statsLoading.set(false);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading calendar stats:', error);\r\n          this.statsLoading.set(false);\r\n        },\r\n      });\r\n    this.subscriptions.push(statsSub);\r\n  }\r\n\r\n  getStatsPeriodName(): string {\r\n    const stats = this.calendarStats();\r\n    return stats ? stats.periodName : '';\r\n  }\r\n\r\n  getTotalEventsCount(): number {\r\n    const stats = this.calendarStats();\r\n    return stats ? stats.totalEventsCount : 0;\r\n  }\r\n\r\n  getMeetingsCount(): number {\r\n    const stats = this.calendarStats();\r\n    return stats ? stats.meetingsCount : 0;\r\n  }\r\n\r\n  getTasksCount(): number {\r\n    const stats = this.calendarStats();\r\n    return stats ? stats.tasksCount : 0;\r\n  }\r\n\r\n  getVisitsCount(): number {\r\n    const stats = this.calendarStats();\r\n    return stats ? stats.visitsCount : 0;\r\n  }\r\n\r\n  getTravelsCount(): number {\r\n    const stats = this.calendarStats();\r\n    return stats ? stats.travelsCount : 0;\r\n  }\r\n\r\n  // Enum getter for template\r\n  get CalendarPeriod() {\r\n    return CalendarPeriod;\r\n  }\r\n\r\n  // Helper method to get today's date for template\r\n  getToday(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  isLargeScreen(): boolean {\r\n    return window.innerWidth > 991;\r\n  }\r\n\r\n  getAdditionalEventsColor(day: Date): string {\r\n    const userEvents = this.getUserEventsForDate(day);\r\n    const reminders = this.getRemindersForDate(day);\r\n\r\n    // If there are more than 3 events total, determine the color based on what's visible\r\n    const visibleUserEvents = userEvents.slice(0, 3);\r\n    const visibleReminders = reminders.slice(0, 3);\r\n\r\n    // If there are visible reminders, use red (reminder color)\r\n    if (visibleReminders.length > 0) {\r\n      return '#f44336'; // Red color for reminders\r\n    }\r\n\r\n    // If there are visible user events, use blue (event color)\r\n    if (visibleUserEvents.length > 0) {\r\n      return '#2196f3'; // Blue color for events\r\n    }\r\n\r\n    // Default fallback\r\n    return '#6c757d';\r\n  }\r\n}\r\n", "<div class=\"modern-calendar-container rounded-4\" [class.rtl]=\"isRTL()\">\r\n  <!-- Header Section -->\r\n  <div class=\"calendar-header\">\r\n    <div class=\"header-left\">\r\n      <h1 class=\"page-title\">{{ translate(\"calendar.my_calendar\") }}</h1>\r\n      <p class=\"page-subtitle\">{{ translate(\"calendar.subtitle\") }}</p>\r\n    </div>\r\n\r\n    <div class=\"header-actions\">\r\n      <!-- Reminder Actions -->\r\n      <div class=\"reminder-actions\">\r\n        <button class=\"btn btn-primary\" (click)=\"openAddReminderModal()\">\r\n          <svg\r\n            width=\"16\"\r\n            height=\"16\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n            <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"></line>\r\n            <line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\r\n          </svg>\r\n          {{ translate(\"reminders.add_reminder\") }}\r\n        </button>\r\n        <button class=\"btn btn-secondary\" (click)=\"openAllRemindersModal()\">\r\n          <svg\r\n            width=\"16\"\r\n            height=\"16\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n            <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\r\n            <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n          </svg>\r\n          {{ translate(\"reminders.all_reminders\") }}\r\n        </button>\r\n      </div>\r\n\r\n      <!-- View Mode Toggle -->\r\n      <div class=\"view-mode-toggle\">\r\n        <button\r\n          class=\"view-btn\"\r\n          [class.active]=\"viewMode() === 'month'\"\r\n          (click)=\"onViewModeChange('month')\"\r\n        >\r\n          {{ translate(\"calendar.month\") }}\r\n        </button>\r\n        <button\r\n          class=\"view-btn\"\r\n          [class.active]=\"viewMode() === 'week'\"\r\n          (click)=\"onViewModeChange('week')\"\r\n        >\r\n          {{ translate(\"calendar.week\") }}\r\n        </button>\r\n        <button\r\n          class=\"view-btn\"\r\n          [class.active]=\"viewMode() === 'day'\"\r\n          (click)=\"onViewModeChange('day')\"\r\n        >\r\n          {{ translate(\"calendar.day\") }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Main Content Layout -->\r\n  <div class=\"main-content\">\r\n    <!-- Left Side - Main Calendar -->\r\n    <div class=\"main-calendar-section\">\r\n      <!-- Calendar Navigation -->\r\n      <div class=\"calendar-navigation ltr\">\r\n        <button class=\"nav-btn\" (click)=\"previousMonth()\">\r\n          <svg\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <polyline points=\"15,18 9,12 15,6\"></polyline>\r\n          </svg>\r\n        </button>\r\n\r\n        <div class=\"current-month\">\r\n          <h2>\r\n            {{ monthNames[currentDate().getMonth()] }}\r\n            {{ currentDate().getFullYear() }}\r\n          </h2>\r\n        </div>\r\n\r\n        <button class=\"nav-btn\" (click)=\"nextMonth()\">\r\n          <svg\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <polyline points=\"9,18 15,12 9,6\"></polyline>\r\n          </svg>\r\n        </button>\r\n\r\n        <button class=\"today-btn\" (click)=\"goToToday()\">\r\n          {{ translate(\"calendar.today\") }}\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Main Calendar Grid -->\r\n      <div class=\"calendar-grid\" [class.day-view]=\"viewMode() === 'day'\">\r\n        <!-- Week Days Header - Hidden in day view -->\r\n        <div class=\"week-days\" *ngIf=\"viewMode() !== 'day'\">\r\n          <div class=\"week-day\" *ngFor=\"let day of weekDays\">\r\n            {{ day }}\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Calendar Days -->\r\n        <div class=\"calendar-days\" [class.day-view-days]=\"viewMode() === 'day'\">\r\n          <div\r\n            class=\"calendar-day\"\r\n            [class.day-view-day]=\"viewMode() === 'day'\"\r\n            *ngFor=\"let day of calendarDays\"\r\n            [class.today]=\"isToday(day)\"\r\n            [class.selected]=\"isSelectedDate(day)\"\r\n            [class.other-month]=\"!isCurrentMonth(day)\"\r\n            (click)=\"onDateClick(day)\"\r\n          >\r\n            <!-- Day Header -->\r\n            <div class=\"day-header\">\r\n              <div\r\n                class=\"day-number\"\r\n                [class.has-events]=\"getUserEventsForDate(day).length > 0\"\r\n                [class.has-reminders]=\"getRemindersForDate(day).length > 0\"\r\n              >\r\n                {{ day.getDate() }}\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Day View Content -->\r\n            <div *ngIf=\"viewMode() === 'day'\" class=\"day-view-content\">\r\n              <div class=\"day-header-info\">\r\n                <h3 class=\"day-name\">{{ getDayName(day) }}</h3>\r\n                <p class=\"day-date\">{{ day | date : \"fullDate\" }}</p>\r\n              </div>\r\n\r\n              <!-- Events Section -->\r\n              <div\r\n                class=\"day-events-section\"\r\n                *ngIf=\"getUserEventsForDate(day).length > 0\"\r\n              >\r\n                <h4 class=\"section-title\">\r\n                  <svg\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-width=\"2\"\r\n                  >\r\n                    <rect\r\n                      x=\"3\"\r\n                      y=\"4\"\r\n                      width=\"18\"\r\n                      height=\"18\"\r\n                      rx=\"2\"\r\n                      ry=\"2\"\r\n                    ></rect>\r\n                    <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n                    <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n                    <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n                  </svg>\r\n                  {{ translate(\"calendar.events\") }}\r\n                </h4>\r\n                <div class=\"events-list\">\r\n                  <div\r\n                    class=\"event-item\"\r\n                    *ngFor=\"let event of getUserEventsForDate(day)\"\r\n                  >\r\n                    <div\r\n                      class=\"event-dot\"\r\n                      [style.background-color]=\"event.color\"\r\n                    ></div>\r\n                    <div class=\"event-details\">\r\n                      <div class=\"event-title\">{{ event.title }}</div>\r\n                      <div class=\"event-time\">\r\n                        {{ event.startDate | date : \"shortTime\" }} -\r\n                        {{ event.endDate | date : \"shortTime\" }}\r\n                      </div>\r\n                      <div class=\"event-type\">\r\n                        {{ getEventTypeLabel(event.type) }}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Reminders Section -->\r\n              <div\r\n                class=\"day-reminders-section\"\r\n                *ngIf=\"getRemindersForDate(day).length > 0\"\r\n              >\r\n                <h4 class=\"section-title\">\r\n                  <svg\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-width=\"2\"\r\n                  >\r\n                    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n                    <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\r\n                    <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n                  </svg>\r\n                  {{ translate(\"reminders.all_reminders\") }}\r\n                </h4>\r\n                <div class=\"reminders-list\">\r\n                  <div\r\n                    class=\"reminder-item\"\r\n                    *ngFor=\"let reminder of getRemindersForDate(day)\"\r\n                  >\r\n                    <div\r\n                      class=\"reminder-dot\"\r\n                      [style.background-color]=\"getReminderColor(reminder, 0)\"\r\n                    ></div>\r\n                    <div class=\"reminder-details\">\r\n                      <div class=\"reminder-title\">{{ reminder.title }}</div>\r\n                      <div class=\"reminder-time\">\r\n                        {{ reminder.reminderTime | date : \"shortTime\" }}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- No events message -->\r\n              <div\r\n                class=\"no-events\"\r\n                *ngIf=\"\r\n                  getUserEventsForDate(day).length === 0 &&\r\n                  getRemindersForDate(day).length === 0\r\n                \"\r\n              >\r\n                <svg\r\n                  width=\"48\"\r\n                  height=\"48\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  stroke-width=\"1\"\r\n                >\r\n                  <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n                  <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n                  <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n                  <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n                </svg>\r\n                <p>{{ translate(\"calendar.no_events_today\") }}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Month/Week View - Event Titles -->\r\n            <div class=\"day-event-titles\" *ngIf=\"viewMode() !== 'day'\">\r\n              <!-- User Events -->\r\n              <div\r\n                class=\"event-title user-event-title\"\r\n                *ngFor=\"let event of getUserEventsForDate(day) | slice : 0 : 3\"\r\n                [title]=\"event.title\"\r\n              >\r\n                {{ event.title }}\r\n              </div>\r\n\r\n              <!-- Reminders -->\r\n              <div\r\n                class=\"event-title reminder-event-title\"\r\n                *ngFor=\"\r\n                  let reminder of getRemindersForDate(day) | slice : 0 : 2\r\n                \"\r\n                [title]=\"reminder.title\"\r\n              >\r\n                {{ reminder.title }}\r\n              </div>\r\n\r\n              <!-- More events indicator -->\r\n              <div\r\n                class=\"more-events-indicator\"\r\n                *ngIf=\"\r\n                  getUserEventsForDate(day).length +\r\n                    getRemindersForDate(day).length >\r\n                  5\r\n                \"\r\n              >\r\n                +{{\r\n                  getUserEventsForDate(day).length +\r\n                    getRemindersForDate(day).length -\r\n                    5\r\n                }}\r\n                {{ translate(\"calendar.more\") }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Right Side - Mini Calendar & Events List -->\r\n    <div class=\"sidebar-section\">\r\n      <!-- Mini Calendar -->\r\n      <div class=\"mini-calendar-widget\">\r\n        <div class=\"widget-header\">\r\n          <h3>\r\n            <svg\r\n              width=\"20\"\r\n              height=\"20\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"2\"\r\n              style=\"margin-right: 8px\"\r\n            >\r\n              <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n              <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n              <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n            </svg>\r\n            <span class=\"px-2\">{{ translate(\"calendar.mini_calendar\") }}</span>\r\n          </h3>\r\n        </div>\r\n        <div class=\"mini-calendar\">\r\n          <div class=\"mini-week-days\">\r\n            <div class=\"mini-week-day\" *ngFor=\"let day of weekDays\">\r\n              {{ day.charAt(0) }}\r\n            </div>\r\n          </div>\r\n          <div class=\"mini-calendar-days\">\r\n            <div\r\n              class=\"mini-calendar-day\"\r\n              *ngFor=\"let day of calendarDays | slice : 0 : 35\"\r\n              [class.today]=\"isToday(day)\"\r\n              [class.has-events]=\"\r\n                getUserEventsForDate(day).length > 0 ||\r\n                getRemindersForDate(day).length > 0\r\n              \"\r\n              [class.other-month]=\"!isCurrentMonth(day)\"\r\n              (click)=\"onDateClick(day)\"\r\n            >\r\n              {{ day.getDate() }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Today's Events -->\r\n      <div class=\"todays-events-widget\">\r\n        <div class=\"widget-header\">\r\n          <h3>\r\n            <svg\r\n              width=\"20\"\r\n              height=\"20\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"2\"\r\n              style=\"margin-right: 8px\"\r\n            >\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n              <polyline points=\"12,6 12,12 16,14\"></polyline>\r\n            </svg>\r\n            <span class=\"px-2\">{{ translate(\"calendar.todays_events\") }}</span>\r\n          </h3>\r\n          <span class=\"event-count\">{{\r\n            getUserEventsForDate(getToday()).length +\r\n              getRemindersForDate(getToday()).length\r\n          }}</span>\r\n        </div>\r\n        <div class=\"todays-events-list\">\r\n          <!-- Today's User Events -->\r\n          <div\r\n            class=\"event-item\"\r\n            *ngFor=\"let event of getUserEventsForDate(getToday())\"\r\n          >\r\n            <div class=\"event-time\">\r\n              {{ event.startDate | date : \"shortTime\" }}\r\n            </div>\r\n            <div class=\"event-dot\" [style.background-color]=\"event.color\"></div>\r\n            <div class=\"event-info\">\r\n              <div class=\"event-title\">{{ event.title }}</div>\r\n              <div class=\"event-type\">{{ getEventTypeLabel(event.type) }}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Today's Reminders -->\r\n          <div\r\n            class=\"event-item reminder-item\"\r\n            *ngFor=\"let reminder of getRemindersForDate(getToday())\"\r\n          >\r\n          <div class=\"event-info\">\r\n            <div class=\"event-title-mini \">{{ reminder.title | slice:0:20 }} {{ reminder.title.length > 20 ? '...' : '' }}</div>\r\n            <div class=\"event-time\">\r\n              {{ reminder.reminderTime | date : \"shortTime\" }}\r\n            </div>\r\n            <div class=\"event-type\">\r\n              {{ translate(\"reminders.reminder\") }}\r\n            </div>\r\n          </div>\r\n            <div\r\n              class=\"event-dot reminder-dot\"\r\n              [style.background-color]=\"getReminderColor(reminder, 0)\"\r\n            >\r\n            </div>\r\n            \r\n          </div>\r\n\r\n          <!-- No events message -->\r\n          <div\r\n            class=\"no-events\"\r\n            *ngIf=\"\r\n              getUserEventsForDate(getToday()).length === 0 &&\r\n              getRemindersForDate(getToday()).length === 0\r\n            \"\r\n          >\r\n            <svg\r\n              width=\"32\"\r\n              height=\"32\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1\"\r\n            >\r\n              <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n              <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n              <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n            </svg>\r\n            <p>{{ translate(\"calendar.no_events_today\") }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Calendar Stats -->\r\n      <div class=\"calendar-stats-widget\">\r\n        <div class=\"stats-header\">\r\n          <h3>\r\n            <svg\r\n              width=\"20\"\r\n              height=\"20\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"2\"\r\n              style=\"margin-right: 8px\"\r\n            >\r\n              <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n              <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n              <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n              <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n            </svg>\r\n            <span class=\"px-2\" *ngIf=\"!statsLoading(); else loadingPeriod\">{{ translate(\"calendar.month\")\r\n            }}</span>\r\n            <ng-template #loadingPeriod\r\n              >{{ translate(\"calendar.loading\") }}...</ng-template\r\n            >\r\n          </h3>\r\n          <span class=\"total-events\" *ngIf=\"!statsLoading()\"\r\n            >{{ getTotalEventsCount() }}\r\n            {{ translate(\"calendar.total_events\") }}</span\r\n          >\r\n        </div>\r\n        <div class=\"stats-grid\" *ngIf=\"!statsLoading(); else loadingStats\">\r\n          <div class=\"stat-item meetings\">\r\n            <div class=\"stat-icon\">\r\n              <svg\r\n                width=\"18\"\r\n                height=\"18\"\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                stroke-width=\"2\"\r\n              >\r\n                <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n                <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n                <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n                <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n              </svg>\r\n            </div>\r\n            <div class=\"stat-info\">\r\n              <span class=\"stat-count\">{{ getMeetingsCount() }}</span>\r\n              <span class=\"stat-label\">{{\r\n                translate(\"calendar.meetings\")\r\n              }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"stat-item tasks\">\r\n            <div class=\"stat-icon\">\r\n              <svg\r\n                width=\"18\"\r\n                height=\"18\"\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                stroke-width=\"2\"\r\n              >\r\n                <path d=\"M9 11l3 3L22 4\"></path>\r\n                <path\r\n                  d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"\r\n                ></path>\r\n              </svg>\r\n            </div>\r\n            <div class=\"stat-info\">\r\n              <span class=\"stat-count\">{{ getTasksCount() }}</span>\r\n              <span class=\"stat-label\">{{ translate(\"calendar.tasks\") }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"stat-item visits\">\r\n            <div class=\"stat-icon\">\r\n              <svg\r\n                width=\"18\"\r\n                height=\"18\"\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                stroke-width=\"2\"\r\n              >\r\n                <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\r\n                <polyline points=\"9,22 9,12 15,12 15,22\"></polyline>\r\n              </svg>\r\n            </div>\r\n            <div class=\"stat-info\">\r\n              <span class=\"stat-count\">{{ getVisitsCount() }}</span>\r\n              <span class=\"stat-label\">{{ translate(\"calendar.visits\") }}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"stat-item travels\">\r\n            <div class=\"stat-icon\">\r\n              <svg\r\n                width=\"18\"\r\n                height=\"18\"\r\n                viewBox=\"0 0 24 24\"\r\n                fill=\"none\"\r\n                stroke=\"currentColor\"\r\n                stroke-width=\"2\"\r\n              >\r\n                <path d=\"M12 2L2 7l10 5 10-5-10-5z\"></path>\r\n                <path d=\"M2 17l10 5 10-5\"></path>\r\n                <path d=\"M2 12l10 5 10-5\"></path>\r\n              </svg>\r\n            </div>\r\n            <div class=\"stat-info\">\r\n              <span class=\"stat-count\">{{ getTravelsCount() }}</span>\r\n              <span class=\"stat-label\">{{\r\n                translate(\"calendar.travels\")\r\n              }}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Loading State -->\r\n        <ng-template #loadingStats>\r\n          <div class=\"stats-loading\">\r\n            <div class=\"loading-spinner\">\r\n              <div class=\"spinner\"></div>\r\n              <p>{{ translate(\"calendar.loading\") }}</p>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Event Details Modal -->\r\n  <div\r\n    class=\"event-details-modal\"\r\n    *ngIf=\"selectedDate()\"\r\n    (click)=\"selectedDate.set(null)\"\r\n  >\r\n    <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n      <div class=\"modal-header\">\r\n        <h3>{{ selectedDate() | date : \"fullDate\" }}</h3>\r\n        <button class=\"close-btn\" (click)=\"selectedDate.set(null)\">\r\n          <svg\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"events-list\">\r\n          <div\r\n            class=\"event-item\"\r\n            *ngFor=\"let event of getEventsForDate(selectedDate()!)\"\r\n          >\r\n            <div class=\"event-content\">\r\n              <h4 class=\"event-title\">{{ event.title }}</h4>\r\n              <p class=\"event-description\" *ngIf=\"event.description\">\r\n                {{ event.description }}\r\n              </p>\r\n              <div class=\"event-meta\">\r\n                <span class=\"event-time\">\r\n                  {{ event.startDate | date : \"short\" }} -\r\n                  {{ event.endDate | date : \"short\" }}\r\n                </span>\r\n                <span class=\"event-type\" [style.color]=\"event.color\">{{\r\n                  getEventTypeLabel(event.type)\r\n                }}</span>\r\n                <span\r\n                  class=\"event-status\"\r\n                  [style.color]=\"getEventStatusColor(event.status)\"\r\n                >\r\n                  {{ getEventStatusLabel(event.status) }}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            class=\"no-events\"\r\n            *ngIf=\"getEventsForDate(selectedDate()!).length === 0\"\r\n          >\r\n            <p>{{ translate(\"calendar.no_events_today\") }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- All User Events Modal -->\r\n  <div\r\n    class=\"all-user-events-modal\"\r\n    *ngIf=\"showAllUserEventsModal()\"\r\n    (click)=\"closeAllUserEventsModal()\"\r\n  >\r\n    <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n      <div class=\"modal-header\" [class.rtl]=\"isRTL()\">\r\n        <h3>{{ translate(\"calendar.all_my_events\") }}</h3>\r\n        <button class=\"close-btn\" (click)=\"closeAllUserEventsModal()\">\r\n          <svg\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"events-list\">\r\n          <div class=\"event-item\" *ngFor=\"let event of userEvents()\">\r\n            <div class=\"event-content\">\r\n              <h4 class=\"event-title\">{{ event.title }}</h4>\r\n              <p class=\"event-description\" *ngIf=\"event.description\">\r\n                {{ event.description }}\r\n              </p>\r\n              <div class=\"event-meta\">\r\n                <span class=\"event-time\">\r\n                  {{ event.startDate | date : \"short\" }} -\r\n                  {{ event.endDate | date : \"short\" }}\r\n                </span>\r\n                <span class=\"event-type\" [style.color]=\"event.color\">{{\r\n                  getEventTypeLabel(event.type)\r\n                }}</span>\r\n                <span\r\n                  class=\"event-status\"\r\n                  [style.color]=\"getEventStatusColor(event.status)\"\r\n                >\r\n                  {{ getEventStatusLabel(event.status) }}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"no-events\" *ngIf=\"userEvents().length === 0\">\r\n            <p>{{ translate(\"calendar.no_events_found\") }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Loading State -->\r\n  <div class=\"loading-overlay\" *ngIf=\"loading()\">\r\n    <div class=\"loading-spinner\">\r\n      <div class=\"spinner\"></div>\r\n      <p>{{ translate(\"calendar.loading\") }}</p>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Error State -->\r\n  <div class=\"error-message\" *ngIf=\"error()\">\r\n    <div class=\"error-content\">\r\n      <svg\r\n        width=\"24\"\r\n        height=\"24\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        stroke-width=\"2\"\r\n      >\r\n        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n        <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\r\n        <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\r\n      </svg>\r\n      <p>{{ error() }}</p>\r\n      <button class=\"retry-btn\" (click)=\"retryLoadEvents()\">\r\n        {{ translate(\"calendar.retry\") }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Modals -->\r\n  <app-add-reminder-modal\r\n    [isOpen]=\"showAddReminderModal\"\r\n    (reminderCreated)=\"onReminderCreated()\"\r\n    (closeModal)=\"closeAddReminderModal()\"\r\n  ></app-add-reminder-modal>\r\n\r\n  <app-all-reminders-modal\r\n    #allRemindersModal\r\n    [isOpen]=\"showAllRemindersModal\"\r\n    (reminderUpdated)=\"onReminderUpdated()\"\r\n    (closeModal)=\"closeAllRemindersModal()\"\r\n  ></app-all-reminders-modal>\r\n\r\n  <!-- Day Reminders Modal -->\r\n  <div\r\n    class=\"day-reminders-modal\"\r\n    *ngIf=\"showDayRemindersModal()\"\r\n    (click)=\"closeDayRemindersModal()\"\r\n  >\r\n    <div class=\"modal-content\" (click)=\"$event.stopPropagation()\">\r\n      <div class=\"modal-header\">\r\n        <h3>{{ selectedDayDate() | date : \"fullDate\" }}</h3>\r\n        <button class=\"close-btn\" (click)=\"closeDayRemindersModal()\">\r\n          <svg\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        <div class=\"reminders-list\">\r\n          <div\r\n            class=\"reminder-item\"\r\n            *ngFor=\"let reminder of selectedDayReminders()\"\r\n          >\r\n            <div class=\"reminder-content\">\r\n              <h4 class=\"reminder-title\">{{ reminder.title }}</h4>\r\n              <p class=\"reminder-description\" *ngIf=\"reminder.description\">\r\n                {{ reminder.description }}\r\n              </p>\r\n              <div class=\"reminder-dates\">\r\n                <div class=\"date-item\">\r\n                  <span class=\"date-label\"\r\n                    >{{ translate(\"reminders.event_time\") }}:</span\r\n                  >\r\n                  <span class=\"date-value\">{{\r\n                    formatDateTime(reminder.eventTime)\r\n                  }}</span>\r\n                </div>\r\n                <div class=\"date-item\">\r\n                  <span class=\"date-label\"\r\n                    >{{ translate(\"reminders.reminder_time\") }}:</span\r\n                  >\r\n                  <span class=\"date-value\">{{\r\n                    formatDateTime(reminder.reminderTime)\r\n                  }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"no-reminders\" *ngIf=\"selectedDayReminders().length === 0\">\r\n            <svg\r\n              width=\"48\"\r\n              height=\"48\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"1\"\r\n            >\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n              <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\r\n              <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\r\n            </svg>\r\n            <h4>{{ translate(\"reminders.no_reminders\") }}</h4>\r\n            <p>{{ translate(\"reminders.no_reminders_description\") }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CalendarComponent } from './calendar.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CalendarComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CalendarRoutingModule {}\r\n", "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { CalendarComponent } from './calendar.component';\r\nimport { AddReminderModalComponent } from './add-reminder-modal/add-reminder-modal.component';\r\nimport { EditReminderModalComponent } from './edit-reminder-modal/edit-reminder-modal.component';\r\nimport { AllRemindersModalComponent } from './all-reminders-modal/all-reminders-modal.component';\r\nimport { CalendarRoutingModule } from './calendar-routing.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { CalendarService } from '../../services/calendar.service';\r\nimport { ReminderService } from '../../services/reminder.service';\r\nimport { CalendarStatsService } from '../../services/calendar-stats.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CalendarComponent,\r\n    AddReminderModalComponent,\r\n    EditReminderModalComponent,\r\n    AllRemindersModalComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    HttpClientModule,\r\n    SharedModule,\r\n    CalendarRoutingModule,\r\n  ],\r\n  providers: [CalendarService, ReminderService, CalendarStatsService],\r\n  exports: [CalendarComponent],\r\n})\r\nexport class CalendarModule {}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAY;CAAZ,SAAYA,iBAAc;AACxB,EAAAA,gBAAAA,gBAAA,KAAA,IAAA,CAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,MAAA,IAAA,CAAA,IAAA;AACA,EAAAA,gBAAAA,gBAAA,OAAA,IAAA,CAAA,IAAA;AACF,GAJY,mBAAA,iBAAc,CAAA,EAAA;AASpB,IAAO,uBAAP,MAAO,sBAAoB;EAGX;EAFZ,SAAS,GAAG,YAAY,UAAU;EAE1C,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAmB;EAEvC,qBACE,QAAsB;AAEtB,WAAO,KAAK,KAAK,IACf,GAAG,KAAK,MAAM,sBAAsB,MAAM,EAAE;EAEhD;;qCAXW,uBAAoB,mBAAA,UAAA,CAAA;EAAA;4EAApB,uBAAoB,SAApB,sBAAoB,WAAA,YAFnB,OAAM,CAAA;;;sEAEP,sBAAoB,CAAA;UAHhC;WAAW;MACV,YAAY;KACb;;;;;AClBK,IAAO,kBAAP,MAAO,iBAAe;EAGN;EAFZ,UAAU,YAAY;EAE9B,YAAoB,MAAgB;AAAhB,SAAA,OAAA;EAAmB;EAEvC,eAAe,UAA+B;AAC5C,WAAO,KAAK,KAAK,KAAuB,GAAG,KAAK,OAAO,aAAa,QAAQ;EAC9E;EAEA,eAAe,UAA+B;AAC5C,WAAO,KAAK,KAAK,IAAsB,GAAG,KAAK,OAAO,aAAa,QAAQ;EAC7E;EAEA,eAAe,IAAU;AACvB,WAAO,KAAK,KAAK,OAAyB,GAAG,KAAK,OAAO,aAAa,EAAE,EAAE;EAC5E;EAEA,iBAAc;AACZ,WAAO,KAAK,KAAK,IAAsB,GAAG,KAAK,OAAO,wBAAwB;EAChF;;qCAnBW,kBAAe,mBAAA,UAAA,CAAA;EAAA;4EAAf,kBAAe,SAAf,iBAAe,WAAA,YAFd,OAAM,CAAA;;;sEAEP,iBAAe,CAAA;UAH3B;WAAW;MACV,YAAY;KACb;;;;;;;AEWS,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,OAAA,GAAA,GAAA;;;;;AAwBF,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,WAAA,GAAA,GAAA;;;;;AAaF,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,cAAA,GAAA,GAAA;;;;;AAIJ,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,MAAA,GAAA,GAAA;;;;;AAQE,IAAA,oBAAA,GAAA,QAAA,EAAA;;;;;;AA7EZ,IAAA,yBAAA,GAAA,OAAA,CAAA;AAAiD,IAAA,qBAAA,SAAA,SAAA,gEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,CAAU;IAAA,CAAA;AAClE,IAAA,yBAAA,GAAA,OAAA,CAAA;AAA2B,IAAA,qBAAA,SAAA,SAAA,8DAAA,QAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,aAAA,sBAAS,OAAA,gBAAA,CAAwB;IAAA,CAAA;AAC1D,IAAA,yBAAA,GAAA,OAAA,CAAA,EAA0B,GAAA,MAAA,CAAA;AACA,IAAA,iBAAA,CAAA;AAAyC,IAAA,uBAAA;AACjE,IAAA,yBAAA,GAAA,UAAA,CAAA;AAA0B,IAAA,qBAAA,SAAA,SAAA,mEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,CAAU;IAAA,CAAA;;AAC3C,IAAA,yBAAA,GAAA,OAAA,CAAA;AACE,IAAA,oBAAA,GAAA,QAAA,CAAA,EAA2C,GAAA,QAAA,CAAA;AAE7C,IAAA,uBAAA,EAAM,EACC;;AAGX,IAAA,yBAAA,GAAA,OAAA,CAAA,EAAwB,IAAA,QAAA,EAAA;AACW,IAAA,qBAAA,YAAA,SAAA,qEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAY,OAAA,SAAA,CAAU;IAAA,CAAA;AACrD,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACH,IAAA,iBAAA,EAAA;AAA6C,IAAA,uBAAA;AAChE,IAAA,oBAAA,IAAA,SAAA,EAAA;AAQA,IAAA,qBAAA,IAAA,iDAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACG,IAAA,iBAAA,EAAA;AAAiD,IAAA,uBAAA;AAC1E,IAAA,oBAAA,IAAA,YAAA,EAAA;AAOF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACC,IAAA,iBAAA,EAAA;AAAyC,IAAA,uBAAA;AAChE,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,qBAAA,IAAA,iDAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAA4C,IAAA,uBAAA;AACtE,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,qBAAA,IAAA,iDAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAEA,IAAA,qBAAA,IAAA,iDAAA,GAAA,GAAA,OAAA,EAAA;AAIA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA0B,IAAA,UAAA,EAAA;AACwB,IAAA,qBAAA,SAAA,SAAA,oEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,CAAU;IAAA,CAAA;AACjE,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA;AACA,IAAA,yBAAA,IAAA,UAAA,EAAA;AACE,IAAA,qBAAA,IAAA,kDAAA,GAAA,GAAA,QAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAS,EACL,EACD,EACH,EACF;;;;;;;AAhFsB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,wBAAA,CAAA;AAUlB,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,aAAA,OAAA,YAAA;AAEiB,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,0BAAA,GAAA,IAAA;AAOjB,IAAA,oBAAA;AAAA,IAAA,sBAAA,WAAA,UAAA,OAAA,aAAA,IAAA,OAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,OAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAFA,IAAA,qBAAA,eAAA,OAAA,UAAA,6BAAA,CAAA;AAI0B,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,cAAA,OAAA,CAAA;AAMH,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,gCAAA,CAAA;AAIvB,IAAA,oBAAA;AAAA,IAAA,qBAAA,eAAA,OAAA,UAAA,mCAAA,CAAA;AAOqB,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,sBAAA,GAAA,IAAA;AAMrB,IAAA,oBAAA;AAAA,IAAA,sBAAA,WAAA,WAAA,OAAA,aAAA,IAAA,WAAA,MAAA,OAAA,OAAA,SAAA,cAAA,WAAA,OAAA,aAAA,IAAA,WAAA,MAAA,OAAA,OAAA,SAAA,QAAA;AAE0B,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,cAAA,WAAA,CAAA;AAMF,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,yBAAA,GAAA,IAAA;AAMxB,IAAA,oBAAA;AAAA,IAAA,sBAAA,WAAA,WAAA,OAAA,aAAA,IAAA,cAAA,MAAA,OAAA,OAAA,SAAA,cAAA,WAAA,OAAA,aAAA,IAAA,cAAA,MAAA,OAAA,OAAA,SAAA,QAAA;AAE0B,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,cAAA,cAAA,CAAA;AAKF,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,MAAA,CAAA;AAK2C,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,QAAA,CAAA;AACnE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,kBAAA,GAAA,GAAA;AAE4C,IAAA,oBAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,QAAA,KAAA,OAAA,aAAA,OAAA;AACrC,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,QAAA,CAAA;AACP,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,kBAAA,GAAA,GAAA;;;ADlEN,IAAO,4BAAP,MAAO,2BAAyB;EAU1B;EACA;EACA;EAXD,SAAS,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EACpB,kBAAkB,IAAI,aAAY;EAClC,aAAa,IAAI,aAAY;EAEvC;EACA,UAAU,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,UAAA,CAAA,IAAA,CAAA,CAAA;EACtB,QAAQ,OAAsB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,QAAA,CAAA,IAAA,CAAA,CAAA;EAElC,YACU,IACA,iBACA,oBAAsC;AAFtC,SAAA,KAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;AAER,SAAK,eAAe,KAAK,GAAG,MAAM;MAChC,OAAO,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;MAC1D,aAAa,CAAC,EAAE;MAChB,WAAW,CAAC,IAAI,WAAW,QAAQ;MACnC,cAAc,CAAC,IAAI,WAAW,QAAQ;KACvC;EACH;EAEA,WAAQ;AACN,QAAI,KAAK,aAAa,OAAO;AAC3B,WAAK,QAAQ,IAAI,IAAI;AACrB,WAAK,MAAM,IAAI,IAAI;AAEnB,YAAM,YAAY,KAAK,aAAa;AACpC,YAAM,eAAsC;QAC1C,OAAO,UAAU;QACjB,aAAa,UAAU;QACvB,WAAW,IAAI,KAAK,UAAU,SAAS,EAAE,YAAW;QACpD,cAAc,IAAI,KAAK,UAAU,YAAY,EAAE,YAAW;;AAG5D,WAAK,gBAAgB,eAAe,YAAY,EAAE,UAAU;QAC1D,MAAM,CAAC,aAAY;AACjB,eAAK,QAAQ,IAAI,KAAK;AACtB,cAAI,SAAS,SAAS;AACpB,iBAAK,gBAAgB,KAAI;AACzB,iBAAK,WAAW,KAAI;AACpB,iBAAK,UAAS;UAChB,OAAO;AACL,iBAAK,MAAM,IAAI,SAAS,WAAW,KAAK,UAAU,wBAAwB,CAAC;UAC7E;QACF;QACA,OAAO,CAAC,UAAS;AACf,eAAK,QAAQ,IAAI,KAAK;AACtB,kBAAQ,MAAM,4BAA4B,KAAK;AAC/C,eAAK,MAAM,IAAI,KAAK,UAAU,wBAAwB,CAAC;QACzD;OACD;IACH,OAAO;AACL,WAAK,qBAAoB;IAC3B;EACF;EAEA,WAAQ;AACN,SAAK,WAAW,KAAI;AACpB,SAAK,UAAS;EAChB;EAEQ,YAAS;AACf,SAAK,aAAa,MAAK;AACvB,SAAK,MAAM,IAAI,IAAI;EACrB;EAEQ,uBAAoB;AAC1B,WAAO,KAAK,KAAK,aAAa,QAAQ,EAAE,QAAQ,SAAM;AACpD,YAAM,UAAU,KAAK,aAAa,IAAI,GAAG;AACzC,eAAS,cAAa;IACxB,CAAC;EACH;EAEA,UAAU,KAAW;AACnB,WAAO,KAAK,mBAAmB,UAAU,GAAG;EAC9C;EAEA,cAAc,WAAiB;AAC7B,UAAM,QAAQ,KAAK,aAAa,IAAI,SAAS;AAC7C,QAAI,OAAO,UAAU,MAAM,SAAS;AAClC,UAAI,MAAM,OAAO,UAAU,GAAG;AAC5B,eAAO,KAAK,UAAU,sBAAsB;MAC9C;AACA,UAAI,MAAM,OAAO,WAAW,GAAG;AAC7B,eAAO,GAAG,KAAK,UAAU,kBAAkB,CAAC,IAAI,MAAM,OAAO,WAAW,EAAE,cAAc;MAC1F;IACF;AACA,WAAO;EACT;;qCAzFW,4BAAyB,4BAAA,WAAA,GAAA,4BAAA,eAAA,GAAA,4BAAA,kBAAA,CAAA;EAAA;yEAAzB,4BAAyB,WAAA,CAAA,CAAA,wBAAA,CAAA,GAAA,QAAA,EAAA,QAAA,SAAA,GAAA,SAAA,EAAA,iBAAA,mBAAA,YAAA,aAAA,GAAA,YAAA,OAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,SAAA,sBAAA,GAAA,SAAA,GAAA,MAAA,GAAA,CAAA,GAAA,sBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,GAAA,aAAA,GAAA,OAAA,GAAA,CAAA,SAAA,MAAA,UAAA,MAAA,WAAA,aAAA,QAAA,QAAA,UAAA,gBAAA,gBAAA,GAAA,GAAA,CAAA,MAAA,MAAA,MAAA,KAAA,MAAA,KAAA,MAAA,IAAA,GAAA,CAAA,MAAA,KAAA,MAAA,KAAA,MAAA,MAAA,MAAA,IAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,YAAA,WAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,OAAA,OAAA,GAAA,CAAA,QAAA,QAAA,MAAA,SAAA,mBAAA,SAAA,GAAA,gBAAA,GAAA,aAAA,GAAA,CAAA,SAAA,iBAAA,GAAA,MAAA,GAAA,CAAA,OAAA,aAAA,GAAA,CAAA,MAAA,eAAA,mBAAA,eAAA,QAAA,KAAA,GAAA,gBAAA,GAAA,aAAA,GAAA,CAAA,OAAA,WAAA,GAAA,CAAA,QAAA,kBAAA,MAAA,aAAA,mBAAA,aAAA,GAAA,cAAA,GAAA,CAAA,OAAA,cAAA,GAAA,CAAA,QAAA,kBAAA,MAAA,gBAAA,mBAAA,gBAAA,GAAA,cAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,QAAA,UAAA,GAAA,OAAA,iBAAA,GAAA,SAAA,UAAA,GAAA,CAAA,QAAA,UAAA,GAAA,OAAA,eAAA,GAAA,UAAA,GAAA,CAAA,SAAA,WAAA,GAAA,MAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,SAAA,CAAA,GAAA,UAAA,SAAA,mCAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACZtC,MAAA,qBAAA,GAAA,0CAAA,IAAA,IAAA,OAAA,CAAA;;;AAAiC,MAAA,qBAAA,QAAA,IAAA,OAAA,CAAA;;;;;sEDYpB,2BAAyB,CAAA;UANrC;uBACW,0BAAwB,YACtB,OAAK,UAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA,QAAA,CAAA,mnHAAA,EAAA,CAAA;gGAKR,QAAM,CAAA;UAAd;MACS,iBAAe,CAAA;UAAxB;MACS,YAAU,CAAA;UAAnB;;;;6EAHU,2BAAyB,EAAA,WAAA,6BAAA,UAAA,kFAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;;;;AGY5B,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,OAAA,GAAA,GAAA;;;;;AAwBF,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,WAAA,GAAA,GAAA;;;;;AAaF,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,cAAA,cAAA,GAAA,GAAA;;;;;AAIJ,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,MAAA,GAAA,GAAA;;;;;AAQE,IAAA,oBAAA,GAAA,QAAA,EAAA;;;;;;AA7EZ,IAAA,yBAAA,GAAA,OAAA,CAAA;AAAkD,IAAA,qBAAA,SAAA,SAAA,iEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,CAAU;IAAA,CAAA;AACnE,IAAA,yBAAA,GAAA,OAAA,CAAA;AAA2B,IAAA,qBAAA,SAAA,SAAA,+DAAA,QAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,aAAA,sBAAS,OAAA,gBAAA,CAAwB;IAAA,CAAA;AAC1D,IAAA,yBAAA,GAAA,OAAA,CAAA,EAA0B,GAAA,MAAA,CAAA;AACA,IAAA,iBAAA,CAAA;AAA0C,IAAA,uBAAA;AAClE,IAAA,yBAAA,GAAA,UAAA,CAAA;AAA0B,IAAA,qBAAA,SAAA,SAAA,oEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,CAAU;IAAA,CAAA;;AAC3C,IAAA,yBAAA,GAAA,OAAA,CAAA;AACE,IAAA,oBAAA,GAAA,QAAA,CAAA,EAA2C,GAAA,QAAA,CAAA;AAE7C,IAAA,uBAAA,EAAM,EACC;;AAGX,IAAA,yBAAA,GAAA,OAAA,CAAA,EAAwB,IAAA,QAAA,EAAA;AACW,IAAA,qBAAA,YAAA,SAAA,sEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAY,OAAA,SAAA,CAAU;IAAA,CAAA;AACrD,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACH,IAAA,iBAAA,EAAA;AAA6C,IAAA,uBAAA;AAChE,IAAA,oBAAA,IAAA,SAAA,EAAA;AAQA,IAAA,qBAAA,IAAA,kDAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACG,IAAA,iBAAA,EAAA;AAAiD,IAAA,uBAAA;AAC1E,IAAA,oBAAA,IAAA,YAAA,EAAA;AAOF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACC,IAAA,iBAAA,EAAA;AAAyC,IAAA,uBAAA;AAChE,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,qBAAA,IAAA,kDAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAEA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAwB,IAAA,SAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAA4C,IAAA,uBAAA;AACtE,IAAA,oBAAA,IAAA,SAAA,EAAA;AAOA,IAAA,qBAAA,IAAA,kDAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;AAEA,IAAA,qBAAA,IAAA,kDAAA,GAAA,GAAA,OAAA,EAAA;AAIA,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA0B,IAAA,UAAA,EAAA;AACwB,IAAA,qBAAA,SAAA,SAAA,qEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,SAAA,CAAU;IAAA,CAAA;AACjE,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA;AACA,IAAA,yBAAA,IAAA,UAAA,EAAA;AACE,IAAA,qBAAA,IAAA,mDAAA,GAAA,GAAA,QAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAS,EACL,EACD,EACH,EACF;;;;;;;AAhFsB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,yBAAA,CAAA;AAUlB,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,aAAA,OAAA,YAAA;AAEiB,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,0BAAA,GAAA,IAAA;AAOjB,IAAA,oBAAA;AAAA,IAAA,sBAAA,WAAA,UAAA,OAAA,aAAA,IAAA,OAAA,MAAA,OAAA,OAAA,QAAA,cAAA,UAAA,OAAA,aAAA,IAAA,OAAA,MAAA,OAAA,OAAA,QAAA,QAAA;AAFA,IAAA,qBAAA,eAAA,OAAA,UAAA,6BAAA,CAAA;AAI0B,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,cAAA,OAAA,CAAA;AAMH,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,gCAAA,CAAA;AAIvB,IAAA,oBAAA;AAAA,IAAA,qBAAA,eAAA,OAAA,UAAA,mCAAA,CAAA;AAOqB,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,sBAAA,GAAA,IAAA;AAMrB,IAAA,oBAAA;AAAA,IAAA,sBAAA,WAAA,WAAA,OAAA,aAAA,IAAA,WAAA,MAAA,OAAA,OAAA,SAAA,cAAA,WAAA,OAAA,aAAA,IAAA,WAAA,MAAA,OAAA,OAAA,SAAA,QAAA;AAE0B,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,cAAA,WAAA,CAAA;AAMF,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,yBAAA,GAAA,IAAA;AAMxB,IAAA,oBAAA;AAAA,IAAA,sBAAA,WAAA,WAAA,OAAA,aAAA,IAAA,cAAA,MAAA,OAAA,OAAA,SAAA,cAAA,WAAA,OAAA,aAAA,IAAA,cAAA,MAAA,OAAA,OAAA,SAAA,QAAA;AAE0B,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,cAAA,cAAA,CAAA;AAKF,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,MAAA,CAAA;AAK2C,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,QAAA,CAAA;AACnE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,kBAAA,GAAA,GAAA;AAE4C,IAAA,oBAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,QAAA,KAAA,OAAA,aAAA,OAAA;AACrC,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,QAAA,CAAA;AACP,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,kBAAA,GAAA,GAAA;;;ADlEN,IAAO,6BAAP,MAAO,4BAA0B;EAW3B;EACA;EACA;EAZD,SAAS,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EACrB,WAA4B;EAC3B,kBAAkB,IAAI,aAAY;EAClC,aAAa,IAAI,aAAY;EAEvC;EACA,UAAU,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,UAAA,CAAA,IAAA,CAAA,CAAA;EACtB,QAAQ,OAAsB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,QAAA,CAAA,IAAA,CAAA,CAAA;EAElC,YACU,IACA,iBACA,oBAAsC;AAFtC,SAAA,KAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;AAER,SAAK,eAAe,KAAK,GAAG,MAAM;MAChC,OAAO,CAAC,IAAI,CAAC,WAAW,UAAU,WAAW,UAAU,CAAC,CAAC,CAAC;MAC1D,aAAa,CAAC,EAAE;MAChB,WAAW,CAAC,IAAI,WAAW,QAAQ;MACnC,cAAc,CAAC,IAAI,WAAW,QAAQ;KACvC;EACH;EAEA,WAAQ;AACN,SAAK,eAAc;EACrB;EAEA,YAAY,SAAsB;AAChC,QAAI,QAAQ,UAAU,KAAK,KAAK,UAAU;AACxC,WAAK,eAAc;IACrB;EACF;EAEQ,iBAAc;AACpB,QAAI,KAAK,UAAU;AACjB,YAAM,YAAY,IAAI,KAAK,KAAK,SAAS,SAAS;AAClD,YAAM,eAAe,IAAI,KAAK,KAAK,SAAS,YAAY;AAGxD,YAAM,qBAAqB,KAAK,uBAAuB,SAAS;AAChE,YAAM,wBAAwB,KAAK,uBAAuB,YAAY;AAEtE,WAAK,aAAa,WAAW;QAC3B,OAAO,KAAK,SAAS;QACrB,aAAa,KAAK,SAAS;QAC3B,WAAW;QACX,cAAc;OACf;IACH;EACF;EAEQ,uBAAuB,MAAU;AACvC,UAAM,OAAO,KAAK,YAAW;AAC7B,UAAM,QAAQ,OAAO,KAAK,SAAQ,IAAK,CAAC,EAAE,SAAS,GAAG,GAAG;AACzD,UAAM,MAAM,OAAO,KAAK,QAAO,CAAE,EAAE,SAAS,GAAG,GAAG;AAClD,UAAM,QAAQ,OAAO,KAAK,SAAQ,CAAE,EAAE,SAAS,GAAG,GAAG;AACrD,UAAM,UAAU,OAAO,KAAK,WAAU,CAAE,EAAE,SAAS,GAAG,GAAG;AAEzD,WAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO;EACpD;EAEA,WAAQ;AACN,QAAI,KAAK,aAAa,SAAS,KAAK,UAAU;AAC5C,WAAK,QAAQ,IAAI,IAAI;AACrB,WAAK,MAAM,IAAI,IAAI;AAEnB,YAAM,YAAY,KAAK,aAAa;AACpC,YAAM,eAAsC;QAC1C,IAAI,KAAK,SAAS;QAClB,OAAO,UAAU;QACjB,aAAa,UAAU;QACvB,WAAW,IAAI,KAAK,UAAU,SAAS,EAAE,YAAW;QACpD,cAAc,IAAI,KAAK,UAAU,YAAY,EAAE,YAAW;;AAG5D,WAAK,gBAAgB,eAAe,YAAY,EAAE,UAAU;QAC1D,MAAM,CAAC,aAAY;AACjB,eAAK,QAAQ,IAAI,KAAK;AACtB,cAAI,SAAS,SAAS;AACpB,iBAAK,gBAAgB,KAAI;AACzB,iBAAK,WAAW,KAAI;UACtB,OAAO;AACL,iBAAK,MAAM,IAAI,SAAS,WAAW,KAAK,UAAU,wBAAwB,CAAC;UAC7E;QACF;QACA,OAAO,CAAC,UAAS;AACf,eAAK,QAAQ,IAAI,KAAK;AACtB,kBAAQ,MAAM,4BAA4B,KAAK;AAC/C,eAAK,MAAM,IAAI,KAAK,UAAU,wBAAwB,CAAC;QACzD;OACD;IACH,OAAO;AACL,WAAK,qBAAoB;IAC3B;EACF;EAEA,WAAQ;AACN,SAAK,WAAW,KAAI;EACtB;EAEQ,uBAAoB;AAC1B,WAAO,KAAK,KAAK,aAAa,QAAQ,EAAE,QAAQ,SAAM;AACpD,YAAM,UAAU,KAAK,aAAa,IAAI,GAAG;AACzC,eAAS,cAAa;IACxB,CAAC;EACH;EAEA,UAAU,KAAW;AACnB,WAAO,KAAK,mBAAmB,UAAU,GAAG;EAC9C;EAEA,cAAc,WAAiB;AAC7B,UAAM,QAAQ,KAAK,aAAa,IAAI,SAAS;AAC7C,QAAI,OAAO,UAAU,MAAM,SAAS;AAClC,UAAI,MAAM,OAAO,UAAU,GAAG;AAC5B,eAAO,KAAK,UAAU,gBAAgB;MACxC;AACA,UAAI,MAAM,OAAO,WAAW,GAAG;AAC7B,eAAO,GAAG,KAAK,UAAU,YAAY,CAAC,IAAI,MAAM,OAAO,WAAW,EAAE,cAAc;MACpF;IACF;AACA,WAAO;EACT;;qCA1HW,6BAA0B,4BAAA,WAAA,GAAA,4BAAA,eAAA,GAAA,4BAAA,kBAAA,CAAA;EAAA;yEAA1B,6BAA0B,WAAA,CAAA,CAAA,yBAAA,CAAA,GAAA,QAAA,EAAA,QAAA,UAAA,UAAA,WAAA,GAAA,SAAA,EAAA,iBAAA,mBAAA,YAAA,aAAA,GAAA,YAAA,OAAA,UAAA,CAAA,8BAAA,GAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,SAAA,uBAAA,GAAA,SAAA,GAAA,MAAA,GAAA,CAAA,GAAA,uBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,GAAA,aAAA,GAAA,OAAA,GAAA,CAAA,SAAA,MAAA,UAAA,MAAA,WAAA,aAAA,QAAA,QAAA,UAAA,gBAAA,gBAAA,GAAA,GAAA,CAAA,MAAA,MAAA,MAAA,KAAA,MAAA,KAAA,MAAA,IAAA,GAAA,CAAA,MAAA,KAAA,MAAA,KAAA,MAAA,MAAA,MAAA,IAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,YAAA,WAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,OAAA,OAAA,GAAA,CAAA,QAAA,QAAA,MAAA,SAAA,mBAAA,SAAA,GAAA,gBAAA,GAAA,aAAA,GAAA,CAAA,SAAA,iBAAA,GAAA,MAAA,GAAA,CAAA,OAAA,aAAA,GAAA,CAAA,MAAA,eAAA,mBAAA,eAAA,QAAA,KAAA,GAAA,gBAAA,GAAA,aAAA,GAAA,CAAA,OAAA,WAAA,GAAA,CAAA,QAAA,kBAAA,MAAA,aAAA,mBAAA,aAAA,GAAA,cAAA,GAAA,CAAA,OAAA,cAAA,GAAA,CAAA,QAAA,kBAAA,MAAA,gBAAA,mBAAA,gBAAA,GAAA,cAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,QAAA,UAAA,GAAA,OAAA,iBAAA,GAAA,SAAA,UAAA,GAAA,CAAA,QAAA,UAAA,GAAA,OAAA,eAAA,GAAA,UAAA,GAAA,CAAA,SAAA,WAAA,GAAA,MAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,SAAA,CAAA,GAAA,UAAA,SAAA,oCAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACZvC,MAAA,qBAAA,GAAA,2CAAA,IAAA,IAAA,OAAA,CAAA;;;AAAkC,MAAA,qBAAA,QAAA,IAAA,OAAA,CAAA;;;;;sEDYrB,4BAA0B,CAAA;UANtC;uBACW,2BAAyB,YACvB,OAAK,UAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA,QAAA,CAAA,unHAAA,EAAA,CAAA;gGAKR,QAAM,CAAA;UAAd;MACQ,UAAQ,CAAA;UAAhB;MACS,iBAAe,CAAA;UAAxB;MACS,YAAU,CAAA;UAAnB;;;;6EAJU,4BAA0B,EAAA,WAAA,8BAAA,UAAA,oFAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;;;;AGEjC,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,OAAA,EAAA;AACA,IAAA,yBAAA,GAAA,GAAA;AAAG,IAAA,iBAAA,CAAA;AAA0B,IAAA,uBAAA,EAAI;;;;AAA9B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,SAAA,CAAA;;;;;;AAIL,IAAA,yBAAA,GAAA,OAAA,EAAA;;AACE,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,UAAA,EAAA,EAAwC,GAAA,QAAA,EAAA,EACG,GAAA,QAAA,EAAA;AAE7C,IAAA,uBAAA;;AACA,IAAA,yBAAA,GAAA,GAAA;AAAG,IAAA,iBAAA,CAAA;AAAa,IAAA,uBAAA;AAChB,IAAA,yBAAA,GAAA,UAAA,EAAA;AAA0B,IAAA,qBAAA,SAAA,SAAA,2EAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,cAAA,CAAe;IAAA,CAAA;AAChD,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA,EAAS;;;;AAHN,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,MAAA,CAAA;AAED,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,OAAA,GAAA,GAAA;;;;;AASE,IAAA,yBAAA,GAAA,KAAA,EAAA;AAA6D,IAAA,iBAAA,CAAA;AAA0B,IAAA,uBAAA;;;;AAA1B,IAAA,oBAAA;AAAA,IAAA,4BAAA,YAAA,WAAA;;;;;;AAHjE,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAgE,GAAA,OAAA,EAAA,EAChC,GAAA,MAAA,EAAA;AACD,IAAA,iBAAA,CAAA;AAAoB,IAAA,uBAAA;AAC/C,IAAA,qBAAA,GAAA,4DAAA,GAAA,GAAA,KAAA,EAAA;AACA,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA4B,GAAA,OAAA,EAAA,EACH,GAAA,QAAA,EAAA;AACI,IAAA,iBAAA,CAAA;AAAwC,IAAA,uBAAA;AACjE,IAAA,yBAAA,GAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,EAAA;AAAwC,IAAA,uBAAA,EAAO;AAE1E,IAAA,yBAAA,IAAA,OAAA,EAAA,EAAuB,IAAA,QAAA,EAAA;AACI,IAAA,iBAAA,EAAA;AAA2C,IAAA,uBAAA;AACpE,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAyB,IAAA,iBAAA,EAAA;AAA2C,IAAA,uBAAA,EAAO,EACvE,EACF;AAER,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA8B,IAAA,UAAA,EAAA;AACQ,IAAA,qBAAA,SAAA,SAAA,kFAAA;AAAA,YAAA,cAAA,wBAAA,GAAA,EAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,eAAA,WAAA,CAAwB;IAAA,CAAA;;AACnE,IAAA,yBAAA,IAAA,OAAA,EAAA;AACE,IAAA,oBAAA,IAAA,QAAA,EAAA,EAA4E,IAAA,QAAA,EAAA;AAE9E,IAAA,uBAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA;;AACA,IAAA,yBAAA,IAAA,UAAA,EAAA;AAAsC,IAAA,qBAAA,SAAA,SAAA,kFAAA;AAAA,YAAA,cAAA,wBAAA,GAAA,EAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,iBAAA,WAAA,CAA0B;IAAA,CAAA;;AACvE,IAAA,yBAAA,IAAA,OAAA,EAAA;AACE,IAAA,oBAAA,IAAA,YAAA,EAAA,EAA2C,IAAA,QAAA,EAAA,EACyD,IAAA,QAAA,EAAA,EACvD,IAAA,QAAA,EAAA;AAE/C,IAAA,uBAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAS,EACL;;;;;AA9BuB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,YAAA,KAAA;AACM,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,YAAA,WAAA;AAGJ,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,sBAAA,GAAA,GAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,eAAA,YAAA,SAAA,CAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,yBAAA,GAAA,GAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,eAAA,YAAA,YAAA,CAAA;AAU3B,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,gBAAA,GAAA,GAAA;AASA,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,kBAAA,GAAA,GAAA;;;;;AAMN,IAAA,yBAAA,GAAA,OAAA,EAAA;;AACE,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,oBAAA,GAAA,UAAA,EAAA,EAAwC,GAAA,QAAA,EAAA,EACc,GAAA,QAAA,EAAA;AAExD,IAAA,uBAAA;;AACA,IAAA,yBAAA,GAAA,IAAA;AAAI,IAAA,iBAAA,CAAA;AAAyC,IAAA,uBAAA;AAC7C,IAAA,yBAAA,GAAA,GAAA;AAAG,IAAA,iBAAA,CAAA;AAAqD,IAAA,uBAAA,EAAI;;;;AADxD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,wBAAA,CAAA;AACD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,oCAAA,CAAA;;;;;AA5CP,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,qBAAA,GAAA,wDAAA,IAAA,GAAA,OAAA,EAAA,EAAgE,GAAA,wDAAA,GAAA,GAAA,OAAA,EAAA;AA6ClE,IAAA,uBAAA;;;;AA7CkD,IAAA,oBAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,UAAA,CAAA;AAoCtB,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,UAAA,EAAA,WAAA,CAAA;;;;;AAwCtB,IAAA,oBAAA,GAAA,QAAA,EAAA;;;;;;AAlBV,IAAA,yBAAA,GAAA,OAAA,EAAA;AAA8D,IAAA,qBAAA,SAAA,SAAA,wEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,aAAA,CAAc;IAAA,CAAA;AACnF,IAAA,yBAAA,GAAA,OAAA,CAAA;AAA2B,IAAA,qBAAA,SAAA,SAAA,sEAAA,QAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,aAAA,sBAAS,OAAA,gBAAA,CAAwB;IAAA,CAAA;AAC1D,IAAA,yBAAA,GAAA,OAAA,CAAA,EAA0B,GAAA,IAAA;AACpB,IAAA,iBAAA,CAAA;AAA2C,IAAA,uBAAA;AAC/C,IAAA,yBAAA,GAAA,UAAA,CAAA;AAA0B,IAAA,qBAAA,SAAA,SAAA,2EAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,aAAA,CAAc;IAAA,CAAA;;AAC/C,IAAA,yBAAA,GAAA,OAAA,CAAA;AACE,IAAA,oBAAA,GAAA,QAAA,CAAA,EAA2C,GAAA,QAAA,CAAA;AAE7C,IAAA,uBAAA,EAAM,EACC;;AAEX,IAAA,yBAAA,GAAA,OAAA,CAAA,EAAwB,IAAA,GAAA;AACnB,IAAA,iBAAA,EAAA;AAA2C,IAAA,uBAAA;AAC9C,IAAA,yBAAA,IAAA,OAAA,EAAA,EAA2B,IAAA,UAAA,EAAA;AACS,IAAA,qBAAA,SAAA,SAAA,4EAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,aAAA,CAAc;IAAA,CAAA;AACvD,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA;AACA,IAAA,yBAAA,IAAA,UAAA,EAAA;AAA+B,IAAA,qBAAA,SAAA,SAAA,4EAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA,CAAA;AAAA,aAAA,sBAAS,OAAA,cAAA,CAAe;IAAA,CAAA;AACrD,IAAA,qBAAA,IAAA,0DAAA,GAAA,GAAA,QAAA,EAAA;AACA,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAS,EACL,EACF,EACF;;;;AApBE,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,0BAAA,CAAA;AASD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,0BAAA,CAAA;AAE0D,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,QAAA,CAAA;AACzD,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,kBAAA,GAAA,GAAA;AAEuD,IAAA,oBAAA;AAAA,IAAA,qBAAA,YAAA,OAAA,QAAA,CAAA;AAChD,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,QAAA,CAAA;AACP,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,kBAAA,GAAA,GAAA;;;;;;AA/GZ,IAAA,yBAAA,GAAA,OAAA,CAAA;AAAkD,IAAA,qBAAA,SAAA,SAAA,iEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,QAAA,CAAS;IAAA,CAAA;AAClE,IAAA,yBAAA,GAAA,OAAA,CAAA;AAA2B,IAAA,qBAAA,SAAA,SAAA,+DAAA,QAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,aAAA,sBAAS,OAAA,gBAAA,CAAwB;IAAA,CAAA;AAC1D,IAAA,yBAAA,GAAA,OAAA,CAAA,EAA0B,GAAA,MAAA,CAAA;AACA,IAAA,iBAAA,CAAA;AAA0C,IAAA,uBAAA;AAClE,IAAA,yBAAA,GAAA,UAAA,CAAA;AAA0B,IAAA,qBAAA,SAAA,SAAA,oEAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,QAAA,CAAS;IAAA,CAAA;;AAC1C,IAAA,yBAAA,GAAA,OAAA,CAAA;AACE,IAAA,oBAAA,GAAA,QAAA,CAAA,EAA2C,GAAA,QAAA,CAAA;AAE7C,IAAA,uBAAA,EAAM,EACC;;AAGX,IAAA,yBAAA,GAAA,OAAA,CAAA;AAEE,IAAA,qBAAA,IAAA,kDAAA,GAAA,GAAA,OAAA,EAAA,EAA6C,IAAA,kDAAA,GAAA,GAAA,OAAA,EAAA,EAMU,IAAA,kDAAA,GAAA,GAAA,OAAA,EAAA;AA4DzD,IAAA,uBAAA,EAAM;AAIR,IAAA,yBAAA,IAAA,2BAAA,EAAA;AAGE,IAAA,qBAAA,mBAAA,SAAA,gGAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAmB,OAAA,kBAAA,CAAmB;IAAA,CAAA,EAAC,cAAA,SAAA,2FAAA;AAAA,MAAA,wBAAA,GAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBACzB,OAAA,iBAAA,CAAkB;IAAA,CAAA;AACjC,IAAA,uBAAA;AAGD,IAAA,qBAAA,IAAA,kDAAA,IAAA,GAAA,OAAA,EAAA;AAyBF,IAAA,uBAAA;;;;AAlH8B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,yBAAA,CAAA;AAWI,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,QAAA,CAAA;AAMF,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,MAAA,KAAA,CAAA,OAAA,QAAA,CAAA;AAaG,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,CAAA,OAAA,QAAA,KAAA,CAAA,OAAA,MAAA,CAAA;AAoD/B,IAAA,oBAAA;AAAA,IAAA,qBAAA,UAAA,OAAA,aAAA,EAAwB,YAAA,OAAA,iBAAA,CAAA;AAOS,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,kBAAA,CAAA;;;ADhF/B,IAAO,6BAAP,MAAO,4BAA0B;EAc3B;EACA;EACA;EAfD,SAAS,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EACpB,aAAa,IAAI,aAAY;EAC7B,kBAAkB,IAAI,aAAY;EAE5C,YAAY,OAAmB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,YAAA,CAAA,IAAA,CAAA,CAAA;EACjC,UAAU,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,UAAA,CAAA,IAAA,CAAA,CAAA;EACtB,QAAQ,OAAsB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,QAAA,CAAA,IAAA,CAAA,CAAA;EAClC,mBAAmB,OAAwB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,CAAA;EAC/C,gBAAgB,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,gBAAA,CAAA,IAAA,CAAA,CAAA;EAC5B,oBAAoB,OAAO,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,oBAAA,CAAA,IAAA,CAAA,CAAA;EAChC,mBAAmB,OAAwB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,mBAAA,CAAA,IAAA,CAAA,CAAA;EAE/C,YACU,iBACA,oBACA,aAAwB;AAFxB,SAAA,kBAAA;AACA,SAAA,qBAAA;AACA,SAAA,cAAA;EACP;EAEH,WAAQ;AAEN,SAAK,cAAa;EACpB;EAEA,IAAI,QAAK;AACP,WAAO,KAAK,YAAY,MAAK;EAC/B;EAEA,YAAY,SAAsB;AAChC,QAAI,QAAQ,QAAQ,KAAK,KAAK,OAAM,GAAI;AACtC,WAAK,cAAa;IACpB;EACF;;EAGA,kBAAe;AACb,QAAI,KAAK,OAAM,GAAI;AACjB,WAAK,cAAa;IACpB;EACF;;EAGA,cAAW;AACT,SAAK,cAAa;EACpB;EAEA,gBAAa;AACX,SAAK,QAAQ,IAAI,IAAI;AACrB,SAAK,MAAM,IAAI,IAAI;AAEnB,SAAK,gBAAgB,eAAc,EAAG,UAAU;MAC9C,MAAM,CAAC,aAAY;AACjB,aAAK,QAAQ,IAAI,KAAK;AACtB,YAAI,SAAS,WAAW,SAAS,MAAM;AACrC,gBAAM,iBAAiB,MAAM,QAAQ,SAAS,IAAI,IAAI,SAAS,OAAO,CAAC,SAAS,IAAI;AACpF,eAAK,UAAU,IAAI,cAAc;QACnC,OAAO;AACL,eAAK,UAAU,IAAI,CAAA,CAAE;QACvB;MACF;MACA,OAAO,CAAC,UAAS;AACf,aAAK,QAAQ,IAAI,KAAK;AACtB,gBAAQ,MAAM,4BAA4B,KAAK;AAC/C,aAAK,MAAM,IAAI,KAAK,UAAU,sBAAsB,CAAC;MACvD;KACD;EACH;EAEA,eAAe,UAAkB;AAC/B,SAAK,iBAAiB,IAAI,QAAQ;AAClC,SAAK,cAAc,IAAI,IAAI;EAC7B;EAEA,iBAAiB,UAAkB;AACjC,SAAK,iBAAiB,IAAI,QAAQ;AAClC,SAAK,kBAAkB,IAAI,IAAI;EACjC;EAEA,gBAAa;AACX,UAAM,WAAW,KAAK,iBAAgB;AACtC,QAAI,UAAU;AACZ,WAAK,QAAQ,IAAI,IAAI;AACrB,WAAK,gBAAgB,eAAe,SAAS,EAAE,EAAE,UAAU;QACzD,MAAM,CAAC,aAAY;AACjB,eAAK,QAAQ,IAAI,KAAK;AACtB,cAAI,SAAS,SAAS;AACpB,iBAAK,UAAU,OAAO,eACpB,UAAU,OAAO,OAAK,EAAE,OAAO,SAAS,EAAE,CAAC;AAE7C,iBAAK,gBAAgB,KAAI;AACzB,iBAAK,kBAAkB,IAAI,KAAK;AAChC,iBAAK,iBAAiB,IAAI,IAAI;UAChC,OAAO;AACL,iBAAK,MAAM,IAAI,SAAS,WAAW,KAAK,UAAU,wBAAwB,CAAC;UAC7E;QACF;QACA,OAAO,CAAC,UAAS;AACf,eAAK,QAAQ,IAAI,KAAK;AACtB,kBAAQ,MAAM,4BAA4B,KAAK;AAC/C,eAAK,MAAM,IAAI,KAAK,UAAU,wBAAwB,CAAC;QACzD;OACD;IACH;EACF;EAEA,eAAY;AACV,SAAK,kBAAkB,IAAI,KAAK;AAChC,SAAK,iBAAiB,IAAI,IAAI;EAChC;EAEA,oBAAiB;AACf,SAAK,cAAa;AAClB,SAAK,gBAAgB,KAAI;AACzB,SAAK,cAAc,IAAI,KAAK;AAC5B,SAAK,iBAAiB,IAAI,IAAI;EAChC;;EAGA,mBAAgB;AACd,SAAK,cAAa;EACpB;EAEA,mBAAgB;AACd,SAAK,cAAc,IAAI,KAAK;AAC5B,SAAK,iBAAiB,IAAI,IAAI;EAChC;EAEA,UAAO;AACL,SAAK,WAAW,KAAI;EACtB;EAEA,eAAe,YAAkB;AAC/B,UAAM,OAAO,IAAI,KAAK,UAAU;AAChC,WAAO,KAAK,eAAc;EAC5B;EAEA,UAAU,KAAW;AACnB,WAAO,KAAK,mBAAmB,UAAU,GAAG;EAC9C;;qCA1IW,6BAA0B,4BAAA,eAAA,GAAA,4BAAA,kBAAA,GAAA,4BAAA,WAAA,CAAA;EAAA;yEAA1B,6BAA0B,WAAA,CAAA,CAAA,yBAAA,CAAA,GAAA,QAAA,EAAA,QAAA,SAAA,GAAA,SAAA,EAAA,YAAA,cAAA,iBAAA,kBAAA,GAAA,YAAA,OAAA,UAAA,CAAA,8BAAA,GAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,SAAA,uBAAA,GAAA,SAAA,GAAA,MAAA,GAAA,CAAA,GAAA,uBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,iBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,cAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,GAAA,aAAA,GAAA,OAAA,GAAA,CAAA,SAAA,MAAA,UAAA,MAAA,WAAA,aAAA,QAAA,QAAA,UAAA,gBAAA,gBAAA,GAAA,GAAA,CAAA,MAAA,MAAA,MAAA,KAAA,MAAA,KAAA,MAAA,IAAA,GAAA,CAAA,MAAA,KAAA,MAAA,KAAA,MAAA,MAAA,MAAA,IAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,SAAA,iBAAA,GAAA,MAAA,GAAA,CAAA,SAAA,eAAA,GAAA,MAAA,GAAA,CAAA,SAAA,kBAAA,GAAA,MAAA,GAAA,CAAA,GAAA,mBAAA,cAAA,UAAA,UAAA,GAAA,CAAA,SAAA,wBAAA,GAAA,SAAA,GAAA,MAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,SAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,SAAA,MAAA,UAAA,MAAA,WAAA,aAAA,QAAA,QAAA,UAAA,gBAAA,gBAAA,GAAA,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,KAAA,IAAA,GAAA,CAAA,MAAA,MAAA,MAAA,KAAA,MAAA,KAAA,MAAA,IAAA,GAAA,CAAA,MAAA,KAAA,MAAA,KAAA,MAAA,MAAA,MAAA,IAAA,GAAA,CAAA,GAAA,aAAA,GAAA,OAAA,GAAA,CAAA,GAAA,gBAAA,GAAA,CAAA,SAAA,iBAAA,GAAA,SAAA,SAAA,GAAA,CAAA,SAAA,eAAA,GAAA,MAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,kBAAA,GAAA,CAAA,GAAA,gBAAA,GAAA,CAAA,SAAA,wBAAA,GAAA,MAAA,GAAA,CAAA,GAAA,gBAAA,GAAA,CAAA,GAAA,WAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,YAAA,GAAA,CAAA,GAAA,kBAAA,GAAA,CAAA,GAAA,cAAA,YAAA,GAAA,OAAA,GAAA,CAAA,SAAA,MAAA,UAAA,MAAA,WAAA,aAAA,QAAA,QAAA,UAAA,gBAAA,gBAAA,GAAA,GAAA,CAAA,KAAA,4DAAA,GAAA,CAAA,KAAA,yDAAA,GAAA,CAAA,GAAA,cAAA,cAAA,GAAA,OAAA,GAAA,CAAA,UAAA,cAAA,GAAA,CAAA,KAAA,oFAAA,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,IAAA,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,IAAA,GAAA,CAAA,GAAA,sBAAA,GAAA,CAAA,GAAA,aAAA,GAAA,CAAA,SAAA,MAAA,UAAA,MAAA,WAAA,aAAA,QAAA,QAAA,UAAA,gBAAA,gBAAA,GAAA,GAAA,CAAA,KAAA,sCAAA,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,SAAA,MAAA,IAAA,GAAA,CAAA,GAAA,wBAAA,GAAA,OAAA,GAAA,CAAA,GAAA,eAAA,GAAA,CAAA,GAAA,OAAA,iBAAA,GAAA,SAAA,UAAA,GAAA,CAAA,GAAA,OAAA,cAAA,GAAA,SAAA,UAAA,GAAA,CAAA,SAAA,WAAA,GAAA,MAAA,CAAA,GAAA,UAAA,SAAA,oCAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACZvC,MAAA,qBAAA,GAAA,2CAAA,IAAA,GAAA,OAAA,CAAA;;;AAAkC,MAAA,qBAAA,QAAA,IAAA,OAAA,CAAA;;;;;sEDYrB,4BAA0B,CAAA;UANtC;uBACW,2BAAyB,YACvB,OAAK,UAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA,QAAA,CAAA,6iQAAA,EAAA,CAAA;gGAKR,QAAM,CAAA;UAAd;MACS,YAAU,CAAA;UAAnB;MACS,iBAAe,CAAA;UAAxB;;;;6EAHU,4BAA0B,EAAA,WAAA,8BAAA,UAAA,oFAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;;;;;AG0G7B,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,QAAA,GAAA;;;;;AAFJ,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,qBAAA,GAAA,yCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,IAAA,uBAAA;;;;AAHwC,IAAA,oBAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,QAAA;;;;;AA+D9B,IAAA,yBAAA,GAAA,OAAA,EAAA;AAIE,IAAA,oBAAA,GAAA,OAAA,EAAA;AAIA,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA2B,GAAA,OAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AAAiB,IAAA,uBAAA;AAC1C,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;;;AAEF,IAAA,uBAAA;AACA,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAM,EACF;;;;;AAXJ,IAAA,oBAAA;AAAA,IAAA,sBAAA,oBAAA,SAAA,KAAA;AAGyB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,SAAA,KAAA;AAEvB,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,sBAAA,GAAA,GAAA,SAAA,WAAA,WAAA,GAAA,OAAA,sBAAA,GAAA,GAAA,SAAA,SAAA,WAAA,GAAA,GAAA;AAIA,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,kBAAA,SAAA,IAAA,GAAA,GAAA;;;;;AA3CV,IAAA,yBAAA,GAAA,OAAA,EAAA,EAGC,GAAA,MAAA,EAAA;;AAEG,IAAA,yBAAA,GAAA,OAAA,EAAA;AAQE,IAAA,oBAAA,GAAA,QAAA,EAAA,EAOQ,GAAA,QAAA,EAAA,EACmC,GAAA,QAAA,EAAA,EACF,GAAA,QAAA,EAAA;AAE3C,IAAA,uBAAA;AACA,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;AACA,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,qBAAA,GAAA,qDAAA,IAAA,IAAA,OAAA,EAAA;AAmBF,IAAA,uBAAA,EAAM;;;;;AAtBJ,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,iBAAA,GAAA,GAAA;AAKoB,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,qBAAA,MAAA,CAAA;;;;;AAyCpB,IAAA,yBAAA,GAAA,OAAA,EAAA;AAIE,IAAA,oBAAA,GAAA,OAAA,EAAA;AAIA,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA8B,GAAA,OAAA,EAAA;AACA,IAAA,iBAAA,CAAA;AAAoB,IAAA,uBAAA;AAChD,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;;AACF,IAAA,uBAAA,EAAM,EACF;;;;;AAPJ,IAAA,oBAAA;AAAA,IAAA,sBAAA,oBAAA,OAAA,iBAAA,aAAA,CAAA,CAAA;AAG4B,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,YAAA,KAAA;AAE1B,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,sBAAA,GAAA,GAAA,YAAA,cAAA,WAAA,GAAA,GAAA;;;;;AA/BV,IAAA,yBAAA,GAAA,OAAA,EAAA,EAGC,GAAA,MAAA,EAAA;;AAEG,IAAA,yBAAA,GAAA,OAAA,EAAA;AAQE,IAAA,oBAAA,GAAA,UAAA,EAAA,EAAwC,GAAA,QAAA,EAAA,EACc,GAAA,QAAA,EAAA;AAExD,IAAA,uBAAA;AACA,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;AACA,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,qBAAA,GAAA,qDAAA,GAAA,GAAA,OAAA,EAAA;AAeF,IAAA,uBAAA,EAAM;;;;;AAlBJ,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,yBAAA,GAAA,GAAA;AAKuB,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,oBAAA,MAAA,CAAA;;;;;AAiB3B,IAAA,yBAAA,GAAA,OAAA,EAAA;;AAOE,IAAA,yBAAA,GAAA,OAAA,EAAA;AAQE,IAAA,oBAAA,GAAA,QAAA,EAAA,EAA8D,GAAA,QAAA,EAAA,EACnB,GAAA,QAAA,EAAA,EACF,GAAA,QAAA,EAAA;AAE3C,IAAA,uBAAA;;AACA,IAAA,yBAAA,GAAA,GAAA;AAAG,IAAA,iBAAA,CAAA;AAA2C,IAAA,uBAAA,EAAI;;;;AAA/C,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,0BAAA,CAAA;;;;;AArHP,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA2D,GAAA,OAAA,EAAA,EAC5B,GAAA,MAAA,EAAA;AACN,IAAA,iBAAA,CAAA;AAAqB,IAAA,uBAAA;AAC1C,IAAA,yBAAA,GAAA,KAAA,EAAA;AAAoB,IAAA,iBAAA,CAAA;;AAA6B,IAAA,uBAAA,EAAI;AAIvD,IAAA,qBAAA,GAAA,+CAAA,IAAA,GAAA,OAAA,EAAA,EAGC,GAAA,+CAAA,GAAA,GAAA,OAAA,EAAA,EAmDA,GAAA,+CAAA,GAAA,GAAA,OAAA,EAAA;AA0DH,IAAA,uBAAA;;;;;AArHyB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,WAAA,MAAA,CAAA;AACD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,sBAAA,GAAA,GAAA,QAAA,UAAA,CAAA;AAMnB,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,qBAAA,MAAA,EAAA,SAAA,CAAA;AAmDA,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,oBAAA,MAAA,EAAA,SAAA,CAAA;AAuCA,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,qBAAA,MAAA,EAAA,WAAA,KAAA,OAAA,oBAAA,MAAA,EAAA,WAAA,CAAA;;;;;AAyBH,IAAA,yBAAA,GAAA,OAAA,GAAA;AAKE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AAHE,IAAA,qBAAA,SAAA,SAAA,KAAA;AAEA,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,SAAA,OAAA,GAAA;;;;;AAIF,IAAA,yBAAA,GAAA,OAAA,GAAA;AAOE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AAHE,IAAA,qBAAA,SAAA,YAAA,KAAA;AAEA,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,YAAA,OAAA,GAAA;;;;;AAIF,IAAA,yBAAA,GAAA,OAAA,GAAA;AAQE,IAAA,iBAAA,CAAA;AAMF,IAAA,uBAAA;;;;;AANE,IAAA,oBAAA;AAAA,IAAA,6BAAA,MAAA,OAAA,qBAAA,MAAA,EAAA,SAAA,OAAA,oBAAA,MAAA,EAAA,SAAA,GAAA,KAAA,OAAA,UAAA,eAAA,GAAA,GAAA;;;;;AA9BJ,IAAA,yBAAA,GAAA,OAAA,EAAA;AAEE,IAAA,qBAAA,GAAA,+CAAA,GAAA,GAAA,OAAA,GAAA;;AASA,IAAA,qBAAA,GAAA,+CAAA,GAAA,GAAA,OAAA,GAAA;;AAWA,IAAA,qBAAA,GAAA,+CAAA,GAAA,GAAA,OAAA,GAAA;AAeF,IAAA,uBAAA;;;;;AAjCsB,IAAA,oBAAA;AAAA,IAAA,qBAAA,WAAA,sBAAA,GAAA,GAAA,OAAA,qBAAA,MAAA,GAAA,GAAA,CAAA,CAAA;AAUJ,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,sBAAA,GAAA,GAAA,OAAA,oBAAA,MAAA,GAAA,GAAA,CAAA,CAAA;AAUb,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,qBAAA,MAAA,EAAA,SAAA,OAAA,oBAAA,MAAA,EAAA,SAAA,CAAA;;;;;;AAvKP,IAAA,yBAAA,GAAA,OAAA,EAAA;AAOE,IAAA,qBAAA,SAAA,SAAA,yDAAA;AAAA,YAAA,SAAA,wBAAA,GAAA,EAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,YAAA,MAAA,CAAgB;IAAA,CAAA;AAGzB,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAwB,GAAA,OAAA,EAAA;AAMpB,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA,EAAM;AAIR,IAAA,qBAAA,GAAA,yCAAA,IAAA,GAAA,OAAA,EAAA,EAA2D,GAAA,yCAAA,GAAA,IAAA,OAAA,EAAA;AAgK7D,IAAA,uBAAA;;;;;AAnLE,IAAA,sBAAA,gBAAA,OAAA,SAAA,MAAA,KAAA,EAA2C,SAAA,OAAA,QAAA,MAAA,CAAA,EAEf,YAAA,OAAA,eAAA,MAAA,CAAA,EACU,eAAA,CAAA,OAAA,eAAA,MAAA,CAAA;AAQlC,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,cAAA,OAAA,qBAAA,MAAA,EAAA,SAAA,CAAA,EAAyD,iBAAA,OAAA,oBAAA,MAAA,EAAA,SAAA,CAAA;AAGzD,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,QAAA,GAAA,GAAA;AAKE,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,SAAA,MAAA,KAAA;AA0HyB,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,SAAA,MAAA,KAAA;;;;;AAoE/B,IAAA,yBAAA,GAAA,OAAA,GAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,QAAA,OAAA,CAAA,GAAA,GAAA;;;;;;AAIF,IAAA,yBAAA,GAAA,OAAA,GAAA;AASE,IAAA,qBAAA,SAAA,SAAA,yDAAA;AAAA,YAAA,UAAA,wBAAA,IAAA,EAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,YAAA,OAAA,CAAgB;IAAA,CAAA;AAEzB,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;;AATE,IAAA,sBAAA,SAAA,OAAA,QAAA,OAAA,CAAA,EAA4B,cAAA,OAAA,qBAAA,OAAA,EAAA,SAAA,KAAA,OAAA,oBAAA,OAAA,EAAA,SAAA,CAAA,EAI3B,eAAA,CAAA,OAAA,eAAA,OAAA,CAAA;AAID,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,QAAA,QAAA,GAAA,GAAA;;;;;AA+BJ,IAAA,yBAAA,GAAA,OAAA,EAAA,EAGC,GAAA,OAAA,EAAA;AAEG,IAAA,iBAAA,CAAA;;AACF,IAAA,uBAAA;AACA,IAAA,oBAAA,GAAA,OAAA,EAAA;AACA,IAAA,yBAAA,GAAA,OAAA,GAAA,EAAwB,GAAA,OAAA,EAAA;AACG,IAAA,iBAAA,CAAA;AAAiB,IAAA,uBAAA;AAC1C,IAAA,yBAAA,GAAA,OAAA,EAAA;AAAwB,IAAA,iBAAA,CAAA;AAAmC,IAAA,uBAAA,EAAM,EAC7D;;;;;AANJ,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,sBAAA,GAAA,GAAA,UAAA,WAAA,WAAA,GAAA,GAAA;AAEqB,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,oBAAA,UAAA,KAAA;AAEI,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,UAAA,KAAA;AACD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,kBAAA,UAAA,IAAA,CAAA;;;;;AAK5B,IAAA,yBAAA,GAAA,OAAA,GAAA,EAGC,GAAA,OAAA,GAAA,EACuB,GAAA,OAAA,GAAA;AACS,IAAA,iBAAA,CAAA;;AAA+E,IAAA,uBAAA;AAC9G,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;;AACF,IAAA,uBAAA;AACA,IAAA,yBAAA,GAAA,OAAA,EAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA,EAAM;AAEN,IAAA,oBAAA,IAAA,OAAA,GAAA;AAMF,IAAA,uBAAA;;;;;AAdiC,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,sBAAA,GAAA,GAAA,aAAA,OAAA,GAAA,EAAA,GAAA,KAAA,aAAA,MAAA,SAAA,KAAA,QAAA,EAAA;AAE7B,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,sBAAA,GAAA,IAAA,aAAA,cAAA,WAAA,GAAA,GAAA;AAGA,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,oBAAA,GAAA,GAAA;AAKA,IAAA,oBAAA;AAAA,IAAA,sBAAA,oBAAA,OAAA,iBAAA,cAAA,CAAA,CAAA;;;;;AAOJ,IAAA,yBAAA,GAAA,OAAA,EAAA;;AAOE,IAAA,yBAAA,GAAA,OAAA,GAAA;AAQE,IAAA,oBAAA,GAAA,QAAA,EAAA,EAA8D,GAAA,QAAA,EAAA,EACnB,GAAA,QAAA,EAAA,EACF,GAAA,QAAA,EAAA;AAE3C,IAAA,uBAAA;;AACA,IAAA,yBAAA,GAAA,GAAA;AAAG,IAAA,iBAAA,CAAA;AAA2C,IAAA,uBAAA,EAAI;;;;AAA/C,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,0BAAA,CAAA;;;;;AAuBH,IAAA,yBAAA,GAAA,QAAA,EAAA;AAA+D,IAAA,iBAAA,CAAA;AAC7D,IAAA,uBAAA;;;;AAD6D,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,gBAAA,CAAA;;;;;AAG5D,IAAA,iBAAA,CAAA;;;;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,kBAAA,GAAA,KAAA;;;;;AAGL,IAAA,yBAAA,GAAA,QAAA,GAAA;AACG,IAAA,iBAAA,CAAA;AACuC,IAAA,uBAAA;;;;AADvC,IAAA,oBAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,oBAAA,GAAA,KAAA,OAAA,UAAA,uBAAA,CAAA;;;;;AAIL,IAAA,yBAAA,GAAA,OAAA,GAAA,EAAmE,GAAA,OAAA,GAAA,EACjC,GAAA,OAAA,GAAA;;AAE5B,IAAA,yBAAA,GAAA,OAAA,GAAA;AAQE,IAAA,oBAAA,GAAA,QAAA,EAAA,EAA8D,GAAA,QAAA,EAAA,EACnB,GAAA,QAAA,EAAA,EACF,GAAA,QAAA,EAAA;AAE3C,IAAA,uBAAA,EAAM;;AAER,IAAA,yBAAA,GAAA,OAAA,GAAA,EAAuB,GAAA,QAAA,GAAA;AACI,IAAA,iBAAA,EAAA;AAAwB,IAAA,uBAAA;AACjD,IAAA,yBAAA,IAAA,QAAA,GAAA;AAAyB,IAAA,iBAAA,EAAA;AAEvB,IAAA,uBAAA,EAAO,EACL;AAER,IAAA,yBAAA,IAAA,OAAA,GAAA,EAA6B,IAAA,OAAA,GAAA;;AAEzB,IAAA,yBAAA,IAAA,OAAA,GAAA;AAQE,IAAA,oBAAA,IAAA,QAAA,GAAA,EAAgC,IAAA,QAAA,GAAA;AAIlC,IAAA,uBAAA,EAAM;;AAER,IAAA,yBAAA,IAAA,OAAA,GAAA,EAAuB,IAAA,QAAA,GAAA;AACI,IAAA,iBAAA,EAAA;AAAqB,IAAA,uBAAA;AAC9C,IAAA,yBAAA,IAAA,QAAA,GAAA;AAAyB,IAAA,iBAAA,EAAA;AAAiC,IAAA,uBAAA,EAAO,EAC7D;AAER,IAAA,yBAAA,IAAA,OAAA,GAAA,EAA8B,IAAA,OAAA,GAAA;;AAE1B,IAAA,yBAAA,IAAA,OAAA,GAAA;AAQE,IAAA,oBAAA,IAAA,QAAA,GAAA,EAAgE,IAAA,YAAA,GAAA;AAElE,IAAA,uBAAA,EAAM;;AAER,IAAA,yBAAA,IAAA,OAAA,GAAA,EAAuB,IAAA,QAAA,GAAA;AACI,IAAA,iBAAA,EAAA;AAAsB,IAAA,uBAAA;AAC/C,IAAA,yBAAA,IAAA,QAAA,GAAA;AAAyB,IAAA,iBAAA,EAAA;AAAkC,IAAA,uBAAA,EAAO,EAC9D;AAER,IAAA,yBAAA,IAAA,OAAA,GAAA,EAA+B,IAAA,OAAA,GAAA;;AAE3B,IAAA,yBAAA,IAAA,OAAA,GAAA;AAQE,IAAA,oBAAA,IAAA,QAAA,GAAA,EAA2C,IAAA,QAAA,GAAA,EACV,IAAA,QAAA,GAAA;AAEnC,IAAA,uBAAA,EAAM;;AAER,IAAA,yBAAA,IAAA,OAAA,GAAA,EAAuB,IAAA,QAAA,GAAA;AACI,IAAA,iBAAA,EAAA;AAAuB,IAAA,uBAAA;AAChD,IAAA,yBAAA,IAAA,QAAA,GAAA;AAAyB,IAAA,iBAAA,EAAA;AAEvB,IAAA,uBAAA,EAAO,EACL,EACF;;;;AAnEuB,IAAA,oBAAA,EAAA;AAAA,IAAA,4BAAA,OAAA,iBAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,mBAAA,CAAA;AAsBA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,cAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,gBAAA,CAAA;AAkBA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,eAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,iBAAA,CAAA;AAmBA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,gBAAA,CAAA;AACA,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,kBAAA,CAAA;;;;;AAS7B,IAAA,yBAAA,GAAA,OAAA,GAAA,EAA2B,GAAA,OAAA,GAAA;AAEvB,IAAA,oBAAA,GAAA,OAAA,GAAA;AACA,IAAA,yBAAA,GAAA,GAAA;AAAG,IAAA,iBAAA,CAAA;AAAmC,IAAA,uBAAA,EAAI,EACtC;;;;AADD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,kBAAA,CAAA;;;;;AAuCH,IAAA,yBAAA,GAAA,KAAA,GAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,UAAA,aAAA,GAAA;;;;;AAPN,IAAA,yBAAA,GAAA,OAAA,EAAA,EAGC,GAAA,OAAA,GAAA,EAC4B,GAAA,MAAA,EAAA;AACD,IAAA,iBAAA,CAAA;AAAiB,IAAA,uBAAA;AACzC,IAAA,qBAAA,GAAA,8CAAA,GAAA,GAAA,KAAA,GAAA;AAGA,IAAA,yBAAA,GAAA,OAAA,GAAA,EAAwB,GAAA,QAAA,EAAA;AAEpB,IAAA,iBAAA,CAAA;;;AAEF,IAAA,uBAAA;AACA,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAqD,IAAA,iBAAA,EAAA;AAEnD,IAAA,uBAAA;AACF,IAAA,yBAAA,IAAA,QAAA,GAAA;AAIE,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAO,EACH,EACF;;;;;AAnBoB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,UAAA,KAAA;AACM,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,UAAA,WAAA;AAK1B,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,sBAAA,GAAA,IAAA,UAAA,WAAA,OAAA,GAAA,OAAA,sBAAA,GAAA,IAAA,UAAA,SAAA,OAAA,GAAA,GAAA;AAGuB,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,SAAA,UAAA,KAAA;AAA4B,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,kBAAA,UAAA,IAAA,CAAA;AAKnD,IAAA,oBAAA;AAAA,IAAA,sBAAA,SAAA,OAAA,oBAAA,UAAA,MAAA,CAAA;AAEA,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,oBAAA,UAAA,MAAA,GAAA,GAAA;;;;;AAKR,IAAA,yBAAA,GAAA,OAAA,EAAA,EAGC,GAAA,GAAA;AACI,IAAA,iBAAA,CAAA;AAA2C,IAAA,uBAAA,EAAI;;;;AAA/C,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,0BAAA,CAAA;;;;;;AAtDb,IAAA,yBAAA,GAAA,OAAA,GAAA;AAGE,IAAA,qBAAA,SAAA,SAAA,yDAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,aAAA,IAAiB,IAAI,CAAC;IAAA,CAAA;AAE/B,IAAA,yBAAA,GAAA,OAAA,GAAA;AAA2B,IAAA,qBAAA,SAAA,SAAA,uDAAA,QAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,aAAA,sBAAS,OAAA,gBAAA,CAAwB;IAAA,CAAA;AAC1D,IAAA,yBAAA,GAAA,OAAA,GAAA,EAA0B,GAAA,IAAA;AACpB,IAAA,iBAAA,CAAA;;AAAwC,IAAA,uBAAA;AAC5C,IAAA,yBAAA,GAAA,UAAA,GAAA;AAA0B,IAAA,qBAAA,SAAA,SAAA,4DAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,aAAA,IAAiB,IAAI,CAAC;IAAA,CAAA;;AACvD,IAAA,yBAAA,GAAA,OAAA,EAAA;AAQE,IAAA,oBAAA,GAAA,QAAA,GAAA,EAA2C,GAAA,QAAA,GAAA;AAE7C,IAAA,uBAAA,EAAM,EACC;;AAEX,IAAA,yBAAA,IAAA,OAAA,GAAA,EAAwB,IAAA,OAAA,EAAA;AAEpB,IAAA,qBAAA,IAAA,0CAAA,IAAA,IAAA,OAAA,EAAA,EAGC,IAAA,0CAAA,GAAA,GAAA,OAAA,EAAA;AA6BH,IAAA,uBAAA,EAAM,EACF,EACF;;;;AAnDE,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,sBAAA,GAAA,GAAA,OAAA,aAAA,GAAA,UAAA,CAAA;AAmBkB,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,iBAAA,OAAA,aAAA,CAAA,CAAA;AA0BjB,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,iBAAA,OAAA,aAAA,CAAA,EAAA,WAAA,CAAA;;;;;AAqCC,IAAA,yBAAA,GAAA,KAAA,GAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,UAAA,aAAA,GAAA;;;;;AAJN,IAAA,yBAAA,GAAA,OAAA,EAAA,EAA2D,GAAA,OAAA,GAAA,EAC9B,GAAA,MAAA,EAAA;AACD,IAAA,iBAAA,CAAA;AAAiB,IAAA,uBAAA;AACzC,IAAA,qBAAA,GAAA,8CAAA,GAAA,GAAA,KAAA,GAAA;AAGA,IAAA,yBAAA,GAAA,OAAA,GAAA,EAAwB,GAAA,QAAA,EAAA;AAEpB,IAAA,iBAAA,CAAA;;;AAEF,IAAA,uBAAA;AACA,IAAA,yBAAA,IAAA,QAAA,EAAA;AAAqD,IAAA,iBAAA,EAAA;AAEnD,IAAA,uBAAA;AACF,IAAA,yBAAA,IAAA,QAAA,GAAA;AAIE,IAAA,iBAAA,EAAA;AACF,IAAA,uBAAA,EAAO,EACH,EACF;;;;;AAnBoB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,UAAA,KAAA;AACM,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,UAAA,WAAA;AAK1B,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,sBAAA,GAAA,IAAA,UAAA,WAAA,OAAA,GAAA,OAAA,sBAAA,GAAA,IAAA,UAAA,SAAA,OAAA,GAAA,GAAA;AAGuB,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,SAAA,UAAA,KAAA;AAA4B,IAAA,oBAAA;AAAA,IAAA,4BAAA,OAAA,kBAAA,UAAA,IAAA,CAAA;AAKnD,IAAA,oBAAA;AAAA,IAAA,sBAAA,SAAA,OAAA,oBAAA,UAAA,MAAA,CAAA;AAEA,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,oBAAA,UAAA,MAAA,GAAA,GAAA;;;;;AAKR,IAAA,yBAAA,GAAA,OAAA,EAAA,EAAyD,GAAA,GAAA;AACpD,IAAA,iBAAA,CAAA;AAA2C,IAAA,uBAAA,EAAI;;;;AAA/C,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,0BAAA,CAAA;;;;;;AAhDb,IAAA,yBAAA,GAAA,OAAA,GAAA;AAGE,IAAA,qBAAA,SAAA,SAAA,yDAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,wBAAA,CAAyB;IAAA,CAAA;AAElC,IAAA,yBAAA,GAAA,OAAA,GAAA;AAA2B,IAAA,qBAAA,SAAA,SAAA,uDAAA,QAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,aAAA,sBAAS,OAAA,gBAAA,CAAwB;IAAA,CAAA;AAC1D,IAAA,yBAAA,GAAA,OAAA,GAAA,EAAgD,GAAA,IAAA;AAC1C,IAAA,iBAAA,CAAA;AAAyC,IAAA,uBAAA;AAC7C,IAAA,yBAAA,GAAA,UAAA,GAAA;AAA0B,IAAA,qBAAA,SAAA,SAAA,4DAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,wBAAA,CAAyB;IAAA,CAAA;;AAC1D,IAAA,yBAAA,GAAA,OAAA,EAAA;AAQE,IAAA,oBAAA,GAAA,QAAA,GAAA,EAA2C,GAAA,QAAA,GAAA;AAE7C,IAAA,uBAAA,EAAM,EACC;;AAEX,IAAA,yBAAA,GAAA,OAAA,GAAA,EAAwB,IAAA,OAAA,EAAA;AAEpB,IAAA,qBAAA,IAAA,0CAAA,IAAA,IAAA,OAAA,EAAA,EAA2D,IAAA,0CAAA,GAAA,GAAA,OAAA,EAAA;AA0B7D,IAAA,uBAAA,EAAM,EACF,EACF;;;;AA9CsB,IAAA,oBAAA,CAAA;AAAA,IAAA,sBAAA,OAAA,OAAA,MAAA,CAAA;AACpB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,wBAAA,CAAA;AAiBwC,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,WAAA,CAAA;AAuBlB,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,WAAA,EAAA,WAAA,CAAA;;;;;AAShC,IAAA,yBAAA,GAAA,OAAA,GAAA,EAA+C,GAAA,OAAA,GAAA;AAE3C,IAAA,oBAAA,GAAA,OAAA,GAAA;AACA,IAAA,yBAAA,GAAA,GAAA;AAAG,IAAA,iBAAA,CAAA;AAAmC,IAAA,uBAAA,EAAI,EACtC;;;;AADD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,kBAAA,CAAA;;;;;;AAKP,IAAA,yBAAA,GAAA,OAAA,GAAA,EAA2C,GAAA,OAAA,GAAA;;AAEvC,IAAA,yBAAA,GAAA,OAAA,GAAA;AAQE,IAAA,oBAAA,GAAA,UAAA,EAAA,EAAwC,GAAA,QAAA,GAAA,EACG,GAAA,QAAA,GAAA;AAE7C,IAAA,uBAAA;;AACA,IAAA,yBAAA,GAAA,GAAA;AAAG,IAAA,iBAAA,CAAA;AAAa,IAAA,uBAAA;AAChB,IAAA,yBAAA,GAAA,UAAA,GAAA;AAA0B,IAAA,qBAAA,SAAA,SAAA,4DAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,gBAAA,CAAiB;IAAA,CAAA;AAClD,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA,EAAS,EACL;;;;AAJD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,MAAA,CAAA;AAED,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,KAAA,OAAA,UAAA,gBAAA,GAAA,GAAA;;;;;AAkDM,IAAA,yBAAA,GAAA,KAAA,GAAA;AACE,IAAA,iBAAA,CAAA;AACF,IAAA,uBAAA;;;;AADE,IAAA,oBAAA;AAAA,IAAA,6BAAA,KAAA,aAAA,aAAA,GAAA;;;;;AAPN,IAAA,yBAAA,GAAA,OAAA,EAAA,EAGC,GAAA,OAAA,GAAA,EAC+B,GAAA,MAAA,EAAA;AACD,IAAA,iBAAA,CAAA;AAAoB,IAAA,uBAAA;AAC/C,IAAA,qBAAA,GAAA,8CAAA,GAAA,GAAA,KAAA,GAAA;AAGA,IAAA,yBAAA,GAAA,OAAA,GAAA,EAA4B,GAAA,OAAA,GAAA,EACH,GAAA,QAAA,GAAA;AAElB,IAAA,iBAAA,CAAA;AAAwC,IAAA,uBAAA;AAE3C,IAAA,yBAAA,GAAA,QAAA,GAAA;AAAyB,IAAA,iBAAA,EAAA;AAEvB,IAAA,uBAAA,EAAO;AAEX,IAAA,yBAAA,IAAA,OAAA,GAAA,EAAuB,IAAA,QAAA,GAAA;AAElB,IAAA,iBAAA,EAAA;AAA2C,IAAA,uBAAA;AAE9C,IAAA,yBAAA,IAAA,QAAA,GAAA;AAAyB,IAAA,iBAAA,EAAA;AAEvB,IAAA,uBAAA,EAAO,EACL,EACF,EACF;;;;;AAtBuB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,aAAA,KAAA;AACM,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,aAAA,WAAA;AAM1B,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,sBAAA,GAAA,GAAA;AAEsB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,eAAA,aAAA,SAAA,CAAA;AAMtB,IAAA,oBAAA,CAAA;AAAA,IAAA,6BAAA,IAAA,OAAA,UAAA,yBAAA,GAAA,GAAA;AAEsB,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,eAAA,aAAA,YAAA,CAAA;;;;;AAOjC,IAAA,yBAAA,GAAA,OAAA,GAAA;;AACE,IAAA,yBAAA,GAAA,OAAA,EAAA;AAQE,IAAA,oBAAA,GAAA,UAAA,EAAA,EAAwC,GAAA,QAAA,EAAA,EACc,GAAA,QAAA,EAAA;AAExD,IAAA,uBAAA;;AACA,IAAA,yBAAA,GAAA,IAAA;AAAI,IAAA,iBAAA,CAAA;AAAyC,IAAA,uBAAA;AAC7C,IAAA,yBAAA,GAAA,GAAA;AAAG,IAAA,iBAAA,CAAA;AAAqD,IAAA,uBAAA,EAAI;;;;AADxD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,wBAAA,CAAA;AACD,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,OAAA,UAAA,oCAAA,CAAA;;;;;;AAnEb,IAAA,yBAAA,GAAA,OAAA,GAAA;AAGE,IAAA,qBAAA,SAAA,SAAA,yDAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,uBAAA,CAAwB;IAAA,CAAA;AAEjC,IAAA,yBAAA,GAAA,OAAA,GAAA;AAA2B,IAAA,qBAAA,SAAA,SAAA,uDAAA,QAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,aAAA,sBAAS,OAAA,gBAAA,CAAwB;IAAA,CAAA;AAC1D,IAAA,yBAAA,GAAA,OAAA,GAAA,EAA0B,GAAA,IAAA;AACpB,IAAA,iBAAA,CAAA;;AAA2C,IAAA,uBAAA;AAC/C,IAAA,yBAAA,GAAA,UAAA,GAAA;AAA0B,IAAA,qBAAA,SAAA,SAAA,4DAAA;AAAA,MAAA,wBAAA,IAAA;AAAA,YAAA,SAAA,wBAAA;AAAA,aAAA,sBAAS,OAAA,uBAAA,CAAwB;IAAA,CAAA;;AACzD,IAAA,yBAAA,GAAA,OAAA,EAAA;AAQE,IAAA,oBAAA,GAAA,QAAA,GAAA,EAA2C,GAAA,QAAA,GAAA;AAE7C,IAAA,uBAAA,EAAM,EACC;;AAEX,IAAA,yBAAA,IAAA,OAAA,GAAA,EAAwB,IAAA,OAAA,EAAA;AAEpB,IAAA,qBAAA,IAAA,0CAAA,IAAA,GAAA,OAAA,EAAA,EAGC,IAAA,0CAAA,GAAA,GAAA,OAAA,GAAA;AA0CH,IAAA,uBAAA,EAAM,EACF,EACF;;;;AAhEE,IAAA,oBAAA,CAAA;AAAA,IAAA,4BAAA,sBAAA,GAAA,GAAA,OAAA,gBAAA,GAAA,UAAA,CAAA;AAmBqB,IAAA,oBAAA,CAAA;AAAA,IAAA,qBAAA,WAAA,OAAA,qBAAA,CAAA;AA2BI,IAAA,oBAAA;AAAA,IAAA,qBAAA,QAAA,OAAA,qBAAA,EAAA,WAAA,CAAA;;;AD7vB/B,IAAO,oBAAP,MAAO,mBAAiB;EAyClB;EACA;EACA;EACA;EACA;;EA3CV,aAAa,OAAwB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,aAAA,CAAA,IAAA,CAAA,CAAA;EACvC,eAAe,OAAwB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,eAAA,CAAA,IAAA,CAAA,CAAA;EACzC,iBAAiB,OAAwB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,iBAAA,CAAA,IAAA,CAAA,CAAA;EAC3C,cAAc,OAAa,oBAAI,KAAI,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,cAAA,CAAA,IAAA,CAAA,CAAA;EACrC,eAAe,OAAoB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,eAAA,CAAA,IAAA,CAAA,CAAA;EACvC,UAAU,OAAgB,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,UAAA,CAAA,IAAA,CAAA,CAAA;EAC/B,QAAQ,OAAsB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,QAAA,CAAA,IAAA,CAAA,CAAA;EAClC,QAAQ,OAAgB,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,QAAA,CAAA,IAAA,CAAA,CAAA;;EAG7B,UAAU,OAAwB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,UAAA,CAAA,IAAA,CAAA,CAAA;;EAGpC,WAAW,OAAiC,SAAO,GAAA,YAAA,CAAA,EAAA,WAAA,WAAA,CAAA,IAAA,CAAA,CAAA;EACnD,yBAAyB,OAAgB,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,yBAAA,CAAA,IAAA,CAAA,CAAA;;EAG9C,eAAuB,CAAA;EACvB,WAAqB,CAAA;EACrB,aAAuB,CAAA;;EAGvB,YAAY,OAAmB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,YAAA,CAAA,IAAA,CAAA,CAAA;EACjC,uBAAuB,OAAgB,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,uBAAA,CAAA,IAAA,CAAA,CAAA;EAC5C,wBAAwB,OAAgB,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,wBAAA,CAAA,IAAA,CAAA,CAAA;EAC7C,wBAAwB,OAAgB,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,wBAAA,CAAA,IAAA,CAAA,CAAA;EAC7C,uBAAuB,OAAmB,CAAA,GAAE,GAAA,YAAA,CAAA,EAAA,WAAA,uBAAA,CAAA,IAAA,CAAA,CAAA;EAC5C,kBAAkB,OAAoB,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,kBAAA,CAAA,IAAA,CAAA,CAAA;;EAG1C,gBAAgB,OAA6B,MAAI,GAAA,YAAA,CAAA,EAAA,WAAA,gBAAA,CAAA,IAAA,CAAA,CAAA;EACjD,eAAe,OAAgB,OAAK,GAAA,YAAA,CAAA,EAAA,WAAA,eAAA,CAAA,IAAA,CAAA,CAAA;EAGpC;EAEQ,gBAAgC,CAAA;EAExC,YACU,iBACA,sBACA,oBACA,aACA,iBAAgC;AAJhC,SAAA,kBAAA;AACA,SAAA,uBAAA;AACA,SAAA,qBAAA;AACA,SAAA,cAAA;AACA,SAAA,kBAAA;EACP;EAEH,WAAQ;AACN,SAAK,mBAAkB;AACvB,SAAK,WAAU;AACf,SAAK,cAAa;AAClB,SAAK,kBAAiB;AACtB,SAAK,0BAAyB;EAChC;EAEA,cAAW;AACT,SAAK,cAAc,QAAQ,CAAC,QAAQ,IAAI,YAAW,CAAE;EACvD;EAEQ,qBAAkB;AACxB,SAAK,qBAAoB;AACzB,SAAK,cAAa;AAClB,SAAK,gBAAe;EACtB;EAEQ,4BAAyB;AAC/B,UAAM,UAAU,KAAK,YAAY,aAAa,UAC5C,CAAC,SAAqB;AACpB,WAAK,MAAM,IAAI,SAAS,IAAI;AAC5B,WAAK,cAAa;AAClB,WAAK,gBAAe;IACtB,CAAC;AAEH,SAAK,cAAc,KAAK,OAAO;EACjC;EAEQ,gBAAa;AACnB,QAAI,KAAK,MAAK,GAAI;AAChB,WAAK,WAAW;QACd;QACA;QACA;QACA;QACA;QACA;QACA;;IAEJ,OAAO;AACL,WAAK,WAAW,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;IAClE;EACF;EAEQ,kBAAe;AACrB,QAAI,KAAK,MAAK,GAAI;AAChB,WAAK,aAAa;QAChB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;IAEJ,OAAO;AACL,WAAK,aAAa;QAChB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;IAEJ;EACF;EAEQ,uBAAoB;AAC1B,UAAM,UAAU,KAAK,YAAW;AAChC,UAAM,OAAO,QAAQ,YAAW;AAChC,UAAM,QAAQ,QAAQ,SAAQ;AAC9B,UAAM,MAAM,QAAQ,QAAO;AAE3B,SAAK,eAAe,CAAA;AAEpB,QAAI,KAAK,SAAQ,MAAO,SAAS;AAE/B,YAAM,WAAW,IAAI,KAAK,MAAM,OAAO,CAAC;AACxC,YAAM,UAAU,IAAI,KAAK,MAAM,QAAQ,GAAG,CAAC;AAC3C,YAAM,YAAY,IAAI,KAAK,QAAQ;AAGnC,YAAM,YAAY,SAAS,OAAM;AACjC,gBAAU,QAAQ,UAAU,QAAO,IAAK,SAAS;AAEjD,YAAM,UAAU,IAAI,KAAK,OAAO;AAChC,cAAQ,QAAQ,QAAQ,QAAO,KAAM,IAAI,QAAQ,OAAM,EAAG;AAE1D,eACM,IAAI,IAAI,KAAK,SAAS,GAC1B,KAAK,SACL,EAAE,QAAQ,EAAE,QAAO,IAAK,CAAC,GACzB;AACA,aAAK,aAAa,KAAK,IAAI,KAAK,CAAC,CAAC;MACpC;IACF,WAAW,KAAK,SAAQ,MAAO,QAAQ;AAErC,YAAM,cAAc,IAAI,KAAK,OAAO;AACpC,YAAM,YAAY,QAAQ,OAAM;AAChC,kBAAY,QAAQ,QAAQ,QAAO,IAAK,SAAS;AAGjD,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,cAAMC,OAAM,IAAI,KAAK,WAAW;AAChC,QAAAA,KAAI,QAAQ,YAAY,QAAO,IAAK,CAAC;AACrC,aAAK,aAAa,KAAKA,IAAG;MAC5B;IACF,WAAW,KAAK,SAAQ,MAAO,OAAO;AAEpC,WAAK,aAAa,KAAK,IAAI,KAAK,OAAO,CAAC;IAC1C;EACF;EAEA,aAAU;AACR,SAAK,QAAQ,IAAI,IAAI;AACrB,SAAK,MAAM,IAAI,IAAI;AAGnB,UAAM,gBAAgB,KAAK,gBAAgB,cAAa,EAAG,UAAU;MACnE,MAAM,CAAC,aAAY;AACjB,YAAI,SAAS,SAAS;AAEpB,gBAAM,mBAAmB,SAAS,KAAK,IAAI,CAAC,UAAW,iCAClD,QADkD;YAErD,OAAO,KAAK,kBAAkB,MAAM,IAAI;YACxC;AACF,eAAK,WAAW,IAAI,gBAAgB;AACpC,eAAK,aAAa,IAAI,CAAA,CAAE;AACxB,eAAK,qBAAoB;QAC3B;AACA,aAAK,QAAQ,IAAI,KAAK;MACxB;MACA,OAAO,CAAC,UAAS;AACf,gBAAQ,MAAM,8BAA8B,KAAK;AACjD,aAAK,MAAM,IAAI,4BAA4B;AAC3C,aAAK,QAAQ,IAAI,KAAK;MACxB;KACD;AACD,SAAK,cAAc,KAAK,aAAa;EACvC;EAEQ,uBAAoB;AAC1B,QAAI,WAAW,KAAK,WAAU;AAG9B,QAAI,KAAK,QAAO,EAAG,SAAS,QAAW;AACrC,iBAAW,SAAS,OAAO,CAAC,UAAU,MAAM,SAAS,KAAK,QAAO,EAAG,IAAI;IAC1E;AAGA,QAAI,KAAK,QAAO,EAAG,WAAW,QAAW;AACvC,iBAAW,SAAS,OAClB,CAAC,UAAU,MAAM,WAAW,KAAK,QAAO,EAAG,MAAM;IAErD;AAEA,SAAK,eAAe,IAAI,QAAQ;EAClC;;EAGA,gBAAa;AACX,UAAM,UAAU,KAAK,YAAW;AAChC,YAAQ,SAAS,QAAQ,SAAQ,IAAK,CAAC;AACvC,SAAK,YAAY,IAAI,IAAI,KAAK,OAAO,CAAC;AACtC,SAAK,qBAAoB;EAC3B;EAEA,YAAS;AACP,UAAM,UAAU,KAAK,YAAW;AAChC,YAAQ,SAAS,QAAQ,SAAQ,IAAK,CAAC;AACvC,SAAK,YAAY,IAAI,IAAI,KAAK,OAAO,CAAC;AACtC,SAAK,qBAAoB;EAC3B;EAEA,YAAS;AACP,SAAK,YAAY,IAAI,oBAAI,KAAI,CAAE;AAC/B,SAAK,qBAAoB;EAC3B;;EAGA,YAAY,MAAU;AACpB,SAAK,aAAa,IAAI,IAAI;AAG1B,UAAM,eAAe,KAAK,oBAAoB,IAAI;AAClD,QAAI,aAAa,SAAS,GAAG;AAC3B,WAAK,qBAAqB,IAAI,YAAY;AAC1C,WAAK,gBAAgB,IAAI,IAAI;AAC7B,WAAK,sBAAsB,IAAI,IAAI;IACrC;EACF;EAEA,eAAe,SAAwB;AACrC,SAAK,QAAQ,IAAI,OAAO;AACxB,SAAK,WAAU;EACjB;EAEA,mBAAmB,OAAa;AAC9B,UAAM,aAAa,mBAAK,KAAK,QAAO;AACpC,eAAW,OAAO,QAAQ,CAAC,QAAQ;AACnC,SAAK,eAAe,UAAU;EAChC;EAEA,qBAAqB,OAAa;AAChC,UAAM,aAAa,mBAAK,KAAK,QAAO;AACpC,eAAW,SAAS,QAAQ,CAAC,QAAQ;AACrC,SAAK,eAAe,UAAU;EAChC;EAEA,kBAAe;AACb,SAAK,WAAU;EACjB;EAEA,iBAAiB,MAA8B;AAC7C,SAAK,SAAS,IAAI,IAAI;AAEtB,SAAK,qBAAoB;AAEzB,SAAK,kBAAiB;EACxB;EAEA,kBAAkB,OAAY;AAC5B,YAAQ,IAAI,yBAAyB;AAGrC,UAAM,eAAc;AACpB,UAAM,gBAAe;AAGrB,SAAK,uBAAuB,IAAI,IAAI;AAEpC,YAAQ,IAAI,8BAA8B;EAC5C;EAEA,0BAAuB;AACrB,SAAK,uBAAuB,IAAI,KAAK;EACvC;;EAGQ,wBAAwB,MAAU;AACxC,UAAM,OAAO,KAAK,YAAW;AAC7B,UAAM,QAAQ,OAAO,KAAK,SAAQ,IAAK,CAAC,EAAE,SAAS,GAAG,GAAG;AACzD,UAAM,MAAM,OAAO,KAAK,QAAO,CAAE,EAAE,SAAS,GAAG,GAAG;AAClD,WAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG;EAChC;EAEA,iBAAiB,MAAU;AACzB,UAAM,UAAU,KAAK,wBAAwB,IAAI;AACjD,WAAO,KAAK,eAAc,EAAG,OAAO,CAAC,UAAS;AAC5C,YAAM,YAAY,KAAK,wBAAwB,IAAI,KAAK,MAAM,SAAS,CAAC;AACxE,aAAO,cAAc;IACvB,CAAC;EACH;EAEA,qBAAqB,MAAU;AAC7B,UAAM,UAAU,KAAK,wBAAwB,IAAI;AACjD,WAAO,KAAK,WAAU,EAAG,OAAO,CAAC,UAAS;AACxC,YAAM,YAAY,KAAK,wBAAwB,IAAI,KAAK,MAAM,SAAS,CAAC;AACxE,aAAO,cAAc;IACvB,CAAC;EACH;EAEA,QAAQ,MAAU;AAChB,UAAM,QAAQ,oBAAI,KAAI;AACtB,WAAO,KAAK,aAAY,MAAO,MAAM,aAAY;EACnD;EAEA,eAAe,MAAU;AACvB,UAAM,WAAW,KAAK,aAAY;AAClC,WAAO,WAAW,KAAK,aAAY,MAAO,SAAS,aAAY,IAAK;EACtE;EAEA,eAAe,MAAU;AACvB,UAAM,UAAU,KAAK,YAAW;AAChC,WACE,KAAK,SAAQ,MAAO,QAAQ,SAAQ,KACpC,KAAK,YAAW,MAAO,QAAQ,YAAW;EAE9C;EAEA,WAAW,MAAU;AACnB,QAAI,KAAK,MAAK,GAAI;AAChB,YAAM,WAAW;QACf;QACA;QACA;QACA;QACA;QACA;QACA;;AAEF,aAAO,SAAS,KAAK,OAAM,CAAE;IAC/B,OAAO;AACL,YAAM,WAAW;QACf;QACA;QACA;QACA;QACA;QACA;QACA;;AAEF,aAAO,SAAS,KAAK,OAAM,CAAE;IAC/B;EACF;EAEA,kBAAkB,MAAe;AAC/B,UAAM,MAAM,KAAK,gBAAgB,kBAAkB,IAAI;AACvD,WAAO,KAAK,UAAU,GAAG;EAC3B;EAEA,oBAAoB,QAAmB;AACrC,UAAM,MAAM,KAAK,gBAAgB,oBAAoB,MAAM;AAC3D,WAAO,KAAK,UAAU,GAAG;EAC3B;EAEA,oBAAoB,QAAmB;AACrC,WAAO,KAAK,gBAAgB,oBAAoB,MAAM;EACxD;EAEA,iBAAiB,UAAgB;AAC/B,WAAO,KAAK,gBAAgB,iBAAiB,QAAQ;EACvD;EAEA,kBAAkB,MAAe;AAC/B,WAAO,KAAK,gBAAgB,kBAAkB,IAAI;EACpD;EAEA,UAAU,KAAW;AACnB,WAAO,KAAK,mBAAmB,UAAU,GAAG;EAC9C;;EAGA,IAAI,YAAS;AACX,WAAO;EACT;EAEA,IAAI,cAAW;AACb,WAAO;EACT;;EAGA,gBAAa;AACX,SAAK,gBAAgB,eAAc,EAAG,UAAU;MAC9C,MAAM,CAAC,aAAY;AACjB,YAAI,SAAS,WAAW,SAAS,MAAM;AACrC,gBAAM,iBAAiB,MAAM,QAAQ,SAAS,IAAI,IAC9C,SAAS,OACT,CAAC,SAAS,IAAI;AAClB,eAAK,UAAU,IAAI,cAAc;QACnC,OAAO;AACL,eAAK,UAAU,IAAI,CAAA,CAAE;QACvB;MACF;MACA,OAAO,CAAC,UAAS;AACf,gBAAQ,MAAM,4BAA4B,KAAK;AAC/C,aAAK,UAAU,IAAI,CAAA,CAAE;MACvB;KACD;EACH;EAEA,uBAAoB;AAClB,SAAK,qBAAqB,IAAI,IAAI;EACpC;EAEA,wBAAqB;AACnB,SAAK,qBAAqB,IAAI,KAAK;EACrC;EAEA,oBAAiB;AACf,SAAK,cAAa;EACpB;EAEA,wBAAqB;AACnB,SAAK,sBAAsB,IAAI,IAAI;AAEnC,SAAK,cAAa;AAGlB,eAAW,MAAK;AACd,UAAI,KAAK,mBAAmB;AAC1B,aAAK,kBAAkB,iBAAgB;MACzC;IACF,GAAG,GAAG;EACR;EAEA,yBAAsB;AACpB,SAAK,sBAAsB,IAAI,KAAK;EACtC;EAEA,oBAAiB;AACf,SAAK,cAAa;EACpB;EAEA,oBAAoB,MAAU;AAC5B,UAAM,UAAU,KAAK,wBAAwB,IAAI;AACjD,WAAO,KAAK,UAAS,EAAG,OAAO,CAAC,aAAY;AAC1C,YAAM,eAAe,KAAK,wBACxB,IAAI,KAAK,SAAS,YAAY,CAAC;AAEjC,aAAO,iBAAiB;IAC1B,CAAC;EACH;EAEA,oBAAoB,MAAU;AAC5B,WAAO,KAAK,oBAAoB,IAAI,EAAE,SAAS;EACjD;EAEA,iBAAiB,UAAoB,OAAa;AAEhD,WAAO;EACT;;EAGA,yBAAsB;AACpB,SAAK,sBAAsB,IAAI,KAAK;AACpC,SAAK,qBAAqB,IAAI,CAAA,CAAE;AAChC,SAAK,gBAAgB,IAAI,IAAI;EAC/B;EAEA,eAAe,YAAkB;AAC/B,UAAM,OAAO,IAAI,KAAK,UAAU;AAChC,WAAO,KAAK,eAAc;EAC5B;EAEA,uBAAoB;AAClB,SAAK,cAAa;AAElB,QAAI,KAAK,gBAAe,GAAI;AAC1B,YAAM,eAAe,KAAK,oBAAoB,KAAK,gBAAe,CAAG;AACrE,WAAK,qBAAqB,IAAI,YAAY;IAC5C;EACF;;EAGA,oBAAiB;AACf,SAAK,aAAa,IAAI,IAAI;AAE1B,QAAI;AACJ,YAAQ,KAAK,SAAQ,GAAI;MACvB,KAAK;AACH,iBAAS,eAAe;AACxB;MACF,KAAK;AACH,iBAAS,eAAe;AACxB;MACF,KAAK;AACH,iBAAS,eAAe;AACxB;MACF;AACE,iBAAS,eAAe;IAC5B;AAEA,UAAM,WAAW,KAAK,qBACnB,qBAAqB,MAAM,EAC3B,UAAU;MACT,MAAM,CAAC,aAAY;AACjB,gBAAQ,IAAI,4BAA4B,QAAQ;AAChD,YAAI,SAAS,SAAS;AACpB,eAAK,cAAc,IAAI,SAAS,IAAI;AACpC,kBAAQ,IAAI,uBAAuB,SAAS,IAAI;QAClD;AACA,aAAK,aAAa,IAAI,KAAK;MAC7B;MACA,OAAO,CAAC,UAAS;AACf,gBAAQ,MAAM,iCAAiC,KAAK;AACpD,aAAK,aAAa,IAAI,KAAK;MAC7B;KACD;AACH,SAAK,cAAc,KAAK,QAAQ;EAClC;EAEA,qBAAkB;AAChB,UAAM,QAAQ,KAAK,cAAa;AAChC,WAAO,QAAQ,MAAM,aAAa;EACpC;EAEA,sBAAmB;AACjB,UAAM,QAAQ,KAAK,cAAa;AAChC,WAAO,QAAQ,MAAM,mBAAmB;EAC1C;EAEA,mBAAgB;AACd,UAAM,QAAQ,KAAK,cAAa;AAChC,WAAO,QAAQ,MAAM,gBAAgB;EACvC;EAEA,gBAAa;AACX,UAAM,QAAQ,KAAK,cAAa;AAChC,WAAO,QAAQ,MAAM,aAAa;EACpC;EAEA,iBAAc;AACZ,UAAM,QAAQ,KAAK,cAAa;AAChC,WAAO,QAAQ,MAAM,cAAc;EACrC;EAEA,kBAAe;AACb,UAAM,QAAQ,KAAK,cAAa;AAChC,WAAO,QAAQ,MAAM,eAAe;EACtC;;EAGA,IAAI,iBAAc;AAChB,WAAO;EACT;;EAGA,WAAQ;AACN,WAAO,oBAAI,KAAI;EACjB;EAEA,gBAAa;AACX,WAAO,OAAO,aAAa;EAC7B;EAEA,yBAAyB,KAAS;AAChC,UAAM,aAAa,KAAK,qBAAqB,GAAG;AAChD,UAAM,YAAY,KAAK,oBAAoB,GAAG;AAG9C,UAAM,oBAAoB,WAAW,MAAM,GAAG,CAAC;AAC/C,UAAM,mBAAmB,UAAU,MAAM,GAAG,CAAC;AAG7C,QAAI,iBAAiB,SAAS,GAAG;AAC/B,aAAO;IACT;AAGA,QAAI,kBAAkB,SAAS,GAAG;AAChC,aAAO;IACT;AAGA,WAAO;EACT;;qCAplBW,oBAAiB,4BAAA,eAAA,GAAA,4BAAA,oBAAA,GAAA,4BAAA,kBAAA,GAAA,4BAAA,WAAA,GAAA,4BAAA,eAAA,CAAA;EAAA;yEAAjB,oBAAiB,WAAA,CAAA,CAAA,cAAA,CAAA,GAAA,WAAA,SAAA,wBAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;;;;;;;;;;AC1B9B,MAAA,yBAAA,GAAA,OAAA,CAAA,EAAuE,GAAA,OAAA,CAAA,EAExC,GAAA,OAAA,CAAA,EACF,GAAA,MAAA,CAAA;AACA,MAAA,iBAAA,CAAA;AAAuC,MAAA,uBAAA;AAC9D,MAAA,yBAAA,GAAA,KAAA,CAAA;AAAyB,MAAA,iBAAA,CAAA;AAAoC,MAAA,uBAAA,EAAI;AAGnE,MAAA,yBAAA,GAAA,OAAA,CAAA,EAA4B,GAAA,OAAA,CAAA,EAEI,GAAA,UAAA,EAAA;AACI,MAAA,qBAAA,SAAA,SAAA,qDAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAS,IAAA,qBAAA,CAAsB;MAAA,CAAA;;AAC7D,MAAA,yBAAA,IAAA,OAAA,EAAA;AAQE,MAAA,oBAAA,IAAA,UAAA,EAAA,EAAwC,IAAA,QAAA,EAAA,EACI,IAAA,QAAA,EAAA;AAE9C,MAAA,uBAAA;AACA,MAAA,iBAAA,EAAA;AACF,MAAA,uBAAA;;AACA,MAAA,yBAAA,IAAA,UAAA,EAAA;AAAkC,MAAA,qBAAA,SAAA,SAAA,sDAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAS,IAAA,sBAAA,CAAuB;MAAA,CAAA;;AAChE,MAAA,yBAAA,IAAA,OAAA,EAAA;AAQE,MAAA,oBAAA,IAAA,UAAA,EAAA,EAAwC,IAAA,QAAA,EAAA,EACc,IAAA,QAAA,EAAA;AAExD,MAAA,uBAAA;AACA,MAAA,iBAAA,EAAA;AACF,MAAA,uBAAA,EAAS;;AAIX,MAAA,yBAAA,IAAA,OAAA,EAAA,EAA8B,IAAA,UAAA,EAAA;AAI1B,MAAA,qBAAA,SAAA,SAAA,sDAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAS,IAAA,iBAAiB,OAAO,CAAC;MAAA,CAAA;AAElC,MAAA,iBAAA,EAAA;AACF,MAAA,uBAAA;AACA,MAAA,yBAAA,IAAA,UAAA,EAAA;AAGE,MAAA,qBAAA,SAAA,SAAA,sDAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAS,IAAA,iBAAiB,MAAM,CAAC;MAAA,CAAA;AAEjC,MAAA,iBAAA,EAAA;AACF,MAAA,uBAAA;AACA,MAAA,yBAAA,IAAA,UAAA,EAAA;AAGE,MAAA,qBAAA,SAAA,SAAA,sDAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAS,IAAA,iBAAiB,KAAK,CAAC;MAAA,CAAA;AAEhC,MAAA,iBAAA,EAAA;AACF,MAAA,uBAAA,EAAS,EACL,EACF;AAIR,MAAA,yBAAA,IAAA,OAAA,EAAA,EAA0B,IAAA,OAAA,EAAA,EAEW,IAAA,OAAA,EAAA,EAEI,IAAA,UAAA,EAAA;AACX,MAAA,qBAAA,SAAA,SAAA,sDAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAS,IAAA,cAAA,CAAe;MAAA,CAAA;;AAC9C,MAAA,yBAAA,IAAA,OAAA,EAAA;AAQE,MAAA,oBAAA,IAAA,YAAA,EAAA;AACF,MAAA,uBAAA,EAAM;;AAGR,MAAA,yBAAA,IAAA,OAAA,EAAA,EAA2B,IAAA,IAAA;AAEvB,MAAA,iBAAA,EAAA;AAEF,MAAA,uBAAA,EAAK;AAGP,MAAA,yBAAA,IAAA,UAAA,EAAA;AAAwB,MAAA,qBAAA,SAAA,SAAA,sDAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAS,IAAA,UAAA,CAAW;MAAA,CAAA;;AAC1C,MAAA,yBAAA,IAAA,OAAA,EAAA;AAQE,MAAA,oBAAA,IAAA,YAAA,EAAA;AACF,MAAA,uBAAA,EAAM;;AAGR,MAAA,yBAAA,IAAA,UAAA,EAAA;AAA0B,MAAA,qBAAA,SAAA,SAAA,sDAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAS,IAAA,UAAA,CAAW;MAAA,CAAA;AAC5C,MAAA,iBAAA,EAAA;AACF,MAAA,uBAAA,EAAS;AAIX,MAAA,yBAAA,IAAA,OAAA,EAAA;AAEE,MAAA,qBAAA,IAAA,mCAAA,GAAA,GAAA,OAAA,EAAA;AAOA,MAAA,yBAAA,IAAA,OAAA,EAAA;AACE,MAAA,qBAAA,IAAA,mCAAA,GAAA,IAAA,OAAA,EAAA;AAsLF,MAAA,uBAAA,EAAM,EACF;AAIR,MAAA,yBAAA,IAAA,OAAA,EAAA,EAA6B,IAAA,OAAA,EAAA,EAEO,IAAA,OAAA,EAAA,EACL,IAAA,IAAA;;AAEvB,MAAA,yBAAA,IAAA,OAAA,EAAA;AASE,MAAA,oBAAA,IAAA,QAAA,EAAA,EAA8D,IAAA,QAAA,EAAA,EACnB,IAAA,QAAA,EAAA,EACF,IAAA,QAAA,EAAA;AAE3C,MAAA,uBAAA;;AACA,MAAA,yBAAA,IAAA,QAAA,EAAA;AAAmB,MAAA,iBAAA,EAAA;AAAyC,MAAA,uBAAA,EAAO,EAChE;AAEP,MAAA,yBAAA,IAAA,OAAA,EAAA,EAA2B,IAAA,OAAA,EAAA;AAEvB,MAAA,qBAAA,IAAA,mCAAA,GAAA,GAAA,OAAA,EAAA;AAGF,MAAA,uBAAA;AACA,MAAA,yBAAA,IAAA,OAAA,EAAA;AACE,MAAA,qBAAA,IAAA,mCAAA,GAAA,GAAA,OAAA,EAAA;;AAaF,MAAA,uBAAA,EAAM,EACF;AAIR,MAAA,yBAAA,IAAA,OAAA,EAAA,EAAkC,IAAA,OAAA,EAAA,EACL,IAAA,IAAA;;AAEvB,MAAA,yBAAA,IAAA,OAAA,EAAA;AASE,MAAA,oBAAA,IAAA,UAAA,EAAA,EAAwC,IAAA,YAAA,EAAA;AAE1C,MAAA,uBAAA;;AACA,MAAA,yBAAA,IAAA,QAAA,EAAA;AAAmB,MAAA,iBAAA,EAAA;AAAyC,MAAA,uBAAA,EAAO;AAErE,MAAA,yBAAA,IAAA,QAAA,EAAA;AAA0B,MAAA,iBAAA,EAAA;AAGxB,MAAA,uBAAA,EAAO;AAEX,MAAA,yBAAA,IAAA,OAAA,EAAA;AAEE,MAAA,qBAAA,IAAA,mCAAA,IAAA,GAAA,OAAA,EAAA,EAGC,IAAA,mCAAA,IAAA,IAAA,OAAA,EAAA,EAeA,IAAA,mCAAA,GAAA,GAAA,OAAA,EAAA;AAyCH,MAAA,uBAAA,EAAM;AAIR,MAAA,yBAAA,IAAA,OAAA,EAAA,EAAmC,IAAA,OAAA,EAAA,EACP,IAAA,IAAA;;AAEtB,MAAA,yBAAA,IAAA,OAAA,EAAA;AASE,MAAA,oBAAA,IAAA,QAAA,EAAA,EAA8D,IAAA,QAAA,EAAA,EACnB,IAAA,QAAA,EAAA,EACF,IAAA,QAAA,EAAA;AAE3C,MAAA,uBAAA;AACA,MAAA,qBAAA,IAAA,oCAAA,GAAA,GAAA,QAAA,EAAA,EAA+D,IAAA,2CAAA,GAAA,GAAA,eAAA,MAAA,GAAA,gCAAA;AAKjE,MAAA,uBAAA;AACA,MAAA,qBAAA,IAAA,oCAAA,GAAA,GAAA,QAAA,EAAA;AAIF,MAAA,uBAAA;AACA,MAAA,qBAAA,IAAA,mCAAA,IAAA,GAAA,OAAA,EAAA,EAAmE,IAAA,2CAAA,GAAA,GAAA,eAAA,MAAA,GAAA,gCAAA;AAiGrE,MAAA,uBAAA,EAAM,EACF;AAIR,MAAA,qBAAA,IAAA,mCAAA,IAAA,GAAA,OAAA,EAAA,EAIC,IAAA,mCAAA,IAAA,GAAA,OAAA,EAAA,EA8DA,IAAA,mCAAA,GAAA,GAAA,OAAA,EAAA,EAoD8C,IAAA,mCAAA,IAAA,GAAA,OAAA,EAAA;;AA8B/C,MAAA,yBAAA,IAAA,0BAAA,EAAA;AAEE,MAAA,qBAAA,mBAAA,SAAA,gFAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAmB,IAAA,kBAAA,CAAmB;MAAA,CAAA,EAAC,cAAA,SAAA,2EAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBACzB,IAAA,sBAAA,CAAuB;MAAA,CAAA;AACtC,MAAA,uBAAA;AAED,MAAA,yBAAA,IAAA,2BAAA,IAAA,CAAA;AAGE,MAAA,qBAAA,mBAAA,SAAA,iFAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBAAmB,IAAA,kBAAA,CAAmB;MAAA,CAAA,EAAC,cAAA,SAAA,4EAAA;AAAA,QAAA,wBAAA,GAAA;AAAA,eAAA,sBACzB,IAAA,uBAAA,CAAwB;MAAA,CAAA;AACvC,MAAA,uBAAA;AAGD,MAAA,qBAAA,IAAA,mCAAA,IAAA,GAAA,OAAA,EAAA;AAyEF,MAAA,uBAAA;;;;;AA3yBiD,MAAA,sBAAA,OAAA,IAAA,MAAA,CAAA;AAIpB,MAAA,oBAAA,CAAA;AAAA,MAAA,4BAAA,IAAA,UAAA,sBAAA,CAAA;AACE,MAAA,oBAAA,CAAA;AAAA,MAAA,4BAAA,IAAA,UAAA,mBAAA,CAAA;AAmBrB,MAAA,oBAAA,CAAA;AAAA,MAAA,6BAAA,KAAA,IAAA,UAAA,wBAAA,GAAA,GAAA;AAeA,MAAA,oBAAA,CAAA;AAAA,MAAA,6BAAA,KAAA,IAAA,UAAA,yBAAA,GAAA,GAAA;AAQA,MAAA,oBAAA,CAAA;AAAA,MAAA,sBAAA,UAAA,IAAA,SAAA,MAAA,OAAA;AAGA,MAAA,oBAAA;AAAA,MAAA,6BAAA,KAAA,IAAA,UAAA,gBAAA,GAAA,GAAA;AAIA,MAAA,oBAAA;AAAA,MAAA,sBAAA,UAAA,IAAA,SAAA,MAAA,MAAA;AAGA,MAAA,oBAAA;AAAA,MAAA,6BAAA,KAAA,IAAA,UAAA,eAAA,GAAA,GAAA;AAIA,MAAA,oBAAA;AAAA,MAAA,sBAAA,UAAA,IAAA,SAAA,MAAA,KAAA;AAGA,MAAA,oBAAA;AAAA,MAAA,6BAAA,KAAA,IAAA,UAAA,cAAA,GAAA,GAAA;AA2BE,MAAA,oBAAA,CAAA;AAAA,MAAA,6BAAA,KAAA,IAAA,WAAA,IAAA,YAAA,EAAA,SAAA,CAAA,GAAA,KAAA,IAAA,YAAA,EAAA,YAAA,GAAA,GAAA;AAmBF,MAAA,oBAAA,CAAA;AAAA,MAAA,6BAAA,KAAA,IAAA,UAAA,gBAAA,GAAA,GAAA;AAKuB,MAAA,oBAAA;AAAA,MAAA,sBAAA,YAAA,IAAA,SAAA,MAAA,KAAA;AAED,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,SAAA,MAAA,KAAA;AAOG,MAAA,oBAAA;AAAA,MAAA,sBAAA,iBAAA,IAAA,SAAA,MAAA,KAAA;AAIP,MAAA,oBAAA;AAAA,MAAA,qBAAA,WAAA,IAAA,YAAA;AA2MG,MAAA,oBAAA,EAAA;AAAA,MAAA,4BAAA,IAAA,UAAA,wBAAA,CAAA;AAKwB,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,WAAA,IAAA,QAAA;AAOzB,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,WAAA,sBAAA,IAAA,IAAA,IAAA,cAAA,GAAA,EAAA,CAAA;AA+BC,MAAA,oBAAA,CAAA;AAAA,MAAA,4BAAA,IAAA,UAAA,wBAAA,CAAA;AAEK,MAAA,oBAAA,CAAA;AAAA,MAAA,4BAAA,IAAA,qBAAA,IAAA,SAAA,CAAA,EAAA,SAAA,IAAA,oBAAA,IAAA,SAAA,CAAA,EAAA,MAAA;AASN,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,WAAA,IAAA,qBAAA,IAAA,SAAA,CAAA,CAAA;AAeG,MAAA,oBAAA;AAAA,MAAA,qBAAA,WAAA,IAAA,oBAAA,IAAA,SAAA,CAAA,CAAA;AAsBpB,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,qBAAA,IAAA,SAAA,CAAA,EAAA,WAAA,KAAA,IAAA,oBAAA,IAAA,SAAA,CAAA,EAAA,WAAA,CAAA;AAyCmB,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,QAAA,CAAA,IAAA,aAAA,CAAA,EAAuB,YAAA,iBAAA;AAMjB,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,QAAA,CAAA,IAAA,aAAA,CAAA;AAKL,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,CAAA,IAAA,aAAA,CAAA,EAAuB,YAAA,gBAAA;AAwGnD,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,aAAA,CAAA;AA8DA,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,uBAAA,CAAA;AAsD2B,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,QAAA,CAAA;AAQF,MAAA,oBAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,MAAA,CAAA;AAuB1B,MAAA,oBAAA;AAAA,MAAA,qBAAA,UAAA,IAAA,oBAAA;AAOA,MAAA,oBAAA;AAAA,MAAA,qBAAA,UAAA,IAAA,qBAAA;AAQC,MAAA,oBAAA,CAAA;AAAA,MAAA,qBAAA,QAAA,IAAA,sBAAA,CAAA;;;;;sED1sBQ,mBAAiB,CAAA;UAN7B;uBACW,gBAAcyu7BAAA,EAAA,CAAA;2JAwCjB,mBAAiB,CAAA;UADhB;WAAU,mBAAmB;;;;6EAnCnB,mBAAiB,EAAA,WAAA,qBAAA,UAAA,qDAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;;AEtB9B,IAAM,SAAiB;EACrB;IACE,MAAM;IACN,WAAW;;;AAQT,IAAO,wBAAP,MAAO,uBAAqB;;qCAArB,wBAAqB;EAAA;wEAArB,uBAAqB,CAAA;4EAHtB,aAAa,SAAS,MAAM,GAC5B,YAAY,EAAA,CAAA;;;sEAEX,uBAAqB,CAAA;UAJjC;WAAS;MACR,SAAS,CAAC,aAAa,SAAS,MAAM,CAAC;MACvC,SAAS,CAAC,YAAY;KACvB;;;;;ACqBK,IAAO,iBAAP,MAAO,gBAAc;;qCAAd,iBAAc;EAAA;wEAAd,gBAAc,CAAA;6EAHd,CAAC,iBAAiB,iBAAiB,oBAAoB,GAAC,SAAA;IARjE;IACA;IACA;IACA;IACA;IACA;IACA;EAAqB,EAAA,CAAA;;;sEAKZ,gBAAc,CAAA;UAnB1B;WAAS;MACR,cAAc;QACZ;QACA;QACA;QACA;;MAEF,SAAS;QACP;QACA;QACA;QACA;QACA;QACA;QACA;;MAEF,WAAW,CAAC,iBAAiB,iBAAiB,oBAAoB;MAClE,SAAS,CAAC,iBAAiB;KAC5B;;;",
  "names": ["CalendarPeriod", "day"]
}
