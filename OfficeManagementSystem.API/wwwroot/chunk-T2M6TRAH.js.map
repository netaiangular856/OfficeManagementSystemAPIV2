{
  "version": 3,
  "sources": ["src/app/components/shared/sidebar/sidebar.component.ts", "src/app/components/shared/sidebar/sidebar.component.html", "src/app/services/notifications.service.ts", "src/app/components/shared/notification-dropdown/notification-dropdown.component.ts", "src/app/components/shared/notification-dropdown/notification-dropdown.component.html", "src/app/components/shared/add-notification-modal/add-notification-modal.component.ts", "src/app/components/shared/add-notification-modal/add-notification-modal.component.html", "src/app/components/shared/shared.module.ts"],
  "sourcesContent": ["import { Component, OnInit, signal, Output, EventEmitter, Input, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { TranslationService } from '../../../services/translation.service';\r\nimport { LangService } from '../../../services/lang.service';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { ProfileService, UserProfile } from '../../../services/profile.service';\r\nimport { ImageService } from '../../../services/image.service';\r\nimport { NotificationDropdownComponent } from '../notification-dropdown/notification-dropdown.component';\r\nimport { AddNotificationModalComponent } from '../add-notification-modal/add-notification-modal.component';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.css'],\r\n  standalone: false\r\n})\r\nexport class SidebarComponent implements OnInit, OnDestroy {\r\n  @Input() set rtl(value: boolean) {\r\n    this.isRTL.set(value);\r\n  }\r\n  \r\n  @Output() collapsedChange = new EventEmitter<boolean>();\r\n  @Output() logoutConfirmRequested = new EventEmitter<void>();\r\n  @Output() notificationModalRequested = new EventEmitter<void>();\r\n  \r\n  isCollapsed = signal(false);\r\n  isExpanded = signal(false); // For small screen expansion\r\n  currentLang = signal<'ar' | 'en'>('en');\r\n  isRTL = signal(false);\r\n  \r\n  // User profile data\r\n  userProfile = signal<UserProfile | null>(null);\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private translationService: TranslationService,\r\n    private langService: LangService,\r\n    private authService: AuthService,\r\n    private profileService: ProfileService,\r\n    private imageService: ImageService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Subscribe to language changes\r\n    this.langService.currentLang$.subscribe((lang: 'ar' | 'en') => {\r\n      this.currentLang.set(lang);\r\n      this.isRTL.set(lang === 'ar');\r\n    });\r\n    \r\n    // Load user profile\r\n    this.loadUserProfile();\r\n    \r\n    // Auto-expand sidebar on small screens\r\n    this.checkScreenSize();\r\n    \r\n    // Add resize listener\r\n    window.addEventListener('resize', () => this.checkScreenSize());\r\n    \r\n    console.log('Sidebar component initialized');\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // Clean up resize listener\r\n    window.removeEventListener('resize', () => this.checkScreenSize());\r\n  }\r\n\r\n  private loadUserProfile(): void {\r\n    this.profileService.getProfile().subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.userProfile.set(response.data);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading user profile:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  private checkScreenSize(): void {\r\n    if (window.innerWidth <= 768) {\r\n      // On small screens, start with collapsed state\r\n      this.isExpanded.set(false);\r\n    }\r\n  }\r\n\r\n  toggleCollapse(): void {\r\n    this.isCollapsed.update(current => !current);\r\n    this.collapsedChange.emit(this.isCollapsed());\r\n  }\r\n\r\n  toggleExpand(): void {\r\n    // For small screens, toggle between collapsed and expanded\r\n    this.isExpanded.update(current => !current);\r\n  }\r\n\r\n  isActiveRoute(route: string): boolean {\r\n    return this.router.url.includes(route);\r\n  }\r\n\r\n  translate(key: string): string {\r\n    return this.translationService.translate(key);\r\n  }\r\n\r\n  openLogoutConfirm(): void {\r\n    this.logoutConfirmRequested.emit();\r\n  }\r\n\r\n  openNotificationModal(): void {\r\n    this.notificationModalRequested.emit();\r\n  }\r\n\r\n  closeNotificationModal(): void {\r\n    // No local modal state to manage, so this method is effectively a no-op\r\n  }\r\n\r\n  onSendNotification(notificationData: any): void {\r\n    console.log('Sending notification:', notificationData);\r\n    // Here you would typically send the notification to your backend\r\n    // For now, we'll just log it and close the modal\r\n    this.closeNotificationModal();\r\n  }\r\n\r\n  getFullName(): string {\r\n    const profile = this.userProfile();\r\n    if (profile) {\r\n      return `${profile.firstName} ${profile.lastName}`;\r\n    }\r\n    return 'User';\r\n  }\r\n\r\n  getPrimaryRole(): string {\r\n    const profile = this.userProfile();\r\n    if (profile && profile.roles && profile.roles.length > 0) {\r\n      return profile.roles[0];\r\n    }\r\n    return 'User';\r\n  }\r\n\r\n  getUserImageUrl(): string {\r\n    const profile = this.userProfile();\r\n    if (profile) {\r\n      return this.imageService.getImageUrl(profile.imageUrl, `${profile.firstName} ${profile.lastName}`);\r\n    }\r\n    return this.imageService.getImageUrl();\r\n  }\r\n\r\n  getUserInitials(): string {\r\n    const profile = this.userProfile();\r\n    if (profile) {\r\n      return this.imageService.getUserInitials(profile.firstName, profile.lastName);\r\n    }\r\n    return 'U';\r\n  }\r\n}\r\n", "<aside\r\n  class=\"sidebar\"\r\n  [class.collapsed]=\"isCollapsed()\"\r\n  [class.expanded]=\"isExpanded()\"\r\n  [class.rtl]=\"isRTL()\"\r\n>\r\n  <div class=\"sidebar-header\">\r\n    <div class=\"logo-section\" *ngIf=\"!isCollapsed() || isExpanded()\">\r\n      <img src=\"/logo.png\" alt=\"EcoOffice\" class=\"logo\" />\r\n    </div>\r\n    <button\r\n      class=\"collapse-btn\"\r\n      (click)=\"toggleCollapse()\"\r\n      [attr.aria-expanded]=\"!isCollapsed()\"\r\n      [attr.aria-label]=\"isCollapsed() ? 'Expand sidebar' : 'Collapse sidebar'\"\r\n    >\r\n      <svg\r\n        class=\"chevron-icon\"\r\n        [class.rotated]=\"isCollapsed()\"\r\n        width=\"20\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        stroke-width=\"2\"\r\n      >\r\n        <polyline points=\"15,18 9,12 15,6\"></polyline>\r\n      </svg>\r\n    </button>\r\n\r\n    <!-- Mobile expand button -->\r\n    <button\r\n      class=\"mobile-expand-btn\"\r\n      (click)=\"toggleExpand()\"\r\n      [attr.aria-expanded]=\"isExpanded()\"\r\n      [attr.aria-label]=\"isExpanded() ? 'Collapse sidebar' : 'Expand sidebar'\"\r\n    >\r\n      <svg\r\n        width=\"20\"\r\n        height=\"20\"\r\n        viewBox=\"0 0 24 24\"\r\n        fill=\"none\"\r\n        stroke=\"currentColor\"\r\n        stroke-width=\"2\"\r\n      >\r\n        <line x1=\"3\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\r\n        <line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\r\n        <line x1=\"3\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\r\n      </svg>\r\n    </button>\r\n  </div>\r\n\r\n  <nav class=\"sidebar-nav custom-scrollbar\">\r\n    <ul class=\"nav-list\">\r\n      <li class=\"nav-item\">\r\n        <a\r\n          routerLink=\"/dashboard\"\r\n          routerLinkActive=\"active\"\r\n          class=\"nav-link\"\r\n          [attr.aria-current]=\"isActiveRoute('dashboard') ? 'page' : null\"\r\n        >\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\r\n            <polyline points=\"9,22 9,12 15,12 15,22\"></polyline>\r\n          </svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.dashboard\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <a\r\n          routerLink=\"/users\"\r\n          routerLinkActive=\"active\"\r\n          class=\"nav-link\"\r\n          [attr.aria-current]=\"isActiveRoute('users') ? 'page' : null\"\r\n        >\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path>\r\n            <circle cx=\"9\" cy=\"7\" r=\"4\"></circle>\r\n            <path d=\"M23 21v-2a4 4 0 0 1 0 7.75\"></path>\r\n            <path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path>\r\n          </svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.users\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n\r\n\r\n\r\n      <li class=\"nav-item\">\r\n        <a\r\n          routerLink=\"/employees\"\r\n          routerLinkActive=\"active\"\r\n          class=\"nav-link\"\r\n          [attr.aria-current]=\"isActiveRoute('employees') ? 'page' : null\"\r\n        >\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n          >\r\n            <circle cx=\"9\" cy=\"7\" r=\"4\"></circle>\r\n            <path d=\"M3 21v-2a4 4 0 0 1 4-4h4\"></path>\r\n            <circle cx=\"20\" cy=\"9\" r=\"3\"></circle>\r\n            <path d=\"M17 21v-2a3 3 0 0 1 3-3h3\"></path>\r\n          </svg>\r\n\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.employees\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/tasks\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\r\n            <polyline points=\"22,4 12,14.01 9,11.01\"></polyline>\r\n          </svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.tasks\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/partners\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"24\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            class=\"lucide lucide-handshake-icon lucide-handshake\"\r\n          >\r\n            <path d=\"m11 17 2 2a1 1 0 1 0 3-3\" />\r\n            <path\r\n              d=\"m14 14 2.5 2.5a1 1 0 1 0 3-3l-3.88-3.88a3 3 0 0 0-4.24 0l-.88.88a1 1 0 1 1-3-3l2.81-2.81a5.79 5.79 0 0 1 7.06-.87l.47.28a2 2 0 0 0 1.42.25L21 4\"\r\n            />\r\n            <path d=\"m21 3 1 11h-2\" />\r\n            <path d=\"M3 3 2 14l6.5 6.5a1 1 0 1 0 3-3\" />\r\n            <path d=\"M3 4h8\" />\r\n          </svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.partners\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/visits\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n          >\r\n            <!-- Calendar with visit indicator -->\r\n            <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n            <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n            <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n            <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n            <!-- Visit dots -->\r\n            <circle cx=\"8\" cy=\"14\" r=\"1.5\" fill=\"currentColor\"></circle>\r\n            <circle cx=\"12\" cy=\"14\" r=\"1.5\" fill=\"currentColor\"></circle>\r\n            <circle cx=\"16\" cy=\"14\" r=\"1.5\" fill=\"currentColor\"></circle>\r\n            <!-- Clock for appointment time -->\r\n            <circle cx=\"12\" cy=\"18\" r=\"2\"></circle>\r\n            <line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"16\" stroke-width=\"1.5\"></line>\r\n            <line x1=\"12\" y1=\"18\" x2=\"13.5\" y2=\"18\" stroke-width=\"1.5\"></line>\r\n          </svg>\r\n\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.visits\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/travel\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"24\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            class=\"lucide lucide-plane-icon lucide-plane\"\r\n          >\r\n            <path\r\n              d=\"M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z\"\r\n            />\r\n          </svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.travel\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/meetings\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n          >\r\n            <path d=\"M2 3h20\" />\r\n            <path d=\"M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3\" />\r\n            <path d=\"m7 21 5-5 5 5\" />\r\n          </svg>\r\n\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.meetings\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/calendar\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n          >\r\n            <rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>\r\n            <line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line>\r\n            <line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line>\r\n            <line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>\r\n            <circle cx=\"8\" cy=\"14\" r=\"1\"></circle>\r\n            <circle cx=\"12\" cy=\"14\" r=\"1\"></circle>\r\n            <circle cx=\"16\" cy=\"14\" r=\"1\"></circle>\r\n          </svg>\r\n\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.calendar\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/letters\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path\r\n              d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"\r\n            ></path>\r\n            <polyline points=\"22,6 12,13 2,6\"></polyline>\r\n            <path d=\"M2 8l10 5 10-5\"></path>\r\n          </svg>\r\n\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.letters\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/documents\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path\r\n              d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"\r\n            ></path>\r\n            <polyline points=\"14,2 14,8 20,8\"></polyline>\r\n            <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\r\n            <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\r\n            <polyline points=\"10,9 9,9 8,9\"></polyline>\r\n          </svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.documents\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/workflow\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M3 3h6l3 3h9v12H3z\"></path>\r\n            <path d=\"M9 3v6h6\"></path>\r\n            <path d=\"M12 9h6\"></path>\r\n            <path d=\"M12 12h6\"></path>\r\n            <path d=\"M12 15h6\"></path>\r\n          </svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.workflow\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <a routerLink=\"/departments\" routerLinkActive=\"active\" class=\"nav-link\">\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <rect x=\"3\" y=\"3\" width=\"7\" height=\"7\"></rect>\r\n            <rect x=\"14\" y=\"3\" width=\"7\" height=\"7\"></rect>\r\n            <rect x=\"14\" y=\"14\" width=\"7\" height=\"7\"></rect>\r\n            <rect x=\"3\" y=\"14\" width=\"7\" height=\"7\"></rect>\r\n          </svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.departments\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n    </ul>\r\n\r\n    <div class=\"nav-divider\"></div>\r\n\r\n    <ul class=\"nav-list\">\r\n\r\n      <li class=\"nav-item\">\r\n        <a\r\n          routerLink=\"/roles\"\r\n          routerLinkActive=\"active\"\r\n          class=\"nav-link\"\r\n          [attr.aria-current]=\"isActiveRoute('roles') ? 'page' : null\"\r\n        >\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-shield-user-icon lucide-shield-user\"><path d=\"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z\"/><path d=\"M6.376 18.91a6 6 0 0 1 11.249.003\"/><circle cx=\"12\" cy=\"11\" r=\"4\"/></svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.roles\")\r\n          }}</span>\r\n        </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <button class=\"nav-link\" (click)=\"openNotificationModal()\">\r\n          <!-- Send Notification (LTR) -->\r\n          <svg\r\n            class=\"nav-icon icon-send-notification\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            aria-label=\"Send notification\"\r\n            role=\"img\"\r\n          >\r\n            <!-- bell -->\r\n            <path\r\n              d=\"M18 10a6 6 0 10-12 0v2c0 1.6-.6 3.1-1.6 4.2h15.2A6.2 6.2 0 0 1 18 12v-2\"\r\n            />\r\n            <path d=\"M13.5 20a1.5 1.5 0 0 1-3 0\" />\r\n            \r\n          </svg>\r\n\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.send_notification\")\r\n          }}</span>\r\n        </button>\r\n      </li>\r\n\r\n    </ul>\r\n    <div class=\"nav-divider\"></div>\r\n\r\n    <!-- User Profile Section -->\r\n\r\n    <ul class=\"nav-list\">\r\n      <div\r\n        class=\"user-profile-section\"\r\n        *ngIf=\"!isCollapsed() || isExpanded()\"\r\n        routerLink=\"/profile\"\r\n        style=\"cursor: pointer\"\r\n      >\r\n        <div class=\"user-profile-info\">\r\n          <div class=\"user-avatar\">\r\n            <img\r\n              [src]=\"getUserImageUrl()\"\r\n              [alt]=\"getFullName()\"\r\n              class=\"profile-pic\"\r\n              (error)=\"$event.target.src = 'assets/images/user.png'\"\r\n            />\r\n          </div>\r\n          <div class=\"user-details\">\r\n            <span class=\"user-name\">{{ getFullName() }}</span>\r\n            <span class=\"user-role\">{{ getPrimaryRole() }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <li class=\"nav-item\">\r\n        <button class=\"nav-link logout-btn\" (click)=\"openLogoutConfirm()\">\r\n          <svg\r\n            class=\"nav-icon\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n          >\r\n            <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"></path>\r\n            <polyline points=\"16,17 21,12 16,7\"></polyline>\r\n            <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\"></line>\r\n          </svg>\r\n          <span class=\"nav-text\" *ngIf=\"!isCollapsed() || isExpanded()\">{{\r\n            translate(\"sidebar.logout\")\r\n          }}</span>\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n</aside>\r\n", "import { Observable } from 'rxjs';\r\nimport { environment } from './../../environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationsService {\r\n  private apiUrl=`${environment.apiBaseUrl}/Notification`;\r\n  constructor (private http:HttpClient){}\r\n\r\n  getUserNotification(userId?: string):Observable<any>{\r\n    // Try without userId parameter first, as the API might use the authenticated user's token\r\n    return  this.http.get<any>(`${this.apiUrl}/user`)\r\n  }\r\n\r\n  markAsRead(id:number):Observable<any>{\r\n    return this.http.patch<any>(`${this.apiUrl}/${id}`,{});\r\n  }\r\n  markAllAsRead():Observable<any>{\r\n    return this.http.patch<any>(`${this.apiUrl}/mark-all`,{});\r\n  }\r\n  addNotification(data:any):Observable<any>{\r\n    return this.http.post<any>(`${this.apiUrl}`,data);\r\n  }\r\n}\r\n", "import { Component, Input, OnInit, signal, HostListener } from '@angular/core';\r\nimport { TranslationService } from '../../../services/translation.service';\r\nimport { NotificationsService } from '../../../services/notifications.service';\r\nimport { AuthService } from '../../../services/auth.service';\r\n\r\ninterface Notification {\r\n  id: number;\r\n  title: string;\r\n  message: string;\r\n  timestamp: Date;\r\n  isRead: boolean;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n}\r\n\r\ninterface UserNotification {\r\n  id: number;\r\n  userId: string;\r\n  notificationId: number;\r\n  isRead: boolean;\r\n  readAt: string | null;\r\n}\r\n\r\ninterface ApiNotification {\r\n  id: number;\r\n  title: string;\r\n  message: string;\r\n  type: string;\r\n  createdAt: string;\r\n  userNotifications: UserNotification[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-notification-dropdown',\r\n  templateUrl: './notification-dropdown.component.html',\r\n  styleUrls: ['./notification-dropdown.component.css'],\r\n  standalone: false\r\n})\r\nexport class NotificationDropdownComponent implements OnInit {\r\n  @Input() isRTL = false;\r\n  \r\n  isOpen = signal(false);\r\n  notifications: Notification[] = [];\r\n  unreadCount = signal(0);\r\n  isLoading = signal(false);\r\n  error = signal('');\r\n  currentUserId: string = '';\r\n\r\n  constructor(\r\n    private translationService: TranslationService,\r\n    private notificationService: NotificationsService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getCurrentUserId();\r\n    this.loadNotifications();\r\n  }\r\n\r\n  private getCurrentUserId(): void {\r\n    // Get current user ID from auth service or local storage\r\n    const currentUser = this.authService.getCurrentUser();\r\n    if (currentUser) {\r\n      this.currentUserId = currentUser.id;\r\n    } else {\r\n      // Fallback: try to get from localStorage or other sources\r\n      const storedUser = localStorage.getItem('user');\r\n      if (storedUser) {\r\n        try {\r\n          const user = JSON.parse(storedUser);\r\n          this.currentUserId = user.id;\r\n        } catch (e) {\r\n          console.error('Error parsing stored user:', e);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private loadNotifications(): void {\r\n    this.isLoading.set(true);\r\n    this.error.set('');\r\n    \r\n    this.notificationService.getUserNotification().subscribe({\r\n      next: (response) => {\r\n        console.log('Notifications loaded:', response);\r\n        if (response.success && response.data) {\r\n          // Process notifications - the API returns notifications for the authenticated user\r\n          this.notifications = response.data.map((apiNotification: ApiNotification) => {\r\n            // Since the API returns notifications for the authenticated user,\r\n            // we can use the first (and likely only) userNotification entry\r\n            const userNotification = apiNotification.userNotifications[0];\r\n            \r\n            // If no user notification found, assume unread\r\n            const isRead = userNotification ? userNotification.isRead : false;\r\n            \r\n            return {\r\n              id: apiNotification.id,\r\n              title: apiNotification.title,\r\n              message: apiNotification.message,\r\n              timestamp: new Date(apiNotification.createdAt),\r\n              isRead: isRead,\r\n              type: apiNotification.type.toLowerCase() as 'info' | 'success' | 'warning' | 'error'\r\n            };\r\n          });\r\n          \r\n          this.updateUnreadCount();\r\n        } else {\r\n          this.notifications = [];\r\n          this.error.set('Failed to load notifications');\r\n        }\r\n        this.isLoading.set(false);\r\n      },\r\n      error: (err) => {\r\n        // Handle the case where there are no notifications (API returns 400 with \"No Notification To Show\")\r\n        if (err.status === 400 && err.error === 'No Notification To Show') {\r\n          this.notifications = [];\r\n          this.error.set(''); // Clear error message since this is expected\r\n        } else {\r\n          console.error('Error loading notifications:', err);\r\n          this.error.set('Failed to load notifications');\r\n        }\r\n        \r\n        this.isLoading.set(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  toggleDropdown(): void {\r\n    this.isOpen.update(current => !current);\r\n  }\r\n\r\n  closeDropdown(): void {\r\n    this.isOpen.set(false);\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: Event): void {\r\n    const target = event.target as HTMLElement;\r\n    if (!this.isOpen()) return;\r\n    \r\n    // Check if click is outside the notification container\r\n    if (!target.closest('.notification-container')) {\r\n      this.closeDropdown();\r\n    }\r\n  }\r\n\r\n  @HostListener('document:keydown.escape', ['$event'])\r\n  onEscapeKey(event: Event): void {\r\n    if (this.isOpen()) {\r\n      this.closeDropdown();\r\n    }\r\n  }\r\n\r\n  markAsRead(notificationId: number): void {\r\n    this.notificationService.markAsRead(notificationId).subscribe({\r\n      next: (response) => {\r\n        console.log('Notification marked as read:', response);\r\n        // Update local state immediately for better UX\r\n        const notification = this.notifications.find(n => n.id === notificationId);\r\n        if (notification) {\r\n          notification.isRead = true;\r\n          this.updateUnreadCount();\r\n        }\r\n      },\r\n      error: (err) => {\r\n        console.error('Error marking notification as read:', err);\r\n        // Show error to user\r\n        this.error.set('Failed to mark notification as read');\r\n      }\r\n    });\r\n  }\r\n\r\n  markAllAsRead(): void {\r\n    this.notificationService.markAllAsRead().subscribe({\r\n      next: (response) => {\r\n        console.log('All notifications marked as read:', response);\r\n        // Update local state immediately for better UX\r\n        this.notifications.forEach(notification => {\r\n          notification.isRead = true;\r\n        });\r\n        this.updateUnreadCount();\r\n      },\r\n      error: (err) => {\r\n        console.error('Error marking all notifications as read:', err);\r\n        // Show error to user\r\n        this.error.set('Failed to mark all notifications as read');\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateUnreadCount(): void {\r\n    if (this.notifications && Array.isArray(this.notifications)) {\r\n      // Only count notifications that are NOT read (isRead: false)\r\n      const unreadCount = this.notifications.filter((notification: Notification) => !notification.isRead).length;\r\n      this.unreadCount.set(unreadCount);\r\n    } else {\r\n      this.unreadCount.set(0);\r\n    }\r\n  }\r\n\r\n  getTimeAgo(date: Date | string): string {\r\n    const now = new Date();\r\n    const notificationDate = new Date(date);\r\n    \r\n    // Check if date is valid\r\n    if (isNaN(notificationDate.getTime())) {\r\n      return 'Invalid date';\r\n    }\r\n    \r\n    const diffInMs = now.getTime() - notificationDate.getTime();\r\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\r\n    const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\r\n    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\r\n\r\n    if (diffInMinutes < 1) return 'Just now';\r\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    return `${diffInDays}d ago`;\r\n  }\r\n\r\n  getNotificationIcon(type: string): string {\r\n    switch (type) {\r\n      case 'success': return '✓';\r\n      case 'warning': return '⚠';\r\n      case 'error': return '✗';\r\n      default: return 'ℹ';\r\n    }\r\n  }\r\n\r\n  getNotificationClass(type: string): string {\r\n    return `notification-${type}`;\r\n  }\r\n\r\n  translate(key: string): string {\r\n    return this.translationService.translate(key);\r\n  }\r\n}\r\n", "<div class=\"notification-container\" [class.rtl]=\"isRTL\">\r\n  <!-- Notification Bell Button -->\r\n  <button \r\n    class=\"notification-bell\" \r\n    (click)=\"toggleDropdown()\"\r\n    [attr.aria-label]=\"translate('notifications.toggle_notifications')\"\r\n    [attr.aria-expanded]=\"isOpen()\">\r\n    \r\n    <!-- Bell Icon -->\r\n    <svg class=\"bell-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n      <path d=\"M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9\"></path>\r\n      <path d=\"M13.73 21a2 2 0 0 1-3.46 0\"></path>\r\n    </svg>\r\n    \r\n    <!-- Unread Badge -->\r\n    <span \r\n      class=\"unread-badge\" \r\n      *ngIf=\"unreadCount() > 0\"\r\n      [class.rtl]=\"isRTL\">\r\n      {{ unreadCount() > 99 ? '99+' : unreadCount() }}\r\n    </span>\r\n  </button>\r\n\r\n  <!-- Notification Dropdown -->\r\n  <div \r\n    class=\"notification-dropdown\" \r\n    [class.open]=\"isOpen()\"\r\n    [class.rtl]=\"isRTL\"\r\n    (click)=\"$event.stopPropagation()\">\r\n    \r\n    <!-- Header -->\r\n    <div class=\"dropdown-header\">\r\n      <h3 class=\"header-title\">{{ translate('notifications.notifications') }}</h3>\r\n      <button \r\n        class=\"mark-all-read-btn\"\r\n        (click)=\"markAllAsRead()\"\r\n        *ngIf=\"unreadCount() > 0\">\r\n        {{ translate('notifications.mark_all_read') }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Error Message -->\r\n    <div *ngIf=\"error()\" class=\"error-message\">\r\n      <svg class=\"error-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n        <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\r\n        <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\r\n      </svg>\r\n      {{ error() }}\r\n    </div>\r\n\r\n    <!-- Notifications List -->\r\n    <div class=\"notifications-list\">\r\n      <!-- Loading State -->\r\n      <div *ngIf=\"isLoading()\" class=\"loading-state\">\r\n        <svg class=\"loading-spinner\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <circle cx=\"12\" cy=\"12\" r=\"10\" stroke-dasharray=\"31.416\" stroke-dashoffset=\"31.416\">\r\n            <animate attributeName=\"stroke-dasharray\" dur=\"2s\" values=\"0 31.416;15.708 15.708;0 31.416\" repeatCount=\"indefinite\"/>\r\n            <animate attributeName=\"stroke-dashoffset\" dur=\"2s\" values=\"0;-15.708;-31.416\" repeatCount=\"indefinite\"/>\r\n          </circle>\r\n        </svg>\r\n        <p class=\"loading-text\">{{ translate('common.loading') }}</p>\r\n      </div>\r\n\r\n      <!-- Notifications -->\r\n      <div \r\n        *ngFor=\"let notification of notifications\"\r\n        class=\"notification-item\"\r\n        [class.unread]=\"!notification.isRead\"\r\n        [class.read]=\"notification.isRead\"\r\n        [class.rtl]=\"isRTL\">\r\n        \r\n        <!-- Notification Icon -->\r\n        <div class=\"notification-icon\" [class]=\"getNotificationClass(notification.type || 'info')\">\r\n          <span class=\"icon-text\">{{ getNotificationIcon(notification.type || 'info') }}</span>\r\n        </div>\r\n        \r\n        <!-- Notification Content -->\r\n        <div class=\"notification-content\">\r\n          <h4 class=\"notification-title\">{{ notification.title }}</h4>\r\n          <p class=\"notification-message\">{{ notification.message }}</p>\r\n          <span class=\"notification-time\">{{ getTimeAgo(notification.timestamp) }}</span>\r\n        </div>\r\n        \r\n        <!-- Action Buttons -->\r\n        <div class=\"notification-actions\">\r\n          <button \r\n            *ngIf=\"!notification.isRead\"\r\n            class=\"mark-read-btn\"\r\n            (click)=\"markAsRead(notification.id)\"\r\n            [attr.aria-label]=\"translate('notifications.mark_as_read')\">\r\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n              <polyline points=\"20,6 9,17 4,12\"></polyline>\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Empty State -->\r\n      <div *ngIf=\"!isLoading() && notifications.length === 0\" class=\"empty-state\">\r\n        <svg class=\"empty-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\">\r\n          <path d=\"M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9\"></path>\r\n          <path d=\"M13.73 21a2 2 0 0 1-3.46 0\"></path>\r\n        </svg>\r\n        <p class=\"empty-text\">{{ translate('notifications.no_notifications') }}</p>\r\n      </div>\r\n    </div>\r\n\r\n  \r\n  </div>\r\n</div>\r\n", "import { Component, Input, OnInit, Output, EventEmitter, signal, HostListener } from '@angular/core';\r\nimport { TranslationService } from '../../../services/translation.service';\r\nimport { UsersService } from '../../../services/users.service';\r\nimport { NotificationsService } from '../../../services/notifications.service';\r\n\r\ninterface NotificationForm {\r\n  title: string;\r\n  message: string;\r\n  selectedUsers: string[];\r\n}\r\n\r\ninterface UserNameItem {\r\n  id: string;\r\n  name: string;\r\n  departmentName: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-add-notification-modal',\r\n  templateUrl: './add-notification-modal.component.html',\r\n  styleUrls: ['./add-notification-modal.component.css'],\r\n  standalone: false\r\n})\r\nexport class AddNotificationModalComponent implements OnInit {\r\n  @Input() isRTL = false;\r\n  @Input() isOpen = false;\r\n  @Output() closeModal = new EventEmitter<void>();\r\n  @Output() sendNotification = new EventEmitter<NotificationForm>();\r\n\r\n  form = signal<NotificationForm>({\r\n    title: '',\r\n    message: '',\r\n    selectedUsers: []\r\n  });\r\n\r\n  users: UserNameItem[] = [];\r\n  searchTerm = signal('');\r\n  filteredUsers = signal<UserNameItem[]>([]);\r\n  isLoading = signal(false);\r\n  error = signal('');\r\n\r\n  constructor(\r\n    private translationService: TranslationService,\r\n    private usersService: UsersService,\r\n    private notificationsService: NotificationsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadUsers();\r\n  }\r\n\r\n  private loadUsers(): void {\r\n    this.isLoading.set(true);\r\n    this.error.set('');\r\n    \r\n    this.usersService.getUserNames().subscribe({\r\n      next: (users) => {\r\n        this.users = users;\r\n        this.filteredUsers.set(users);\r\n        this.isLoading.set(false);\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading users:', err);\r\n        this.error.set('Failed to load users. Please try again.');\r\n        this.isLoading.set(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  onSearchChange(term: string): void {\r\n    this.searchTerm.set(term);\r\n    const searchTermLower = term.toLowerCase();\r\n    \r\n    if (!searchTermLower) {\r\n      this.filteredUsers.set(this.users);\r\n    } else {\r\n      const filtered = this.users.filter(user =>\r\n        (user.name && user.name.toLowerCase().includes(searchTermLower)) ||\r\n        (user.departmentName && user.departmentName.toLowerCase().includes(searchTermLower))\r\n      );\r\n      this.filteredUsers.set(filtered);\r\n    }\r\n  }\r\n\r\n  toggleUserSelection(userId: string): void {\r\n    const currentSelection = this.form().selectedUsers;\r\n    const isSelected = currentSelection.includes(userId);\r\n    \r\n    if (isSelected) {\r\n      this.form.update(form => ({\r\n        ...form,\r\n        selectedUsers: currentSelection.filter(id => id !== userId)\r\n      }));\r\n    } else {\r\n      this.form.update(form => ({\r\n        ...form,\r\n        selectedUsers: [...currentSelection, userId]\r\n      }));\r\n    }\r\n  }\r\n\r\n  isUserSelected(userId: string): boolean {\r\n    return this.form().selectedUsers.includes(userId);\r\n  }\r\n\r\n  getSelectedUsersCount(): number {\r\n    return this.form().selectedUsers.length;\r\n  }\r\n\r\n  getSelectedUsersNames(): string[] {\r\n    return this.form().selectedUsers.map(userId => {\r\n      const user = this.users.find(u => u.id === userId);\r\n      return user ? user.name : '';\r\n    }).filter(name => name);\r\n  }\r\n\r\n  removeUser(userId: string): void {\r\n    this.form.update(form => ({\r\n      ...form,\r\n      selectedUsers: form.selectedUsers.filter(id => id !== userId)\r\n    }));\r\n  }\r\n\r\n  clearForm(): void {\r\n    this.form.set({\r\n      title: '',\r\n      message: '',\r\n      selectedUsers: []\r\n    });\r\n    this.searchTerm.set('');\r\n    this.filteredUsers.set(this.users);\r\n    this.error.set('');\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.isFormValid()) {\r\n      this.isLoading.set(true);\r\n      this.error.set('');\r\n      \r\n      const notificationData = {\r\n        title: this.form().title,\r\n        message: this.form().message,\r\n        userIds: this.form().selectedUsers\r\n      };\r\n\r\n      this.notificationsService.addNotification(notificationData).subscribe({\r\n        next: (response) => {\r\n          console.log('Notification sent successfully:', response);\r\n          this.sendNotification.emit(this.form());\r\n          this.clearForm();\r\n          this.closeModal.emit();\r\n          this.isLoading.set(false);\r\n        },\r\n        error: (err) => {\r\n          console.error('Error sending notification:', err);\r\n          this.error.set('Failed to send notification. Please try again.');\r\n          this.isLoading.set(false);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  isFormValid(): boolean {\r\n    return this.form().title.trim() !== '' && \r\n           this.form().message.trim() !== '' && \r\n           this.form().selectedUsers.length > 0;\r\n  }\r\n\r\n  onClose(): void {\r\n    this.clearForm();\r\n    this.closeModal.emit();\r\n  }\r\n\r\n  onBackdropClick(event: Event): void {\r\n    if (event.target === event.currentTarget) {\r\n      this.onClose();\r\n    }\r\n  }\r\n\r\n  @HostListener('document:keydown.escape', ['$event'])\r\n  onEscapeKey(event: Event): void {\r\n    if (this.isOpen) {\r\n      this.onClose();\r\n    }\r\n  }\r\n\r\n  translate(key: string): string {\r\n    return this.translationService.translate(key);\r\n  }\r\n\r\n  getUserInitials(name: string): string {\r\n    if (!name) { return ''; }\r\n    const parts = name.trim().split(/\\s+/);\r\n    const first = parts[0]?.charAt(0) ?? '';\r\n    const last = parts.length > 1 ? parts[parts.length - 1].charAt(0) : '';\r\n    return `${first}${last}`.toUpperCase();\r\n  }\r\n}\r\n", "<div \r\n  class=\"modal-overlay\" \r\n  [class.open]=\"isOpen\"\r\n  [class.rtl]=\"isRTL\"\r\n  (click)=\"onBackdropClick($event)\">\r\n  \r\n  <div class=\"modal-container\" [class.rtl]=\"isRTL\">\r\n    <!-- Modal Header -->\r\n    <div class=\"modal-header\">\r\n      <h2 class=\"modal-title\">{{ translate('notifications.send_new_notification') }}</h2>\r\n      <button \r\n        class=\"close-btn\"\r\n        (click)=\"onClose()\"\r\n        [attr.aria-label]=\"translate('common.close')\">\r\n        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n          <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n        </svg>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Modal Body -->\r\n    <div class=\"modal-body\">\r\n      <!-- Error Message -->\r\n      <div *ngIf=\"error()\" class=\"error-message\">\r\n        <svg class=\"error-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\r\n          <line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>\r\n          <line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>\r\n        </svg>\r\n        {{ error() }}\r\n      </div>\r\n\r\n      <form (ngSubmit)=\"onSubmit()\" class=\"notification-form\">\r\n        <!-- Title Field -->\r\n        <div class=\"form-group\">\r\n          <label for=\"notification-title\" class=\"form-label\">\r\n            {{ translate('notifications.title') }} *\r\n          </label>\r\n          <input\r\n            id=\"notification-title\"\r\n            type=\"text\"\r\n            [(ngModel)]=\"form().title\"\r\n            name=\"title\"\r\n            class=\"form-input\"\r\n            [placeholder]=\"translate('notifications.title_placeholder')\"\r\n            required>\r\n        </div>\r\n\r\n        <!-- Message Field -->\r\n        <div class=\"form-group\">\r\n          <label for=\"notification-message\" class=\"form-label\">\r\n            {{ translate('notifications.message') }} *\r\n          </label>\r\n          <textarea\r\n            id=\"notification-message\"\r\n            [(ngModel)]=\"form().message\"\r\n            name=\"message\"\r\n            class=\"form-textarea\"\r\n            [placeholder]=\"translate('notifications.message_placeholder')\"\r\n            rows=\"4\"\r\n            required></textarea>\r\n        </div>\r\n\r\n        <!-- User Selection Section -->\r\n        <div class=\"form-group\">\r\n          <label class=\"form-label\">\r\n            {{ translate('notifications.select_users') }} *\r\n          </label>\r\n          \r\n          <!-- Selected Users Display -->\r\n          <div class=\"selected-users\" *ngIf=\"getSelectedUsersCount() > 0\">\r\n            <div \r\n              *ngFor=\"let userId of form().selectedUsers\"\r\n              class=\"selected-user-tag\">\r\n              <span class=\"user-name\">{{ getSelectedUsersNames()[form().selectedUsers.indexOf(userId)] }}</span>\r\n              <button \r\n                type=\"button\"\r\n                class=\"remove-user-btn\"\r\n                (click)=\"removeUser(userId)\"\r\n                [attr.aria-label]=\"translate('notifications.remove_user')\">\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                  <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n                  <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- User Search -->\r\n          <div class=\"user-search\">\r\n            <div class=\"search-input-wrapper\">\r\n              <svg class=\"search-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\r\n                <path d=\"M21 21l-4.35-4.35\"></path>\r\n              </svg>\r\n              <input\r\n                type=\"text\"\r\n                [ngModel]=\"searchTerm()\"\r\n                (ngModelChange)=\"onSearchChange($event)\"\r\n                [ngModelOptions]=\"{standalone: true}\"\r\n                class=\"search-input\"\r\n                [placeholder]=\"translate('notifications.search_users_placeholder')\">\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Users List -->\r\n          <div class=\"users-list\">\r\n            <!-- Loading State -->\r\n            <div *ngIf=\"isLoading()\" class=\"loading-state\">\r\n              <svg class=\"loading-spinner\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                <circle cx=\"12\" cy=\"12\" r=\"10\" stroke-dasharray=\"31.416\" stroke-dashoffset=\"31.416\">\r\n                  <animate attributeName=\"stroke-dasharray\" dur=\"2s\" values=\"0 31.416;15.708 15.708;0 31.416\" repeatCount=\"indefinite\"/>\r\n                  <animate attributeName=\"stroke-dashoffset\" dur=\"2s\" values=\"0;-15.708;-31.416\" repeatCount=\"indefinite\"/>\r\n                </circle>\r\n              </svg>\r\n              <p class=\"loading-text\">{{ translate('common.loading') }}</p>\r\n            </div>\r\n\r\n            <!-- Users List -->\r\n            <div \r\n              *ngFor=\"let user of filteredUsers()\"\r\n              class=\"user-item\"\r\n              [class.selected]=\"isUserSelected(user.id)\"\r\n              (click)=\"toggleUserSelection(user.id)\">\r\n              \r\n              <!-- User Avatar -->\r\n              <div class=\"user-avatar\">\r\n                <span class=\"avatar-text\">{{ getUserInitials(user.name) }}</span>\r\n              </div>\r\n              \r\n              <!-- User Info -->\r\n              <div class=\"user-info\">\r\n                <div class=\"user-name\">{{ user.name }}</div>\r\n                <div class=\"user-department\" *ngIf=\"user.departmentName\">{{ user.departmentName }}</div>\r\n              </div>\r\n              \r\n              <!-- Selection Indicator -->\r\n              <div class=\"selection-indicator\">\r\n                <svg \r\n                  *ngIf=\"isUserSelected(user.id)\"\r\n                  class=\"check-icon\" \r\n                  width=\"20\" \r\n                  height=\"20\" \r\n                  viewBox=\"0 0 24 24\" \r\n                  fill=\"none\" \r\n                  stroke=\"currentColor\" \r\n                  stroke-width=\"2\">\r\n                  <polyline points=\"20,6 9,17 4,12\"></polyline>\r\n                </svg>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Empty State -->\r\n            <div *ngIf=\"!isLoading() && filteredUsers().length === 0\" class=\"empty-users\">\r\n              <svg class=\"empty-icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\">\r\n                <path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path>\r\n                <circle cx=\"9\" cy=\"7\" r=\"4\"></circle>\r\n                <path d=\"M23 21v-2a4 4 0 0 1 0 7.75\"></path>\r\n                <path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path>\r\n              </svg>\r\n              <p class=\"empty-text\">{{ translate('notifications.no_users_found') }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- Modal Footer -->\r\n    <div class=\"modal-footer\">\r\n      <button \r\n        type=\"button\"\r\n        class=\"btn btn-secondary\"\r\n        (click)=\"onClose()\"\r\n        [disabled]=\"isLoading()\">\r\n        {{ translate('common.cancel') }}\r\n      </button>\r\n      <button \r\n        type=\"submit\"\r\n        class=\"btn btn-primary\"\r\n        [disabled]=\"!isFormValid() || isLoading()\"\r\n        (click)=\"onSubmit()\">\r\n        <svg *ngIf=\"!isLoading()\" class=\"btn-icon\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <path d=\"M22 2L11 13\"></path>\r\n          <polygon points=\"22,2 15,22 11,13 2,9 22,2\"></polygon>\r\n        </svg>\r\n        <svg *ngIf=\"isLoading()\" class=\"loading-spinner-small\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\r\n          <circle cx=\"12\" cy=\"12\" r=\"10\" stroke-dasharray=\"31.416\" stroke-dashoffset=\"31.416\">\r\n            <animate attributeName=\"stroke-dasharray\" dur=\"2s\" values=\"0 31.416;15.708 15.708;0 31.416\" repeatCount=\"indefinite\"/>\r\n            <animate attributeName=\"stroke-dashoffset\" dur=\"2s\" values=\"0;-15.708;-31.416\" repeatCount=\"indefinite\"/>\r\n          </circle>\r\n        </svg>\r\n        {{ isLoading() ? translate('common.sending') : translate('notifications.send_notification') }}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n", "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { SidebarComponent } from './sidebar/sidebar.component';\r\nimport { NotificationDropdownComponent } from './notification-dropdown/notification-dropdown.component';\r\nimport { AddNotificationModalComponent } from './add-notification-modal/add-notification-modal.component';\r\nimport { ConfirmationModalComponent } from './confirmation-modal/confirmation-modal.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SidebarComponent,\r\n    NotificationDropdownComponent,\r\n    AddNotificationModalComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    ConfirmationModalComponent\r\n  ],\r\n  exports: [\r\n    SidebarComponent,\r\n    NotificationDropdownComponent,\r\n    AddNotificationModalComponent,\r\n    ConfirmationModalComponent\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n"],
  "mappings": "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",
  "names": []
}
