{
  "version": 3,
  "sources": ["src/app/services/auth.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { map, catchError, tap } from 'rxjs/operators';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\nimport { environment } from '../../environments/environment';\r\nimport { \r\n  LoginRequest, \r\n  LoginResponse, \r\n  User, \r\n  ChangePasswordRequest, \r\n  ResetPasswordRequest,\r\n  ApiResponse \r\n} from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n  \r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  private permissionsSubject = new BehaviorSubject<string[]>([]);\r\n  public permissions$ = this.permissionsSubject.asObservable();\r\n\r\n  private jwtHelper = new JwtHelperService();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.checkAuthStatus();\r\n  }\r\n\r\n  private checkAuthStatus(): void {\r\n    const token = this.getToken();\r\n    const user = this.getUserFromStorage();\r\n    \r\n    if (token && user) {\r\n      this.currentUserSubject.next(user);\r\n      this.isAuthenticatedSubject.next(true);\r\n      this.extractPermissionsFromToken(token);\r\n    }\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<any> {\r\n    return this.http.post<any>(`${environment.apiBaseUrl}/Auth/login`, credentials)\r\n      .pipe(\r\n        tap(response => {\r\n          if (response.success && response.data) {\r\n            const data = response.data;\r\n            \r\n            // Extract token from response.data\r\n            this.setToken(data.token);\r\n            \r\n            // Create user object from response.data\r\n            const user: User = {\r\n              id: data.userId,\r\n              email: data.email,\r\n              firstName: data.firstName,\r\n              lastName: data.lastName,\r\n              roles: data.roles,\r\n              lastLoginAt: data.lastLoginAt\r\n            };\r\n            \r\n            this.setUser(user);\r\n            this.currentUserSubject.next(user);\r\n            this.isAuthenticatedSubject.next(true);\r\n            this.extractPermissionsFromToken(data.token);\r\n          } else {\r\n            throw new Error('Login failed: ' + (response.message || 'Unknown error'));\r\n          }\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  logout(): Observable<any> {\r\n    const token = this.getToken();\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    \r\n    return this.http.post(`${environment.apiBaseUrl}/Auth/logout`, {}, { headers })\r\n      .pipe(\r\n        tap(() => {\r\n          this.clearAuth();\r\n        }),\r\n        catchError(error => {\r\n          // Even if logout fails on server, clear local auth\r\n          this.clearAuth();\r\n          return throwError(() => error);\r\n        })\r\n      );\r\n  }\r\n\r\n  changePassword(request: ChangePasswordRequest): Observable<ApiResponse> {\r\n    const token = this.getToken();\r\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n    \r\n    return this.http.post<ApiResponse>(`${environment.apiBaseUrl}/Auth/change-password`, request, { headers })\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  sendResetEmail(email: string): Observable<ApiResponse> {\r\n    return this.http.get<ApiResponse>(`${environment.apiBaseUrl}/Auth/send-email-password`, {\r\n      params: { email }\r\n    }).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  resetPassword(request: ResetPasswordRequest): Observable<ApiResponse> {\r\n    return this.http.post<ApiResponse>(`${environment.apiBaseUrl}/Auth/reset-password`, request)\r\n      .pipe(\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // Token management\r\n  private setToken(token: string): void {\r\n    // Store token under exact key 'access_token'\r\n    localStorage.setItem('access_token', token);\r\n    \r\n    // Also store under 'token' for backward compatibility\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    // First try 'access_token', then fallback to 'token'\r\n    return localStorage.getItem('access_token') || localStorage.getItem('token');\r\n  }\r\n\r\n  private clearToken(): void {\r\n    // Clear all token-related keys\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('jwt');\r\n    localStorage.removeItem('userToken');\r\n  }\r\n\r\n  // User management\r\n  private setUser(user: User): void {\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  }\r\n\r\n  getUserFromStorage(): User | null {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  }\r\n\r\n  private clearUser(): void {\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  private clearAuth(): void {\r\n    this.clearToken();\r\n    this.clearUser();\r\n    this.currentUserSubject.next(null);\r\n    this.isAuthenticatedSubject.next(false);\r\n    this.permissionsSubject.next([]);\r\n  }\r\n\r\n  // Utility methods\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.isAuthenticatedSubject.value;\r\n  }\r\n\r\n  // Permission management methods\r\n  private extractPermissionsFromToken(token: string): void {\r\n    try {\r\n      if (this.jwtHelper.isTokenExpired(token)) {\r\n        this.permissionsSubject.next([]);\r\n        return;\r\n      }\r\n\r\n      const decodedToken = this.jwtHelper.decodeToken(token);\r\n      const permissions: string[] = [];\r\n\r\n      if (decodedToken && decodedToken.permission) {\r\n        // Handle both single permission and array of permissions\r\n        if (Array.isArray(decodedToken.permission)) {\r\n          permissions.push(...decodedToken.permission);\r\n        } else {\r\n          permissions.push(decodedToken.permission);\r\n        }\r\n      }\r\n\r\n      this.permissionsSubject.next(permissions);\r\n    } catch (error) {\r\n      console.error('Error extracting permissions from token:', error);\r\n      this.permissionsSubject.next([]);\r\n    }\r\n  }\r\n\r\n  getPermissions(): string[] {\r\n    return this.permissionsSubject.value;\r\n  }\r\n\r\n  hasPermission(permission: string): boolean {\r\n    const permissions = this.getPermissions();\r\n    return permissions.includes(permission);\r\n  }\r\n\r\n  hasAnyPermission(permissions: string[]): boolean {\r\n    const userPermissions = this.getPermissions();\r\n    return permissions.some(permission => userPermissions.includes(permission));\r\n  }\r\n\r\n  hasAllPermissions(permissions: string[]): boolean {\r\n    const userPermissions = this.getPermissions();\r\n    return permissions.every(permission => userPermissions.includes(permission));\r\n  }\r\n\r\n  private handleError(error: any): Observable<never> {\r\n    let errorMessage = 'An error occurred';\r\n    \r\n    if (error.error?.message) {\r\n      errorMessage = error.error.message;\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n    \r\n    return throwError(() => ({ message: errorMessage }));\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
