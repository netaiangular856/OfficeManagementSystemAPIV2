{
  "version": 3,
  "sources": ["src/app/services/image.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageService {\r\n  private apiUrl = environment.apiUrl;\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Get the full URL for a user image\r\n   * @param imageUrl - The relative image URL from the API\r\n   * @param userName - Optional user name for fallback display\r\n   * @returns Full URL for the image or fallback to default user image\r\n   */\r\n  getImageUrl(imageUrl?: string | null, userName?: string): string {\r\n    if (!imageUrl) {\r\n      return 'assets/images/user.png';\r\n    }\r\n    return `${this.apiUrl}/${imageUrl}`;\r\n  }\r\n\r\n  /**\r\n   * Get user initials for avatar fallback\r\n   * @param firstName - User's first name\r\n   * @param lastName - User's last name\r\n   * @returns Initials string (e.g., \"JD\" for John Doe)\r\n   */\r\n  getUserInitials(firstName?: string, lastName?: string): string {\r\n    if (!firstName && !lastName) {\r\n      return 'U';\r\n    }\r\n    \r\n    const firstInitial = firstName ? firstName.charAt(0).toUpperCase() : '';\r\n    const lastInitial = lastName ? lastName.charAt(0).toUpperCase() : '';\r\n    \r\n    return firstInitial + lastInitial;\r\n  }\r\n\r\n  /**\r\n   * Check if an image URL is valid\r\n   * @param imageUrl - The image URL to validate\r\n   * @returns boolean indicating if the URL is valid\r\n   */\r\n  isValidImageUrl(imageUrl?: string | null): boolean {\r\n    if (!imageUrl) {\r\n      return false;\r\n    }\r\n    \r\n    // Check if it's a valid URL or relative path\r\n    try {\r\n      new URL(imageUrl);\r\n      return true;\r\n    } catch {\r\n      // If it's not a full URL, check if it's a valid relative path\r\n      return imageUrl.startsWith('/') || imageUrl.includes('.');\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;AAMM,IAAO,eAAP,MAAO,cAAY;EACf,SAAS,YAAY;EAE7B,cAAA;EAAgB;;;;;;;EAQhB,YAAY,UAA0B,UAAiB;AACrD,QAAI,CAAC,UAAU;AACb,aAAO;IACT;AACA,WAAO,GAAG,KAAK,MAAM,IAAI,QAAQ;EACnC;;;;;;;EAQA,gBAAgB,WAAoB,UAAiB;AACnD,QAAI,CAAC,aAAa,CAAC,UAAU;AAC3B,aAAO;IACT;AAEA,UAAM,eAAe,YAAY,UAAU,OAAO,CAAC,EAAE,YAAW,IAAK;AACrE,UAAM,cAAc,WAAW,SAAS,OAAO,CAAC,EAAE,YAAW,IAAK;AAElE,WAAO,eAAe;EACxB;;;;;;EAOA,gBAAgB,UAAwB;AACtC,QAAI,CAAC,UAAU;AACb,aAAO;IACT;AAGA,QAAI;AACF,UAAI,IAAI,QAAQ;AAChB,aAAO;IACT,QAAQ;AAEN,aAAO,SAAS,WAAW,GAAG,KAAK,SAAS,SAAS,GAAG;IAC1D;EACF;;qCArDW,eAAY;EAAA;4EAAZ,eAAY,SAAZ,cAAY,WAAA,YAFX,OAAM,CAAA;;;sEAEP,cAAY,CAAA;UAHxB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
