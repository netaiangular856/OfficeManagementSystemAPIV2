{
  "version": 3,
  "sources": ["src/app/services/roles.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Role, CreateRoleRequest, UpdateRoleRequest, AssignPermissionsRequest, RoleSearchParams, PagedResponse } from '../models/role.model';\r\nimport { environment } from '../../environments/environment';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RolesService {\r\n  private apiUrl = `${environment.apiBaseUrl}/Admin/roles`;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  private getAuthHeaders(): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    return new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n  }\r\n\r\n  getRoles(params: RoleSearchParams = {}): Observable<PagedResponse<Role>> {\r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params.page) httpParams = httpParams.set('Page', params.page.toString());\r\n    if (params.pageSize) httpParams = httpParams.set('PageSize', params.pageSize.toString());\r\n    if (params.search) httpParams = httpParams.set('search', params.search);\r\n    \r\n    return this.http.get<PagedResponse<Role>>(this.apiUrl, { \r\n      headers: this.getAuthHeaders(),\r\n      params: httpParams\r\n    });\r\n  }\r\n\r\n  getRoleById(roleId: string): Observable<Role> {\r\n    return this.http.get<any>(`${this.apiUrl}/${roleId}`, { headers: this.getAuthHeaders() }).pipe(\r\n      map(response => {\r\n        if (response.success && response.data) {\r\n          return response.data;\r\n        }\r\n        throw new Error('Failed to get role');\r\n      })\r\n    );\r\n  }\r\n\r\n  createRole(roleData: CreateRoleRequest): Observable<Role> {\r\n    return this.http.post<any>(this.apiUrl, roleData, { headers: this.getAuthHeaders() }).pipe(\r\n      map(response => {\r\n        if (response.success && response.data) {\r\n          return response.data;\r\n        }\r\n        throw new Error('Failed to create role');\r\n      })\r\n    );\r\n  }\r\n\r\n  updateRole(roleId: string, roleData: UpdateRoleRequest): Observable<Role> {\r\n    return this.http.put<any>(`${this.apiUrl}/${roleId}`, roleData, { headers: this.getAuthHeaders() }).pipe(\r\n      map(response => {\r\n        if (response.success && response.data) {\r\n          return response.data;\r\n        }\r\n        throw new Error('Failed to update role');\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteRole(roleId: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${roleId}`, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  getRolePermissions(roleId: string): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/${roleId}/permissions`, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  assignPermissionsToRole(roleId: string, permissionIds: number[]): Observable<void> {\r\n    const request: AssignPermissionsRequest = { permissionIds };\r\n    return this.http.post<void>(`${this.apiUrl}/${roleId}/permissions`, request, { headers: this.getAuthHeaders() });\r\n  }\r\n\r\n  removePermissionFromRole(roleId: string, permissionId: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${roleId}/permissions/${permissionId}`, { headers: this.getAuthHeaders() });\r\n  }\r\n}\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAWM,IAAO,eAAP,MAAO,cAAY;EAIb;EACA;EAJF,SAAS,GAAG,YAAY,UAAU;EAE1C,YACU,MACA,aAAwB;AADxB,SAAA,OAAA;AACA,SAAA,cAAA;EACP;EAEK,iBAAc;AACpB,UAAM,QAAQ,KAAK,YAAY,SAAQ;AACvC,WAAO,IAAI,YAAW,EAAG,IAAI,iBAAiB,UAAU,KAAK,EAAE;EACjE;EAEA,SAAS,SAA2B,CAAA,GAAE;AACpC,QAAI,aAAa,IAAI,WAAU;AAE/B,QAAI,OAAO;AAAM,mBAAa,WAAW,IAAI,QAAQ,OAAO,KAAK,SAAQ,CAAE;AAC3E,QAAI,OAAO;AAAU,mBAAa,WAAW,IAAI,YAAY,OAAO,SAAS,SAAQ,CAAE;AACvF,QAAI,OAAO;AAAQ,mBAAa,WAAW,IAAI,UAAU,OAAO,MAAM;AAEtE,WAAO,KAAK,KAAK,IAAyB,KAAK,QAAQ;MACrD,SAAS,KAAK,eAAc;MAC5B,QAAQ;KACT;EACH;EAEA,YAAY,QAAc;AACxB,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,MAAM,IAAI,MAAM,IAAI,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE,EAAE,KACxF,IAAI,cAAW;AACb,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,eAAO,SAAS;MAClB;AACA,YAAM,IAAI,MAAM,oBAAoB;IACtC,CAAC,CAAC;EAEN;EAEA,WAAW,UAA2B;AACpC,WAAO,KAAK,KAAK,KAAU,KAAK,QAAQ,UAAU,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE,EAAE,KACpF,IAAI,cAAW;AACb,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,eAAO,SAAS;MAClB;AACA,YAAM,IAAI,MAAM,uBAAuB;IACzC,CAAC,CAAC;EAEN;EAEA,WAAW,QAAgB,UAA2B;AACpD,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,MAAM,IAAI,MAAM,IAAI,UAAU,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE,EAAE,KAClG,IAAI,cAAW;AACb,UAAI,SAAS,WAAW,SAAS,MAAM;AACrC,eAAO,SAAS;MAClB;AACA,YAAM,IAAI,MAAM,uBAAuB;IACzC,CAAC,CAAC;EAEN;EAEA,WAAW,QAAc;AACvB,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,MAAM,IAAI,MAAM,IAAI,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE;EAC9F;EAEA,mBAAmB,QAAc;AAC/B,WAAO,KAAK,KAAK,IAAS,GAAG,KAAK,MAAM,IAAI,MAAM,gBAAgB,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE;EACtG;EAEA,wBAAwB,QAAgB,eAAuB;AAC7D,UAAM,UAAoC,EAAE,cAAa;AACzD,WAAO,KAAK,KAAK,KAAW,GAAG,KAAK,MAAM,IAAI,MAAM,gBAAgB,SAAS,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE;EACjH;EAEA,yBAAyB,QAAgB,cAAoB;AAC3D,WAAO,KAAK,KAAK,OAAa,GAAG,KAAK,MAAM,IAAI,MAAM,gBAAgB,YAAY,IAAI,EAAE,SAAS,KAAK,eAAc,EAAE,CAAE;EAC1H;;qCA1EW,eAAY,mBAAA,UAAA,GAAA,mBAAA,WAAA,CAAA;EAAA;4EAAZ,eAAY,SAAZ,cAAY,WAAA,YAFX,OAAM,CAAA;;;sEAEP,cAAY,CAAA;UAHxB;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
